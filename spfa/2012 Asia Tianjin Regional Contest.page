[Contest
Link](http://acm.hust.edu.cn/vjudge/contest/view.action?cid=99736#overview)

A. Mahjong \[JayYe\]
====================

题意： 麻将题，给你13张麻将，问有多少种摸进来能让你胡的牌。

题解： 直接模拟就好，枚举下对子是哪个，状压枚举下3张的是哪些就可以了。

B. Sum of divisors\[Bobo\]
==========================

题意：简单题，枚举下约数就行了。

C. Locker\[Bobo\]
=================

题意：问将一个数字串变换成另一个串的最小操作次数，只能够同时对于连续1\~3个数字加减1

题解：直接暴力压当前三位进行dp，每一层状态用spfa进行转移。

D. Game \[\*Nero\]
==================

题意：给n(&lt;=1e5)个整数Ai,abs(Ai) &lt;= 1e5,abs(sum(Ai)) &lt;=
10。这n个整数绕成一个环。有一种操作：选一个i，把Ai变负，给它相邻的两个数加上Ai。操作可以做无限次。问最少做几次可以使得每个数都非负。

题解：[结论](http://async.icpc-camp.org/d/276-tianjin-2012-d-game)。统计S的话，由于有个上取整操作，按余数分类讨论一下即可。注意负数取整方式。

E. Charge-station \[Nero\]
==========================

题意：平面上有n个坐标，他们的距离是他们的欧几里德距离上取整。要在一些坐标处修建加油站，使得一个人可以从节点1出发访问所有的节点并回来。在不加油的情况下这个人只能走D米。在节点i建加油站的代价是2\^(i-1)。求最小代价及方案。

题解：由代价的特殊性，从高到低贪心，转化成判定问题：有些站点有加油站，问是否可以完成旅行。对于可以完成旅行的方案，加油站们必然能够用边权&lt;=D的边连成生成树，然后对于非加油站，只要能够从一个加油站走到它再走回去就可以了。

F. str2int \[JayYe\]
====================

题意： 给你n (n &lt;= 1e4)
个串，总串长不超过1e5，把所有子串转化成数字，问所有不同的数字的和模上2012的答案为多少。

题解：
对所有的串构建后缀数组，然后可以利用lcp搞出所有不同的子串，维护下一些前缀和之类的就解决了。

G.
==

H. Hunters \[Nero\]
===================

题解：简单概率题，手算一下式子即可。

I. No place to hide\[\*Bobo\]
=============================

题意：给你N个点以及他们的速度，求一个最小点集一定能够包围一个拥有最大速度的点。

题解：对于存在速度大于那个点速度的点的话直接特判1，否则算出每个点对应角度的覆盖范围，然后进行dp。

J. mmm2 \[\*JayYe\]
===================

题意： 有n(n &lt;=
5e4)个点n条边的图，不一定联通，每个点有点权，对于每个大小为x的联通块里恰好有x条边，问不超过K(K&lt;=10)个不相交的路径的点权和最大是多少。

题解：
对于每个联通块都是一个环上有若干颗树，在树上比较好dp，设dp\[i\]\[j\]\[0\]表示子树i已经有j条路径并且i没有用过的最大点权和，dp\[i\]\[j\]\[1\]表示子树i已经有j条路径并且有条链端点在i的最大点权和，dp\[i\]\[j\]\[2\]表示子树i已经有j条路径并且i已经被用过了的最大点权和。于是树上部分解决了，现在来考虑环上如何dp，环上可以从任意一个点开始dp，不过由于是环，所以这个点可能最终会和前一个点连起来，所以dp状态要多记录一些信息。还有个trick点是，有可能环上要绕一整圈，所以还要记录从起点开始的链有没有换链过。所以最终的dp状态是dp\[i\]\[j\]\[jj\]\[k\]\[l\]表示到环上第i个点，j表示第一个点是否作为链端点，jj表示是否换过链，k表示当前路径数，l表示i是否还能再用，的最大点权和。最后所有联通块dp一下合并下状态即可。

K. Queue Sequence \[Nero\]
==========================

题意：有一个队列。有一个队列的操作序列，(+i)表示队尾插入i，(-i)表示队首弹出i。要实现3种操作：1.(insert
p)往操作序列的p位置插入一个最小的不在队列里的正整数(+x)，在能够保证操作序列合法的尽量右侧插入(-x)。2.(remove
x)把(+x)和(-x)从操作序列里删除。3.(query
x)询问操作序列里(+x)到(-x)之间的数字和。

题解：插入，删除，查询
这仨操作，需要一个平衡树来做。而能够方便支持查询指定节点的，就是splay了。对于(-x)的插入位置，是在队列中位于x后面那个数被删除之前。
