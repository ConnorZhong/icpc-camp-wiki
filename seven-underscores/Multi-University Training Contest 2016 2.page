**A Acperience**

等价于把所有数取绝对值后求方差。

**B Born Slippy**

要处理位运算相关的转移，把询问的数字拆上前8位和后8位，把被查询的数字同样拆开。
贡献为$(a\&c)<<8) + (b\&d)$ (以与运算为例子) 原来的转移方程为
$f_i = max( f_j + (i\&j))$
对于被查询的数字前8位相同的数字记录$f(c,*)$数组表示当查询的数字后8位为\*时
${max(f_j}$ + 后8位贡献$)$
在查询时确定了查询的后8位，只要枚举被查询的前8位，求出最优值。
在更新时确定了被查询的前8位，枚举查询的后8位，更新最优值。

**C Call It What You Want**

**D Differencia**

建立归并树，归并过程记录当前归并的数字在左右节点中的$rank$，这样查询的时候只需要通过二分得到在树根节点的$rank$，然后用之前得到的左右节点的$rank$，依次向下传递$rank$，标记更新同理。

**E Eureka**

每个点做一遍统计。一条直线只在枚举点是最小标号的时候统计，再扣掉每个点重复计算的次数，次数为所在直线数量减一。这个做法要特判所有点共点。

**F Fantasia**

cdq分治+启发式合并并查集，当分治区间为\[L,R\]时，将所有左右端点不在区间$(L,R)$的边使用并查集合并，合并时需要记录合并过程，方便回溯时进行撤销操作，将左端点或者右端点在$(L,R)$的边递归下去处理，每条边递归的次数至多为$2*log_n$，时间复杂度$O(nlog_{n}^2)$。
点双联通模板get

**G Glorious Brilliance**

考虑最终点之间的置换情况。记距离为一个点到其目标点到距离。一次交换可以减少两个点之间的距离总共为2。如果置换情况是一个环，那么将其拆成一个个2元环必然会更少的距离。对点和目标位置做最小权匹配得到预估的最小花费。先要证明存在方案是的交换成立。假设起点为u，终点为v，在最短路上找到第一个和当前起点颜色不同的点，从找到的点往起点交换。交换完后起点满足，被找到的点颜色变化，继续处理直到找到终点。

**H Helter Skelter**

处理出一些矩形，之后扫描线判定这个点是否在矩形中。比赛中一直TLE，卡常过的，做法常数太大。

**I It's All In The Mind**

前两位尽量大，后几位尽量小。

**J.Join The Future**

限制条件下前缀异或和并查集后size大于1的集合最多只有20个，枚举这些集合的关系DP。
size为1的集合无限制，其它点的奇偶性确定。

**K Keep On Movin**

计算奇数的个数，尽量平均分配。

**L La Vie en rose**

$f(i,j)$表示A串中匹配到i位置，B串中匹配到j位置。转移复杂度为$O(n*m)$，bitset优化。

**M.Memento Mori**

先按照x第一关键字排序，得到一个序。枚举一个点作为最左侧的点，将右边的点按照y第一关键字建立双向链表。从右往左枚举最右侧的点，按照permutation知道上面中间和下面分别要找几个点，用链表把它们找出来，判定这个矩形内点点数是否为4，是否满足条件，之后在链表中删掉右端点。
