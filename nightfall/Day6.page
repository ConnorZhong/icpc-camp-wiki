D. Lunch Queue
==============

Aki
---

把相同颜色的人并成一坨，就没有插入操作了。所以不用平衡树，直接vector加树状数组算rank就行了。复原排列可能还要个线段树？复杂度还是$O(\log^2n)$的，但是常数比平衡树小太多。

``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
const int N = 4e5 + 5;
int tree[N * 4], n;
void add(int x, int c) {
    x ++;
    while (x <= n + 1) {
        tree[x] += c;
        x += x & -x;
    }
}
int query(int x) {
    x ++;
    int res = 0;
    while (x) {
        res += tree[x];
        x -= x & -x;
    }
    return res;
}
void add2(int x, int l, int r, int p, int c) {
    if (l > p || r < p) return;
    if (l == r) {
        tree[x] += c;
        return;
    }
    int mid = (l + r) / 2;
    add2(x + x, l, mid, p, c);
    add2(x + x + 1, mid + 1, r, p, c);
    tree[x] = tree[x + x] + tree[x + x + 1];
}
int query2(int x, int l, int r, int L, int &n) {
    if (r < L) return 0;
    if (l >= L) {
        if (tree[x] < n) {
            n -= tree[x];
            return 0;
        }
        if (l == r) return l;
    }
    int mid = (l + r) / 2;
    int res = query2(x + x, l, mid, L, n);
    if (res) return res;
    return query2(x + x + 1, mid + 1, r, L, n);
}
void build(int x, int l, int r) {
    if (l == r) {
        tree[x] = 1;
        return;
    }
    int mid = (l + r) / 2;
    build(x + x, l, mid);
    build(x + x + 1, mid + 1, r);
    tree[x] = tree[x + x] + tree[x + x + 1];
}
vector<vector<pair<int, int>>> que;
vector<int> col[N];
int ans[N];
int main() {
    scanf("%d", &n);
    for (int i = 1; i <= n; ++ i) {
        int c, a;
        scanf("%d%d", &c, &a);
        bool atend = 1;
        if (!col[c].empty()) {
            int l = 0, r = col[c].size() - 1, res = -1;
            while (l <= r) {
                int mid = (l + r) / 2;
                int ptr = col[c][mid];
                int sz = que[ptr].size();
                int pre = query(ptr);
                if (i - 1 - (pre + sz) <= a) {
                    res = mid;
                    r = mid - 1;
                }
                else {
                    l = mid + 1;
                }
            }
            if (res == -1) {
                atend = 1;
            }
            else {
                atend = 0;
                int mid = res;
                int ptr = col[c][mid];
                int sz = que[ptr].size();
                int pre = query(ptr);
                int front = max(0, i - 1 - a - pre);
                que[ptr].push_back({i, front});
                add(ptr + 1, 1);
            }
        }
        if (atend) {
            vector<pair<int, int>> emp;
            emp.push_back({i, 0});
            col[c].push_back(que.size());
            que.push_back(emp);
            add(que.size(), 1);
        }
    }
    int tot = 0;
    build(1, 1, n);
    for (auto &q : que) {
        reverse(q.begin(), q.end());
        for (auto p : q) {
            p.second ++;
            int tmp = query2(1, 1, n, tot + 1, p.second);
            ans[tmp] = p.first;
            add2(1, 1, n, tmp, -1);
        }
        tot += q.size();
    }
    for (int i = 1; i <= n; ++ i) printf("%d ", ans[i]); puts("");
}
```

E. Oneness
==========

Aki
---

求$\lfloor\frac{N}{11}\rfloor+\lfloor\frac{N}{111}\rfloor+\lfloor\frac{N}{1111}\rfloor+...$，$N\leq10^{250000}$是随机生成的。

本题主要思想是利用$\frac{1}{10^x-1}=\frac{1}{10^x}+\frac{1}{10^{2x}}+\frac{1}{10^{3x}}+...$。

把$N$乘以$9$。原式化为$\sum\frac{1}{10^i-1}-\sum\left\{\frac{1}{10^i-1}\right\}$，前一项是精确值，后一项是减去小数部分。

前一项可以使用主要思想用FFT算到近似精确值，后一项发现因为是随机串，所以只要算前几位（我取了25）就行了。但随机种子并不是随机的，所以还是会有$0.999...$循环的问题，这时候会减1，其实是不能被减掉的。所以对于$0.999$和1特别接近的，需要写个函数特判这一项是不是正好除尽，没有小数部分。这个我用了$O(n\log n)$做（还是用主要思想转成判断：循环小数加法是否为9循环），因为他本质还是随机串，构不出那么多位置的特判。

精度开$1e-12$会炸，开$1e-6$才能过。

``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
const double PI = acos(-1.);
const int N = 524288, L = 15, MASK = (1 << L) - 1;
typedef long long LL;
typedef complex<double> Complex;
LL a[N], b[N];
Complex w[N];
void FFTInit() {
    for (int i = 0; i < N; ++ i)
        w[i] = Complex(cos(2 * i * PI / N), sin(2 * i * PI / N));
}
void FFT(Complex p[], int n) {
    for (int i = 1, j = 0; i < n - 1; ++ i) {
        for (int s = n; j ^= s >>= 1, ~j & s;);
        if (i < j) swap(p[i], p[j]);
    }
    for (int d = 0; (1 << d) < n; ++ d) {
        int m = 1 << d, m2 = m * 2, rm = n >> (d + 1);
        for (int i = 0; i < n; i += m2) {
            for (int j = 0; j < m; ++ j) {
                Complex &p1 = p[i + j + m], &p2 = p[i + j];
                Complex t = w[rm * j] * p1;
                p1 = p2 - t, p2 = p2 + t;
            }
        }
    }
}
Complex A[N], B[N], C[N], D[N];
void mul(LL a[N], LL b[N]) {
    for (int i = 0; i < N; ++i) {
        A[i] = Complex(a[i] >> L, a[i] & MASK);
        B[i] = Complex(b[i] >> L, b[i] & MASK);
    }
    FFT(A, N), FFT(B, N);
    for (int i = 0; i < N; ++i) {
        int j = (N - i) % N;
        Complex da = (A[i] - conj(A[j])) * Complex(0, -0.5),
                db = (A[i] + conj(A[j])) * Complex(0.5, 0),
                dc = (B[i] - conj(B[j])) * Complex(0, -0.5),
                dd = (B[i] + conj(B[j])) * Complex(0.5, 0);
        C[j] = da * dd + da * dc * Complex(0, 1);
        D[j] = db * dd + db * dc * Complex(0, 1);
    }
    FFT(C, N), FFT(D, N);
    for (int i = 0; i < N; ++i) {
        LL da = (LL)(C[i].imag() / N + 0.5),
            db = (LL)(C[i].real() / N + 0.5),
            dc = (LL)(D[i].imag() / N + 0.5),
            dd = (LL)(D[i].real() / N + 0.5);
        a[i] = ((dd << (L * 2)) + ((db + dc) << L) + da);
    }
}
const long double eps = 1e-6L;
bool check_mod0(int m) {
    LL l = 0, r = 1e9;
    vector<vector<LL>> aa;
    for (int i = 0; i * m < N / 2; ++ i) {
        vector<LL> tmp;
        LL ss = 0;
        for (int j = 0; j < m; ++ j) {
            int p = i * m + j;
            if (p < N / 2)
                tmp.push_back(a[i * m + j]);
            else
                tmp.push_back(0);
            ss += tmp.back();
        }
        if (ss) {
            aa.push_back(tmp);
            //for (LL u : tmp) printf("%lld ", u); puts("");
        }
    }
    bool ans9 = 0;
    while (l <= r) {
        LL mid = (l + r) / 2;
        LL tmp = mid;
        bool all9 = 1;
        for (int i = 0; i < m; ++ i) {
            for (auto &x : aa) {
                tmp += x[i];
            }
            all9 &= (tmp % 10) == 9;
            tmp /= 10;
        }
        if (tmp == mid) {
            ans9 = all9;
            r = mid - 1;
        }
        else if (tmp < mid) {
            r = mid - 1;
        }
        else {
            l = mid + 1;
        }
    }
    return ans9;
}
int main() {
    FFTInit();
    int l; unsigned int s;
    scanf("%d%u", &l, &s);
    for (int i = 0; i < l; ++ i) {
        a[l - i - 1] = (s / 1024 % 10) * 9;
        //a[i] = 1 * 9;
        s = 747796405U * s - 1403630843U;
    }
    LL atmp = 0;
    for (int i = 0; i < l; ++ i) {
        atmp += a[i];
        a[i] = atmp % 10;
        atmp /= 10;
        if (atmp && i == l - 1) l ++;
    }
    long double tmp = 0.;
    LL extra = 0;
    for (int i = 2; i <= l; ++ i) {
        long double cur = 0.;
        for (int j = 0; j < N / 2; j += i) {
            long double ten = 1.;
            for (int l = 0; l < 25; ++ l) {
                ten /= 10.;
                int p = j + i - 1 - l % i;
                if (p >= 0 && p < N / 2)
                    cur += ten * a[p];
            }
        }
        cur -= floor(cur);
        //printf("i=%d cur = %.4f\n", i, (double) cur);
        if (1.0 - cur < eps) {
            cur = 0.;
            /*for (int j = 0; j < N / 2; j += i) {
                long double ten = 1.;
                for (int l = 0; l < max(i, 50); ++ l) {
                    ten /= 10.;
                    int p = j + i - 1 - l % i;
                    if (p >= 0 && p < N / 2)
                        cur += ten * a[p];
                }
            }
            cur -= floor(cur);*/
            if (check_mod0(i)) {
                cur = 0;
                //printf("i=%d danger 0\n", i);
            }
            else {
                cur = 1;
                //printf("i=%d danger 1\n", i);
            }
        }
        tmp -= cur;
    }
    for (int i = 2; i <= l; ++ i) {
        for (int j = i; j <= N / 2; j += i) {
            b[N / 2 - j] += 1;
        }
    }
    mul(a, b);
    long double ten = 1.;
    for (int i = 1; i < N / 2; ++ i) {
        ten /= 10;
        tmp += ten * a[N / 2 - i];
    }
    extra += (LL)(tmp + 0.5);
    //printf("%.10f\n", (double) tmp);
    assert(fabs(tmp - floor(tmp + 0.5)) < 0.01);
    for (int i = N / 2; i < N; ++ i) {
        LL tmp = extra + a[i];
        a[i] = tmp % 10;
        extra = tmp / 10;
    }
    bool zero = 0;
    for (int i = N - 1; i >= N / 2; -- i) {
        if (a[i] > 0 || zero) {
            zero = 1;
            putchar('0' + a[i]);
        }
    }
    if (!zero) putchar('0');
    puts("");
}
```

J. Stairways
============

Aki
---

DP\[i\]表示当前最大值所在的另一个队伍的最大值为第i个人的答案。然后发现要区间加，区间加一个斜率，区间查最小值，单点插入。直接根号分块维护凸包。

然后det爆long long wa了一年。分块没有把重点去掉T了一年。

``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
struct P {
    LL x, y;
    P(LL x, LL y) : x(x), y(y) {}
};
P operator - (P a, P b) { return P(a.x - b.x, a.y - b.y); }
bool operator < (P a, P b) { return a.x < b.x || (a.x == b.x && a.y < b.y); }
__int128 det(P a, P b) { return (__int128) a.x * b.y - (__int128) a.y * b.x; }
const int N = 1e5 + 5, B = 316;
vector<P> all[N / B + 5], con[N / B + 5];
LL add[N / B + 5], k[N / B + 5]; int las[N / B + 5];
void build(int x) {
    vector<P> &all = ::all[x];
    //sort(all.begin(), all.end());
    vector<P> &res = con[x]; res.clear();
    for (P p : all) {
        while (res.size() >= 2 && det(res.back() - res[res.size() - 2], p - res[res.size() - 2]) <= 0) res.pop_back();
        res.push_back(p);
    }
    las[x] = res.size() - 1;
}
void destroy(int x) {
    con[x].clear();
    for (P &p : all[x]) {
        p.y += p.x * k[x] + add[x];
    }
    add[x] = 0;
    k[x] = 0;
}
vector<int> at;
void _add_pre(int t, LL x) {
    int r = lower_bound(at.begin(), at.end(), t) - at.begin();
    for (int i = 0; i < r / B; ++ i) add[i] += x;
    destroy(r / B);
    for (P &p : all[r / B]) {
        if (p.x <= t) p.y += x;
    }
    build(r / B);
}
void _add_suf(int t, LL x) {
    int r = lower_bound(at.begin(), at.end(), t) - at.begin();
    for (int i = r / B + 1; i <= ((int) at.size() - 1) / B; ++ i) add[i] += x;
    destroy(r / B);
    for (P &p : all[r / B]) {
        if (p.x > t) p.y += x;
    }
    build(r / B);
}
void _raise(int t, LL x) {
    int r = lower_bound(at.begin(), at.end(), t) - at.begin();
    for (int i = r / B + 1; i <= ((int) at.size() - 1) / B; ++ i) k[i] += x;
    destroy(r / B);
    for (P &p : all[r / B]) {
        if (p.x > t) p.y += p.x * x;
    }
    build(r / B);
}
void _insert(P p) {
    int r = lower_bound(at.begin(), at.end(), (int) p.x) - at.begin();
    destroy(r / B);
    vector<P> tmp;
    for (P q : all[r / B]) {
        if (q.x < p.x) {
            tmp.push_back(q);
        }
        else if (q.x == p.x) {
            q.y = min(q.y, p.y);
        }
        else {
            tmp.push_back(p);
            p = P(1e18, 1e18);
            tmp.push_back(q);
        }
    }
    if (p.x < 1e17) tmp.push_back(p);
    all[r / B].swap(tmp);
    build(r / B);
}
LL query_in_convex(LL k, int x) {
    vector<P> &con = ::con[x];
    if (con.empty()) return (LL) 1e18;
    /*LL res = -k * con.back().x + con.back().y;
    int l = 0, r = con.size() - 2;
    while (l <= r) {
        int mid = (l + r) / 2;
        LL v1 = -k * con[mid].x + con[mid].y;
        LL v2 = -k * con[mid + 1].x + con[mid + 1].y;
        if (v1 < v2) {
            res = min(res, v1);
            r = mid - 1;
        }
        else {
            res = min(res, v2);
            l = mid + 1;
        }
    }
    return res;*/
    int &y = las[x];
    LL res = -k * con[y].x + con[y].y;
    while (y > 0 && -k * con[y - 1].x + con[y - 1].y <= res) {
        y --;
        res = -k * con[y].x + con[y].y;
    }
    return res;
}
LL _query(int t) {
    int r = lower_bound(at.begin(), at.end(), t) - at.begin();
    LL res = 1e18;
    for (int i = 0; i < r / B; ++ i) res = min(res, query_in_convex(-k[i], i) + add[i]);
    destroy(r / B);
    for (P &p : all[r / B]) {
        if (p.x <= t) res = min(res, p.y);
    }
    build(r / B);
    return res;
}
int main() {
    int n;
    scanf("%d", &n);
    vector<int> x;
    for (int i = 1; i <= n; ++ i) {
        int t;
        scanf("%d", &t);
        x.push_back(t);
    }
    at = x;
    at.push_back(0);
    sort(at.begin(), at.end());
    at.erase(unique(at.begin(), at.end()), at.end());
    _insert(P(0, 0));
    int cur_max = 0;
    for (int t : x) {
        if (cur_max <= t) {
            cur_max = t;
            continue;
        }
        LL res = _query(t);
        _add_pre(t, cur_max - t);
        _raise(t, 1);
        _add_suf(t, -t);
        _insert(P(t, res));
    }
    LL ans = 1e18;
    for (int i = 0; i <= (at.size() - 1) / B; ++ i) {
        destroy(i);
        for (P p : all[i]) ans = min(ans, p.y);
    }
    printf("%lld\n", ans);
}
```
