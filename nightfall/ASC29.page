A：平面上给你$n$个点，让你找一条从左到右的折线，令折线上端点数为A，下端点数为B，折线上点数为C，使得max(A,B,C)-min(A,B,C)最小，$n\leq100$

用$f[i][j][k]$表示当前在第$i$个点，折线上有$j$个点，折线下有$k$个点是否可行，预处理出从第$i$个点到第$j$个点下端有几个点（线段中不能有点），即可用$O(n^4)$DP暴力出解

``` {.cpp}
#include<bits/stdc++.h>
#define N 111
#define inf 1e9
#define Mp make_pair
#define fr(i,n) for(int i=1;i<=n;i++)
using namespace std;
int n,an,ff,x,y,z,xx,zz,cj,t,q[N],X[N],Y[N],f[N][N][N],V[N][N],prex[N][N][N],prey[N][N][N];
int G(int x,int y){return max(max(x,y),n-x-y)-min(min(x,y),n-x-y);}
int main(){
    an=1e9;
    scanf("%d",&n);
    fr(i,n)scanf("%d%d",&X[i],&Y[i]);
    fr(i,n)fr(j,n)if(X[j]>X[i]){
        fr(k,n)if(X[k]>X[i]&&X[k]<=X[j]&&k!=i&&k!=j){
            cj=(X[j]-X[i])*(Y[k]-Y[i])-(X[k]-X[i])*(Y[j]-Y[i]);
            if(!cj)V[i][j]=-inf;
            if(cj<0)V[i][j]++;
        }
    }else V[i][j]=-inf;
    fr(i,n){
        ff=0;
        fr(j,n)if(X[j]<X[i]&&Y[i]==Y[j])ff=1;
        if(!ff){
            x=0;
            fr(j,n)if(X[j]<=X[i]&&Y[i]>Y[j])x++;
            f[i][1][x]=1;
        }
    }
    fr(i,n)fr(j,n)for(int k=0;k<=n;k++)if(f[j][i][k])fr(l,n)if(X[l]>X[j]&&V[j][l]>=0){
        f[l][i+1][k+V[j][l]]=1;
        prex[l][i+1][k+V[j][l]]=j;
        prey[l][i+1][k+V[j][l]]=k;
    }
    fr(i,n){
        ff=0;xx=0;
        fr(j,n)if(X[j]>X[i]){
            if(Y[j]==Y[i])ff=1;
            if(Y[j]<Y[i])xx++;
        }
        if(!ff)fr(j,n)for(int k=0;k<=n;k++)if(f[i][j][k])
            if(G(j,k+xx)<an){
                an=G(j,k+xx);
                x=i;y=j;z=k;
            }
    }
    for(printf("%d\n",y);y;y--){
        q[++t]=x;
        xx=prex[x][y][z];
        zz=prey[x][y][z];
        x=xx;z=zz;
    }
    for(int i=t;i;i--)printf("%d%c",q[i],i==1?'\n':' ');
}
```

B：树状数组优化DP即可

``` {.cpp}


#include<bits/stdc++.h>
#define N 111111
#define fr(i,n) for(int i=1;i<=n;i++)
#define rd(x) scanf("%d",&x)
using namespace std;
int n,i,cnt,x,k,an,t,o,q[N],a[N],v[N],c[N][2],b[N][2],f[N],pre[N];
void ad(int x,int y,int z,int lx){
    x=(lx)?cnt-x+1:x;
    for(;x<=cnt;x+=x&-x)if(z>c[x][lx])b[x][lx]=y,c[x][lx]=z;
}
void qu(int x,int lx){
    if(lx)x=cnt-x+1;
    for(;x;x-=x&-x)if(c[x][lx]>an)an=c[x][lx],o=b[x][lx];
}
int main(){
    freopen("financial.in","r",stdin);freopen("financial.out","w",stdout);
    rd(n);rd(k);
    fr(i,n)rd(a[i]),v[i]=a[i];
    sort(v+1,v+n+1);cnt=unique(v+1,v+n+1)-v-1;
    fr(i,n){
        an=-1;
        x=upper_bound(v+1,v+cnt+1,a[i]-k)-v-1;qu(x,0);
        x=lower_bound(v+1,v+cnt+1,a[i]+k)-v;qu(x,1);
        pre[i]=o;f[i]=++an;
        x=lower_bound(v+1,v+cnt+1,a[i])-v;ad(x,i,an,0);ad(x,i,an,1);
    }
    an=0;
    fr(i,n)if(f[i]>an)an=f[i],x=i;
    for(;x;x=pre[x])q[++t]=x;
    printf("%d\n",t);
    for(i=t;i;i--)printf("%d%c",a[q[i]],i==1?'\n':' ');
}
```

C：傻题

E：给定$n$求在$n*n$棋盘上满足横线所在坐标和纵线所在坐标在$1~n$都出现一次的凸包个数，$n\leq30$

F：对所有字符分别哈希一遍，暴力判断哈希值是否一一对应，能卡过去

``` {.cpp}
#include<bits/stdc++.h>
#define N 222222
#define M 1000000007
using namespace std;
char s[N];bool ff;
int n,m,i,j,w,t,S[128][N],V[128],E[128],q[N];
int main(){
    scanf("%s",s+1);n=strlen(s+1);
    for(i=1;i<=n;i++)for(j=33;j<=126;j++)S[j][i]=(1ll*S[j][i-1]*3+((s[i]==j)?1:0))%M;
    scanf("%s",s+1);m=strlen(s+1);
    for(i=w=1;i<=m;i++)for(w=1ll*w*3%M,j=33;j<=126;j++)V[j]=(1ll*V[j]*3+((s[i]==j)?1:0))%M;
    sort(V+33,V+127);
    for(i=1;i+m-1<=n;i++){
        for(j=33;j<=126;j++)E[j]=(S[j][i+m-1]-1ll*S[j][i-1]*w%M+M)%M;
        sort(E+33,E+127);ff=0;
        for(j=33;j<=126;j++)if(E[j]!=V[j]){ff=1;break;}
        if(!ff)q[++t]=i;
    }
    printf("%d\n",t);
    for(i=1;i<=t;i++)printf("%d ",q[i]);
}
```

H：枚举有几个命题是真的，判断一下即可，注意没有\$命题的特判

``` {.cpp}
#include<bits/stdc++.h>
#define N 222222
using namespace std;
int n,i,j,x,u,la,cnt,lx[N],V[N];char s[9];bool ok[N],ko[N];
int ne(int x){return x==1?n:x-1;}
int main(){
    scanf("%d",&n);
    for(i=1;i<=n;i++){
        scanf("%s",s);
        if(s[0]=='+')lx[i]=-1;
        else if(s[0]=='-')lx[i]=-2;
        else scanf("%d",&x),lx[i]=x,u=u?u:i;
    }
    if(!u){
        for(x=0;x<2;x++){
            for(la=x,i=n;i;i--){
                V[i]=(lx[i]==-1)?la:(la^1);
                la=V[i];
            }
            if(la==x){
                puts("consistent");
                for(i=1;i<=n;i++)putchar(V[i]?'t':'f');
                return 0;
            }
        }
        return puts("inconsistent"),0;
    }
    for(i=1;i<=n;i++){
        if(lx[i]>=0){
            la=0;
            for(j=ne(i);lx[j]<0;j=ne(j))
                if(lx[j]==-2&&!la||lx[j]==-1&&la)la=1,ok[j]=1,cnt++;else la=0;
            la=1;
            for(j=ne(i);lx[j]<0;j=ne(j)){
                if(lx[j]==-2&&!la||lx[j]==-1&&la)la=1,ko[j]=1;else la=0;
                V[lx[i]]+=ko[j]-ok[j];
            }
            V[lx[i]]++;
        }
    }
    u=-1;
    for(i=0;i<=n;i++)if(cnt+V[i]==i)u=i;
    if(u>=0){
        puts("consistent");
        for(i=1;i<=n;i++){
            if(lx[i]==u){
                la=1;ok[i]=1;
                for(j=ne(i);lx[j]<0;j=ne(j))
                    if(lx[j]==-2&&!la||lx[j]==-1&&la)la=1,ok[j]=1;else la=0,ok[j]=0;
            }
        }
        for(i=1;i<=n;i++)putchar(ok[i]?'t':'f');
    }else puts("inconsistent");
}
```
