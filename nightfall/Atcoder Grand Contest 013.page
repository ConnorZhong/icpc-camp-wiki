D - Pilling Up
==============

令$f[i][j][0/1]$表示做到第$i$次操作，目前有$j$个红球，红球数量是否取到过$0$的方案数，那么对于4种情况分别DP

1、先取出红球再放进蓝球，那么$f[i][j][k]-->f[i+1][j-1][k|(j==1)]$

2、先取出红球再放进红球，那么$f[i][j][k]-->f[i+1][j][k|(j==1)]$

3、先取出蓝球再放进蓝球，那么$f[i][j][k]-->f[i+1][j][k|(j==0)]$

4、先取出蓝球再放进红球，那么$f[i][j][k]-->f[i+1][j+1][k|(j==0)]$

时间复杂度$O(nm)$

``` {.cpp}
#include<bits/stdc++.h>
#define N 3030
#define M 1000000007
using namespace std;
int n,m,i,j,k,an,f[N][N][2];
void up(int&x,int y){
    x+=y;
    if(x>=M)x-=M;
}
int main(){
    scanf("%d%d",&n,&m);
    for(i=0;i<=n;i++)f[0][i][0]=1;
    for(i=0;i<m;i++){
        for(j=0;j<=n;j++)
            for(k=0;k<2;k++){
                if(j)up(f[i+1][j-1][k|(j==1)],f[i][j][k]),up(f[i+1][j][k|(j==1)],f[i][j][k]);
                if(j<n)up(f[i+1][j+1][k|(j==0)],f[i][j][k]),up(f[i+1][j][k|(j==0)],f[i][j][k]);
            }
    }
    for(j=0;j<=n;j++)up(an,f[m][j][1]);
    printf("%d",an);
}
```

E - Placing Squares
===================

不分隔的地方可以继续往下接，也可以新增一个1，于是有矩阵$[(2,2,1),(1,1,1),(1,0,1)]$，分隔的地方只能继续往下接，有矩阵$[(1,2,1),(0,1,1),(0,0,1)]$，将矩阵乘起来即可

``` {.cpp}
#include<bits/stdc++.h>
#define M 1000000007
#define fr(i,n) for(int i=0;i<n;i++)
int n,m,i,x,la;
struct Mat{
    int v[3][3];
    void st(){fr(i,3)fr(j,3)v[i][j]=(i==j);}
}A,B,F;
Mat operator*(Mat a,Mat b){
    Mat c;
    fr(i,3)fr(j,3){
        long long w=0;
        fr(k,3)w+=1ll*a.v[i][k]*b.v[k][j];
        c.v[i][j]=w%M;
    }
    return c;
}
Mat Pw(Mat a,int x){
    Mat v;v.st();
    for(;x;x>>=1,a=a*a)if(x&1)v=v*a;
    return v;
}
int main(){
    B.v[0][0]=B.v[0][2]=B.v[1][1]=B.v[1][2]=B.v[2][2]=A.v[0][2]=A.v[1][0]=A.v[1][1]=A.v[1][2]=A.v[2][0]=A.v[2][2]=1;
    A.v[0][0]=A.v[0][1]=B.v[0][1]=2;F.st();
    scanf("%d%d",&n,&m);
    for(i=1;i<=m;i++)scanf("%d",&x),F=F*Pw(A,x-la-1)*B,la=x;
    F=F*Pw(A,n-la);
    printf("%d",F.v[0][2]);
}
```

F - Two Faced Cards
===================

看不懂
