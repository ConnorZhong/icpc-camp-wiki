C. Chalk Outline
================

Aki
---

先构造一个凹包，天上有一个点俯视所有点，$n-3$条对角线。然后考虑把左边一坨凸出去，会多出$(t-2)*(t-1)/2$条，然后把右半部分的凹包一点一点往上抬，直到右边最左的那个点看到的凸包点数达到了要求。

``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 105;
int x[N], y[N];
struct P { LL x, y; };
LL det(P a, P b) {
    return a.x * b.y - a.y * b.x;
}
int see(int pos, int ban, int l, int r) {
    int cnt = 0;
    for (int i = l; i <= r; ++ i) {
        if (det((P) {x[ban] - x[pos], y[ban] - y[pos]}, (P) {x[i] - x[ban], y[i] - y[ban]}) < 0) cnt ++;
    }
    return cnt;
}
int main() {
    int n, k;
    scanf("%d%d", &n, &k);
    if (k < n - 3) return 0 * puts("No");
    k -= n - 3;
    x[0] = 0, y[0] = 1e9;
    int t = 2;
    while (t * (t - 1) / 2 <= k) t ++;
    x[1] = 0, y[1] = 0;
    for (int i = 1; i <= t - 2; ++ i) {
        x[i + 1] = i, y[i + 1] = y[i] - (100 - i);
    }
    x[t] = t - 1, y[t] = 1;
    k -= (t - 1) * (t - 2) / 2;
    if (t < n) {
        x[t + 1] = t - 1 + 100, y[t + 1] = 0;
        for (int i = 2; i <= n - (t + 1); ++ i) {
            x[t + i] = x[t + i - 1] + 100 - i;
            y[t + i] = y[t + i - 1] - 1;
        }
        while (see(t + 1, t, 1, t - 1) < k) {
            for (int i = t + 1; i < n; ++ i) y[i] ++;
        }
    }
    puts("Yes");
    for (int i = 0; i < n; ++ i) printf("%d %d\n", x[i], y[i]);
}
```

D. Do I Wanna Know?
===================

从前往后dp：$f(n+1,k)=f(n,k-1)\cdot (1-p)^{n-k+1}+f(n-1,k)\cdot p^k$

从后往前dp：$f(n+1,k)=f(n,k-1)\cdot p^{n-k+1}+f(n-1,k)\cdot (1-p)^k$

联立方程可得$f(n,k)=f(n,k-1)\frac{p^{n-k+1}-(1-p)^{n-k+1}}{p^k-(1-p)^k}$，就可以从$f(n,0)=1$往后递推了。

一个trick是$p=0.5$时会出现$0=0$，但这时候可以直接组合数算。

Aki
---

``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
const int N = 6e5 + 5, MOD = 998244353;
typedef long long LL;
LL mpow(LL x, LL n) {
    LL res = 1;
    while (n) {
        if (n & 1) res = res * x % MOD;
        n >>= 1;
        x = x * x % MOD;
    }
    return res;
}
LL f[N], g[N], c[N];
int main() {
    int n, a, b, p;
    scanf("%d%d%d", &n, &a, &b);
    p = 1LL * a * mpow(b, MOD - 2) % MOD;
    if (a * 2 == b) {
        f[0] = 1;
        LL ans = 0, C = 1;
        for (int k = 1; k <= n - 1; ++ k) {
            C = C * (n - k + 1) % MOD * mpow(k, MOD - 2) % MOD;
            f[k] = C * mpow(p, 1LL * k * (n - k) % (MOD - 1)) % MOD;
            g[k] = k == 1 ? 1LL : (g[k - 1] * g[k - 1] + 2) % MOD;
            (ans += g[k] * f[k] % MOD) %= MOD;
        }
        printf("%lld\n", ans);
        return 0;
    }
    f[0] = 1;
    LL ans = 0;
    for (int k = 1; k <= n - 1; ++ k) {
        f[k] = f[k - 1] * (mpow(p, n - k + 1) + MOD - mpow(MOD + 1 - p, n - k + 1)) % MOD * mpow((mpow(p, k) + MOD - mpow(MOD + 1 - p, k)) % MOD, MOD - 2) % MOD;
        g[k] = k == 1 ? 1LL : (g[k - 1] * g[k - 1] + 2) % MOD;
        (ans += g[k] * f[k] % MOD) %= MOD;
    }
    printf("%lld\n", ans);
}
```

E
=

当场会做来不及写，目前还没写

G. Gate21
=========

Aki
---

比赛时候写的维护斜率区间的等差数列，一起扫一扫。感觉开闭区间玩了一年。

``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 5;
typedef long long LL;
int R[N], L[N];
struct P {
    LL x, y;
    P(LL x, LL y) : x(x), y(y) {}
};
LL det(const P &a, const P &b) {
    return a.x * b.y - a.y * b.x;
}
P operator - (P a, P b) {
    return P(a.x - b.x, a.y - b.y);
}
struct seq {
    LL a0, d, n;
    seq(LL a0, LL d, LL n) : a0(a0), d(d), n(n) {}
    LL calc(LL x) {
        return a0 + x * d;
    }
};
LL floordiv(LL x, LL y) { // x / y
    if (x >= 0) return x / y;
    return - (-x + y - 1) / y;
}
LL ceildiv(LL x, LL y) {
    if (x >= 0) return (x + y - 1) / y;
    return - (-x) / y;
}
long long ans;
void answer(LL n, LL r0, LL rd, LL l0, LL ld) {
    if (n <= 0) return;
    if (n == 1) {
        ans += max(0LL, r0 - l0 + 1);
        return;
    }
    //printf("n = %lld r0 = %lld rd = %lld l0 = %lld ld = %lld\n", n, r0, rd, l0, ld);
    //assert(rd <= 0);
    //assert(ld <= 0);
    /*LL tmp = 0;
    for (int i = 0; i < n; ++ i) {
        LL R = r0 + rd * i;
        LL L = l0 + ld * i;
        ans += max(0LL, R - L + 1);
        tmp += max(0LL, R - L + 1);
    }
    printf("%lld\n", tmp);
    return;*/
    LL a0 = r0 - l0 + 1;
    LL d = rd - ld;
    if (d < 0) {
        if (a0 <= 0) return;
        n = min(a0 / -d + 1, n);
        ans += (a0 + a0 + (n - 1) * d) * n / 2;
    }
    else if (d == 0) {
        if (a0 <= 0) return;
        ans += a0 * n;
    }
    else {
        if (a0 < 0) {
            if (a0 + (n - 1) * d <= 0) return;
            LL tmp = (- a0 + d - 1) / d;
            a0 += tmp * d;
            n -= tmp;
        }
        assert(a0 >= 0);
        ans += (a0 + a0 + (n - 1) * d) * n / 2;
    }
}
const int debug=0;
int main() {
    int n;
    srand(time(0));
    if(debug)n=10;else scanf("%d", &n);
    vector<P> all, all2;
    for (int i = 1; i <= n; ++ i) {
        if(debug){
            L[i]=rand()%3+1;
            R[i]=rand()%100+1;
            printf("%d %d\n",L[i],R[i]);
            if(L[i]>R[i])swap(L[i],R[i]);
        }else
        scanf("%d%d", &L[i], &R[i]);
        all.push_back(P(i, R[i]));
        all2.push_back(P(i, L[i]));
    }
    /*int _an=0;
    for(int i=L[1];i<=R[1];i++){
        for(int j=L[2];j<=R[2];j++){
            int k=j-i,gg=0;
            for(int o=3;o<=n;o++){
                int ll=i+k*(o-1);
                if(ll<L[o]||ll>R[o])gg=1;
            }
            if(!gg)_an++;
        }
    }
    printf("%d\n",_an);*/
    vector<P> U, D;
    for (int i = 0; i < n; ++ i) {
        while ((int) U.size() >= 2 && det(U.back() - U[U.size() - 2], all[i] - U[U.size() - 2]) <= 0) U.pop_back();
        U.push_back(all[i]);
    }
    for (int i = 0; i < n; ++ i) {
        while ((int) D.size() >= 2 && det(D.back() - D[D.size() - 2], all2[i] - D[D.size() - 2]) >= 0) D.pop_back();
        D.push_back(all2[i]);
    }
    //for (auto p : U) printf("<%lld %lld> ", p.x, p.y); puts("");
    //for (auto p : D) printf("<%lld %lld> ", p.x, p.y); puts("");
    LL k_min = -2e9, k_max = 2e9;
    vector<seq> rr, ll;
    vector<pair<LL, int>> st;
    for (int i = 0; i < (int) U.size(); ++ i) {
        LL kl = i == 0 ? k_min : ceildiv(U[i].y - U[i - 1].y, U[i].x - U[i - 1].x);
        LL kr = i == (int) U.size() - 1 ? k_max : floordiv(U[i + 1].y - U[i].y, U[i + 1].x - U[i].x);
        // [kl, kr) forward
        if (kl > kr) continue;
        LL x = -U[i].x, y = U[i].y;
        LL bl = kl * x + y;
        LL br = (kr - 1) * x + y;
        rr.push_back(seq(bl, x, kr - kl));
        st.push_back({kl, 0});
    }
    reverse(D.begin(), D.end());
    for (int i = 0; i < (int) D.size(); ++ i) {
        LL kl = i == 0 ? k_min : ceildiv(-(D[i].y - D[i - 1].y), -(D[i].x - D[i - 1].x));
        LL kr = i == (int) D.size() - 1 ? k_max : floordiv(-(D[i + 1].y - D[i].y), -(D[i + 1].x - D[i].x));
        // [kl, kr) forward
        //printf("%lld %lld\n", kl, kr);
        if (kl > kr) continue;
        LL x = -D[i].x, y = D[i].y;
        LL bl = kl * x + y;
        LL br = (kr - 1) * x + y;
        ll.push_back(seq(bl, x, kr - kl));
        st.push_back({kl, 1});
        //printf("k in [%lld, %lld) : b0 = %lld d = %lld\n", kl, kr, bl, x);
    }
    //reverse(rr.begin(), rr.end());
    sort(st.begin(), st.end());
    seq uu = rr[0], dd = ll[0];
    LL las = k_min, ku_las = k_min, kd_las = k_min;
    st.push_back({k_max, -1});
    int cu = -1, cd = -1;
    for (auto pa : st) {
        LL k_cur = pa.first;
        //printf("calc k in [%lld, %lld) L in [%lld,   R in [%lld, \n", las, k_cur, kd_las, ku_las);
        //printf("U : %lld %lld %lld\n", uu.a0, uu.d, uu.n);
        //printf("D : %lld %lld %lld\n", dd.a0, dd.d, dd.n);
        //if (cu != -1 && cd != -1)
        //answer(min(k_cur - las, min(rr[cu].n - (las - ku_las), ll[cd].n - (las - kd_las))), uu.calc(las - ku_las), uu.d, dd.calc(las - kd_las), dd.d);
        answer(k_cur - las, uu.calc(las - ku_las), uu.d, dd.calc(las - kd_las), dd.d);
        las = k_cur;
        if (pa.second == 0) {
            uu = rr[++ cu];
            ku_las = k_cur;
        }
        else if (pa.second == 1) {
            dd = ll[++ cd];
            kd_las = k_cur;
        }
    }
    printf("%lld\n", ans);
}
```

分治斜率每次二分的写法，复杂度多个log但写法优秀（无脑）了不少。

``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
struct P {
    LL x, y;
};
P operator - (const P &a, const P &b) {
    return (P) {a.x - b.x, a.y - b.y};
}
LL det(P a, P b) {
    return a.x * b.y - a.y * b.x;
}
const int N = 2e5 + 5;
int L[N], R[N];
vector<P> U, D;
pair<LL, LL> find_lowest(LL k) {
    int l = 0, r = U.size() - 1; LL ans = (LL) 4e18L, pos = 0;
    while (l <= r) {
        int mid = (l + r) / 2;
        LL bmid = U[mid].y - U[mid].x * k;
        LL bmid2 = mid == (int) U.size() - 1 ? (LL)2e18 : U[mid + 1].y - U[mid + 1].x * k;
        if (bmid2 <= bmid) {
            ans = min(ans, bmid2);
            l = mid + 1;
            pos = U[mid + 1].x;
        }
        else {
            ans = min(ans, bmid);
            pos = U[mid].x;
            r = mid - 1;
        }
    }
    return {-pos, ans};
}
pair<LL, LL> find_highest(LL k) {
    int l = 0, r = D.size() - 1; LL ans = (LL) -4e18L, pos = 0;
    while (l <= r) {
        int mid = (l + r) / 2;
        LL bmid = D[mid].y - D[mid].x * k;
        LL bmid2 = mid == (int) D.size() - 1 ? -(LL)2e18 : D[mid + 1].y - D[mid + 1].x * k;
        if (bmid2 > bmid) {
            ans = max(ans, bmid2);
            pos = D[mid + 1].x;
            l = mid + 1;
        }
        else {
            ans = max(ans, bmid);
            pos = D[mid].x;
            r = mid - 1;
        }
    }
    return {-pos, ans};
}
LL ans = 0;
void divide(LL l, LL r) {
    auto ul = find_lowest(l), ur = find_lowest(r);
    auto dl = find_highest(l), dr = find_highest(r);
    if (ul.first != ur.first || dl.first != dr.first) {
        LL len2 = (r - l + 1) / 2;
        divide(l, l + len2 - 1);
        divide(l + len2, r);
        return;
    }
    LL a0 = ul.second - dl.second + 1;
    LL d = ul.first - dl.first;
    LL n = r - l + 1, tmp;
    if (d < 0) {
        if (a0 <= 0) return;
        n = min(n, a0 / (-d) + 1);
        tmp = (a0 + a0 + d * (n - 1)) * n / 2;
    }
    else if (d == 0) {
        if (a0 <= 0) return;
        tmp = n * a0;
    }
    else {
        if (a0 <= 0) {
            if (a0 + (n - 1) * d <= 0) return;
            LL tmp = (-a0 + d - 1) / d;
            n -= tmp;
            a0 += tmp * d;
            assert(a0 >= 0);
        }
        tmp = (a0 + a0 + d * (n - 1)) * n / 2;
    }
    /*printf("k in [%lld, %lld]\n", l, r);
    printf("posu = %lld  %lld     posd = %lld  %lld\n", ul.first, ul.second, dl.first, dl.second);
    printf("tmp = %lld\n", tmp);*/
    ans += tmp;
}
int main() {
    int n;
    scanf("%d", &n);
    vector<P> all, all2;
    for (int i = 1; i <= n; ++ i) {
        scanf("%d%d", &L[i], &R[i]);
        all.push_back((P) {i, R[i]});
        all2.push_back((P) {i, L[i]});
    }
    for (P x : all) {
        while ((int) U.size() >= 2 && det(U.back() - U[U.size() - 2], x - U[U.size() - 2]) <= 0) U.pop_back();
        U.push_back(x);
    }
    for (P x : all2) {
        while ((int) D.size() >= 2 && det(D.back() - D[D.size() - 2], x - D[D.size() - 2]) >= 0) D.pop_back();
        D.push_back(x);
    }
    divide(-(LL)2e9, (LL)2e9);
    printf("%lld\n", ans);
}
```

【坑】H
=======

分类讨论强行判断

大概分六七十种情况？还没写
