1001 ATM Mechine\[hx\]
======================

打表发现当w足够大（十几）的时候，答案就都是一样的了。

1002 Cycle(补)
==============

题意是给出两个长度相同的a,b串,问每个1到i的前缀是否循环相等<br>
首先可以发现对于一个前缀串,若把它的某个后缀与剩下的前缀交换位置后与另一个前缀串相等,那么这两个前缀串循环相等<br>
有个结论(也可以肉眼看出来...),那就是对于一个1到i的前缀,若去掉相等的a的最长前缀和b的最长后缀,那么再判剩下的部分是否相等即可<br>
或者,若去掉相等的a的最长后缀和b的最长前缀,那么再判剩下的部分是否相等即可<br>
直接用kmp求两次,再用hash判断剩下的部分是否相等即可

1003 Divide the Sequence\[lyj\]
===============================

贪心

1004 How Many Triangles(补)
===========================

考虑一一对应的关系，一个钝(直)角对应一个钝(直)角三角形，一个钝(直)角三角形对应两个锐角，一个锐角三角形对应三个锐角<br>
所以只需要求出所有的锐角和钝(直)角，就可以通过一一对应的关系算出答案<br>
设rui表示锐角个数,other表示钝(直)角个数<br> $ans=(rui-2*other)/3$<br>
对于每一个点,考虑它为角的顶点，其余点按极角排序<br>
这里最好是先把极角都预处理出来再排序，因为算极角要时间的,差不多常数要乘个10<br>
然后为了计算方便可以把数组加倍，后面加倍的角的极角都加上2\*PI<br>
然后用双指针维护,算出锐角的个数和钝(直)角个数就可以了<br>
这题还有点卡精度，eps开到10-12才过

1005 Interesting\[lyj\]
=======================

用manacher求出所有位置为中心的最长回文半径 枚举j
然后设f\[i\]表示以i为左端点的回文串的右端点的标号总和
然后设g\[i\]表示以i为右端点的回文串的左端点的标号总和
然后求出这两个数组(利用前缀和) 然后ans= sigma g\[i\]\*f\[i+1\]

1006 Interval
=============

1007 K-wolf Number\[hx\]
========================

数位DP

1008 Level Up(补)
=================

题意是给一颗1号点为根的树,每个点有一个权值a(a&lt;=1e5),对于点i,它的w权值等于它子树中所有点的a权值的中位数t<br>
子树大小s为偶数,t等于第s/2个数,子树大小s为奇数,t等于第(s+1)/2个数<br>
现在可以将一个点的权值改为1e5,问怎样改使得整棵树的w权值和最大<br>
首先可以发现如果修改v的a权值,那么有可能会影响到它的或它祖先的w权值,进一步可以发现,对于v到1号点的路径上的某个点i,若i的中位数&gt;=a,那么修改完v的a权值后,i的w权值会变成原来中位数的后面一个数,所以我们只需要对每个点求出它的中位数和中位数后面一个数即可,若它是叶子节点,中位数后面一个数置为1e5<br>
求这个的话相当于求子树节点的第k大是多少,可以用启发式合并(BST,线段树之类的),不过由于是求子树的第k大,可以想到dfs序,进而可以用主席树来维护dfs序<br>
求i的第k大,相当于在i所对应的区间中找第k大,用主席树即可<br>
求出一开始的中位数的总和,求完后只需要从根开始dfs来枚举修改哪个点,然后用树状数组维护这个总和即可

1009 Permutation
================

1010 Prefix(补)
===============

构trie树，trie树每个节点i记录最后加入的是哪个串，设为last\[i\]，然后用主席树维护下last\[i\]的值为k的个数。对每个询问l和r，对r的主席树询问l到r的和。

1011 Two\[hx\]
==============

DP

1012 World is Exploding\[hx\]
=============================

计数，最多有一对端点重合，去掉端点重合的。

HX总结反思
==========

04和05卡了太久，特别是04，自己对于极角排序扫描的姿势还了解不够，写得复杂常数大还没调出来，需要学习一个昂神的姿势。
