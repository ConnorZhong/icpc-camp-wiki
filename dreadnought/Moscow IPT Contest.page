Moscow IPT Contest

A. Rectangle Query \[Bacon\]
============================

题解：转化为三维询问，即矩形内有多少个点的前驱$<a$，前驱指同x里面y的前驱。

这里可以用线段树套可持久化线段树做，注意常数。

用bitset可以毫无压力的直接过掉。

B. Game With A Fairy \[Rowdark\]
================================

题解：每轮询问所有的大小为2\^k的子集，随机选择。

C. Portkeys \[Lolicon\]
=======================

题解：BFS。用并查集维护哪些点还没有被访问即可。

D. Maximal Common Subpair \[Bacon\]
===================================

题解：将两个串接起来建SAM，对于每个点记为(p1,p2,len)，即在两个串中right集合的最小值和最长长度。

倒着再来一次。两组tuple随便用个数据结构合并一下。

E. k-transpositions \[Lolicon\]\[TBR\]
======================================

题解：数学。显然是个k阶多项式。而$[n+1,2n]$的多项式可以通过$[1,n]$的多项式快速计算，于是可以在n上倍增。但这个方法多一个log。

F. PQ tree \[Lolicon\]
======================

题解：DP。首先先通过一个变换作用于所有排列并使得的一个排列变成$1$到$n$，方便之后的处理。设$f[i][j]$为把$[i,j]$这些数搞成一棵子树有多少种方案，$g[i][j]$为把$[i,j]$搞成一棵以P为根的子树有多少种方案，$h[i][j][st]$表示把$[i,j]$搞成一棵以Q为根的子树并且是否已经有至少3块有多少种方案。转移直接枚举最后一个儿子是哪一段后缀，并保证在所有排列中都连续即可。需要注意的是对于$h[i][j][1]$的转移，如何保证Q结点的性质，需要预处理出$bar[i][k]$表示$[i,k]$这段区间要使得$k$继续扩展并保持在所有排列中只在一个方向上扩展能扩展到的最大的$j$。

G. Random Walking \[Lolicon\]
=============================

题解：DFS。求出在树上每条边每个方向所需要的期望时间，倍增求和即可。

H. Sasha And Swag Strings \[Bacon\]
===================================

题解：对串建CSAM，即类似ST的方式对SAM进行compactation，将除起始点以外的后继唯一的点删掉。

一个有趣的关系，trie-&gt;compactation-&gt;suffix
tree-&gt;minimization-&gt;CSAM;
trie-&gt;minimization-&gt;SAM-&gt;compactation-&gt;CSAM。

发现CSAM的边集和ST的边集是相同的，所以要做的是枚举CSAM的每条边，快速算出这条边的字串个数，乘上在ST中的出现次数即为答案。

枚举所有以v为结尾的边，因为以v为结尾的所有串都是成后缀关系的，所以枚举到最长的那个即可，再用SAM统计字符串个数。在ST中出现的次数即为在SAM中的区间长度。

I. Tree Confrontation \[Rowdark\]
=================================

题解：不妨假设$a \ge b$，考虑一定会被$a$霸占的节点。如果存在，那么考虑剩余的森林，答案为其中$SIZE \ge b$的连通块个数；否则，答案要么是$1$，要么是$2$，答案为$1$当且仅当存在一个节点，使得中有两颗子树的$SIZE \ge a$，并存在另一棵子树的$SIZE \ge b$。

J. Two Airlines \[Bacon\]
=========================

题解：先拿县三个点建一个合法的环，然后每次加入一个点到端点前后，可以根据颜色决定插入到前驱还是后继。
