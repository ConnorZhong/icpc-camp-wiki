The Goal
========

The goal is to come up with a set of reliable, flexible and efficient
problem solving method for competitive programming.

Except for those super-easy problems which I could come up with a
solution almost immediately, as a Lolicon, I always feel puzzled and
lost when faced with harder problems as 1k in TC, DE in CF div1, GCJ/FBH
onsite or world finals, so I seek a way to deal with these situations.

Surely, there is no silver bullet which could solve any problem within
any time constrain as one might dreamed of. However, as a Lolicon, I
believe one can go further if equipped with better tools, or more
precisely, fully utilizes a more educated version of problem solving
methods. Follow this thought, I will make some trials (and probably some
failures) on solving the PA problems.

The Plan
========

The plan in general is to follow the famous mathematician G. Polya's
idea in the book *How to Solve It* and try to combine it with
competitive programming with my personal experience and my love for
Loli.

The Plan - in detail
====================

According to the book, solving a traditional math problem consists of
four steps:

1.  Understanding the problem
2.  Devising a plan - find the connection between the data and the
    unknown, probably with the help of some auxiliary problems
3.  Carrying out the plan
4.  Looking back

According to my competitive programming experience, solving a cp problem
consists the following steps:

1.  Read the problem statement
2.  Come up with an algorithm OR 2\*. Can't come up with an algorithm
    and gg
3.  Write code to implement the algorithm
4.  Debug the code to make it right
5.  Submit and get WA/TLE/RE, roll back to the previous steps OR 5\*.
    Submit and get AC, most problems end here
6.  (Occasionally) Review the solution and the code to see whether there
    is any space for improvement

A huge difference between cp and traditional problem solving is the
involvement of computer. As the the most powerful computational tool
ever invented, it can become quite handy for us competitors. What's
more, except of writing a formal proof as the answer, cp problem solving
requires the participants to submit a piece of code to show their
understanding of the solution. The art of implementation is very
significant as well. As a Lolicon, I would focus mainly on the "idea"
part here. But bear in mind that we are challenged to come up with
implementation-friendly algorithms.

Other than the involvement of computer, the process of coding, debug and
submitting, problem solving in cp differs from traditional problem
solving in a very important aspect: time. In solving a traditional
problem, it is always appreciable if we could make the process faster,
but one or two hours more is not much a problem. However, this is not
the case for competitive programming, in which 5 or 10 minutes could
make a big difference. Thus when adopting the techniques and
methodologies from traditional problem solving, we must pay much
attention to its efficiency.

Below, I will examine the methodologies and do the trials in three
steps:

1.  Clear the propose and collect the methods for cp problem solving
2.  Think about each particular method in great detail, including what
    it is, when to use it, how to use it skilfully and hopefully list
    one or two practical examples
3.  Try to combine those now detailed methods together, to form a few
    ready-to-use general plans

The Body
========

The Conclusion - Secret;Weapon
==============================

------------------------------------------------------------------------

In the love of Loli
