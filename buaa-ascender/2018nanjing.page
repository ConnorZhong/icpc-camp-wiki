A. Adrien and Austin [zmy]
=================================
签到题，对称构造

B. Tournament [zmy]
======================
带权二分+单调队列

C. Cherry and Chocolate
=========================


D. Country Meow [wbr]
====================
模拟退火


E. Eva and Euro coins [jds]
==========================
原操作实际等价于把一段连续的 1 进行平移 $k$ 的倍数，中间不能穿过其他的连续的 1，并且当长度大于等于 $k$ 时可以消掉。因此对两个串进行操作，判断最后是否一样就行了。


F. Frank
=================================


G. Pyramid [wbr]
==========================
推公式


H. Huge Discount
======================



I. Magic Potion [zmy]
================================
网络流签到题

J. Prime Game [zmy]
================================
分解质因数，对于每个质因数分开考虑。利用容斥，先算出所有的长度，再减去左右端点仅在相邻两个有该质因子之间的情况个数。

K. Kangaroo Puzzle [zmy]
================================
预处理出任意两个点之间的合并方案。之后按顺序依次合并两个袋鼠位置即可。

L. Lagrange the Chef [zmy]
================================
DP。 首先特判 -1，即 x 和 y 都出现了，且没出现其他数。再考虑 x 和 y 中有一个没出现的情况，此时答案为 0 。

f[i][j][k][l] 表示到第 $i$ 个位置时，可用的其他数为 $j$ 个，上一位是 $k$ ，已固定x,y情况为 $l$ 的最小代价。这里为了方便，设x 为 1，y 为2，其他数为 0。l 有四种，0表示x和y 都没有一个固定位置，1 表示x没有固定位置，y 有；2 表示 y 没有固定位置，x有；3表示 xy 都有固定位置。考虑从 f[i][j][k][l] 转移：
如果当前为数为其他数，那么有两种转移：

- 固定该数，向 f[i+1][j][0][l|(k)] 转移 f[i][j][k][l]
- 移动该数，向 f[i+1][j+1][k][l] 转移 f[i][j][k][l]+1

如果当前为 x，有三种转移：

- 移动该数，向 f[i+1][j][k][l] 转移 f[i][j][k][l]+1
- 如果上一个数不是y，固定该数。 向 f[i+1][j][1][l|1] 转移 f[i][j][k][l]
- 利用一个可移动的其他数，挡在 x 前面。向 f[i+1][j-1][1][l|1] 转移 f[i][j][k][l]

y 类似。
注意用滚动数组。计算最终答案时，在 f 数组的基础上，加上该状态未固定状态的个数(0,1,2)。


M. Mediocre String Problem [jds]
================================
hash