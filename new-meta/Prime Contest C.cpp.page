``` {.cpp}
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <cmath>

using namespace std;

const int DEBUG = 0;

int real_n, ans, CNT = 0;

int less(int x) {
    if (x + 1 > real_n) return 1;
    CNT++;
    printf("? %d\n", x + 1);
    fflush(stdout);
    if (DEBUG) {
        return ans < x + 1;
    }
    static char buffer[10];
    scanf("%s", buffer);
    if (buffer[0] == '<') return 1;
    return 0;
}

int n, k, p, a, b;

int intersect(int l, int r, int L, int R) {
    l = max(l, L);
    r = min(r, R);
    if (l > r) return 0;
    return r - l + 1;
}

int count(int l, int r) {
    int ret = r - l + 1;
    // intersection of [p, p + b - 1], [l, r]
    if (p + b - 1 < n) {
        return ret - intersect(l, r, p, p + b - 1) / 2;
    } else {
        return ret - intersect(l, r, p, n - 1) / 2 - intersect(l, r, 0, p + b - n - 1) / 2;
    }
}

int get_mid(int L, int R) {
    int l = L, r = R;
    while (l < r) {
        int mid = (l + r) >> 1;
        if (count(L, mid) < count(mid + 1, R)) {
            l = mid + 1;
        } else {
            r = mid;
        }
    }
    assert(count(L, l) == count(l + 1, R));
    /*
    {
        puts("WA");
        printf("p = %d b = %d\n", p, b);
        printf("%d %d %d\n", L, L + l * 2 - 1, R);
        printf("%d %d\n", count(L, L + l * 2 - 1), count(L + l * 2, R));
        exit(0);
    }
    */
    return l;
}

int main() {
    scanf("%d %d", &real_n, &k);
    n = real_n + (real_n & 1);
    assert(n % 2 == 0);
    int x = 0;
    while ((1 << (x + 1)) <= n) x++;
    // a + b / 2 = 2^x
    // a + b = n
    // b / 2 = n - 2^x
    b = (n - (1 << x)) * 2;
    a = n - b;
    assert(a % 2 == 0);
    assert(b % 2 == 0);
    assert((b / 2) % 2 == 0);
    for (int i = 0; i < k; i++) {
        ans = rand() % real_n + 1;
        p = rand() % (n / 2) * 2;
        int l = 0, r = n - 1;//, xx = x;
        while (l < r) {
            //assert(count(l, r) == (1 << xx));
            //xx--;
            //printf("range %d %d\n", l, r);
            int mid = get_mid(l, r);
            if (::less(mid + 1)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        printf("= %d\n", l + 1);
        if (DEBUG) {
            assert(l + 1 == ans);
        }
    }
    assert(CNT <= k * (log(n) / log(2) + 0.1));
    if (DEBUG) printf("%f %f\n", 1. * CNT, k * (log(n) / log(2) + 0.1));
    return 0;
}

```
