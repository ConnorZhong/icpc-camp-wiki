``` {.cpp}

#include <bits/stdc++.h>
using namespace std;
const int N = 205;
vector<vector<int>> G[N][N], ans, st;
bool v[N][N];
int n, m;
void dfs(int x, int y, int s) {
    if (v[x][y]) return;
    v[x][y] = 1;
    st.push_back({x, y});
    if (s == n * m && x - 1 + y - 1 >= 2 && x - 1 + y - 1 <= 3) {
        ans = st;
        v[x][y] = 0;
        st.pop_back();
        return;
    }
    for (int dx = -3; dx <= 3; ++ dx) {
        for (int dy = -3; dy <= 3; ++ dy) {
            if (abs(dx) + abs(dy) >= 2 && abs(dx) + abs(dy) <= 3) {
                int xx = dx + x, yy = dy + y;
                if (xx <= 0 || yy <= 0 || xx > n || yy > m) {
                    continue;
                }
                dfs(xx, yy, s + 1);
                if (!ans.empty()) return;
            }
        }
    }
    st.pop_back();
    v[x][y] = 0;
}
void ae(int x1, int y1, int x2, int y2) {
    G[x1][y1].push_back({x2, y2});
    G[x2][y2].push_back({x1, y1});
}
void work1(int x, int y, int dx, int dy) {
    vector<vector<int>> all = {{0, 0}, {0, -3}, {0, -5}, {0, -2}, {0, -4}, {0, -1}};
    for (int i = 0; i < (int) all.size() - 1; ++ i) ae(x + dx * all[i][0], y + dy * all[i][1], x + dx * all[i + 1][0], y + dy * all[i + 1][1]);
}
void work4(int x, int y, int dx, int dy) {
    vector<vector<int>> all = {{0, 0}, {1, -1}, {0, -2}, {1, -3}, {0, -1}, {0, -3}, {1, -2}, {1, 0}};
    for (int i = 0; i < (int) all.size() - 1; ++ i) ae(x + dx * all[i][0], y + dy * all[i][1], x + dx * all[i + 1][0], y + dy * all[i + 1][1]);
}
void work3(int x, int y, int dx, int dy) {
    vector<vector<int>> all = {{0, 0}, {-1, -1}, {1, -1}, {-1, 0}, {0, -1}, {1, 0}};
    for (int i = 0; i < (int) all.size() - 1; ++ i) ae(x + dx * all[i][0], y + dy * all[i][1], x + dx * all[i + 1][0], y + dy * all[i + 1][1]);
}
void print(int x, int y) {
    if (v[x][y]) return;
    v[x][y] = 1;
    ans.push_back({x, y});
    for (auto z : G[x][y]) {
        print(z[0], z[1]);
    }
}
void cross(int x, int y) {
    ae(x, y, x + 1, y - 1);
    ae(x + 1, y, x, y - 1);
}
void work() {
    if (n == 1) {
        if (m == 1) return;
        if (m >= 20) {
            work1(1, 6, 1, 1);
            for (int i = 7; i <= m - 4; ++ i) ae(1, i, 1, i - 2);
            work1(1, m - 5, 1, -1);
        }
        else {
            dfs(1, 1, 1);
            return;
        }
    }
    else if (n == 2) {
        if (m < 8) {
            dfs(1, 1, 1);
            return;
        }
        else {
            work4(1, 4, 1, 1);
            for (int i = 5; i <= m - 3; ++ i) {
                cross(1, i);
            }
            work4(1, m - 3, 1, -1);
        }
    }
    else if (n == 3) {
        if (m <= 4) {
            dfs(1, 1, 1);
            return;
        }
        work3(2, 2, 1, 1);
        for (int i = 3; i <= m - 2; ++ i) {
            ae(2, i - 1, 1, i);
            ae(1, i, 3, i);
            ae(3, i - 1, 2, i);
        }
        ae(2, m - 1, 3, m - 2);
        ae(2, m - 2, 3, m - 1);
        work3(2, m - 1, 1, -1);
    }
    else if (n & 1) {
        work3(2, 2, 1, 1);
        for (int i = 3; i <= m; ++ i) {
            ae(2, i - 1, 1, i);
            ae(1, i, 3, i);
            ae(3, i - 1, 2, i);
        }
        int cur = 0;
        for (int j = 4; j <= n - 2; j += 2) {
            for (int i = 2; i <= m; ++ i) {
                cross(j, i);
            }
            cur ^= 1;
            if (cur) {
                ae(j, m, j - 2, m);
                ae(j + 1, m, j - 1, m);
            }
            else {
                ae(j, 1, j - 2, 1);
                ae(j + 1, 1, j - 1, 1);
            }
        }
        cur ^= 1;
        int j = n - 1;
        if (cur) {
            ae(j, m, j - 2, m);
            ae(j + 1, m, j - 1, m);
            for (int i = m; i >= 5; -- i) cross(j, i);
            work4(n - 1, 4, 1, 1);
        }
        else {
            ae(j, 1, j - 2, 1);
            ae(j + 1, 1, j - 1, 1);
            for (int i = 2; i <= m - 3; ++ i) cross(j, i);
            work4(n - 1, m - 3, 1, -1);
        }
    }
    else {
        work4(1, 4, 1, 1);
        for (int i = 5; i <= m; ++ i) cross(1, i);
        int cur = 0;
        for (int j = 3; j <= n - 2; j += 2) {
            for (int i = 2; i <= m; ++ i) {
                cross(j, i);
            }
            cur ^= 1;
            if (cur) {
                ae(j, m, j - 2, m);
                ae(j + 1, m, j - 1, m);
            }
            else {
                ae(j, 1, j - 2, 1);
                ae(j + 1, 1, j - 1, 1);
            }
        }
        cur ^= 1;
        int j = n - 1;
        if (cur) {
            ae(j, m, j - 2, m);
            ae(j + 1, m, j - 1, m);
            for (int i = m; i >= 5; -- i) cross(j, i);
            work4(n - 1, 4, 1, 1);
        }
        else {
            ae(j, 1, j - 2, 1);
            ae(j + 1, 1, j - 1, 1);
            for (int i = 2; i <= m - 3; ++ i) cross(j, i);
            work4(n - 1, m - 3, 1, -1);
        }
    }
    print(1, 1);
}
int main() {
    /*for (int i = 2; ; ++ i) {
        n = 1;
        m = i;
        memset(v, 0, sizeof(v));
        dfs(1, m - 1, 1);
        if (!ans.empty()) {
        for (auto x : ans) {
            printf("%d %d\n", x[0], x[1]);
        }
        return 0;
        }
    }*/
    scanf("%d%d", &n, &m);
    /*for (int nn = 1; nn <= 30; ++ nn) for (int mm = 1; mm <= 30; ++ mm) {
        n = nn, m = mm;
        printf("n = %d m = %d\n", n, m);
        memset(v, 0, sizeof(v));
        for (int i = 1; i <= 30; ++ i) for (int j = 1; j <= 30; ++ j) G[i][j].clear();
        ans.clear();
        st.clear();*/
    bool flag = 0;
    if (n > m) {
        flag = 1;
        swap(n, m);
    }
    work();
    if (ans.empty()) {
        puts("-1");
    }
    else {
        int tmp1 = 0, tmp2 = 1000;
        int lasx = 1, lasy = 1, stx = -1, sty = -1;
        assert((int) ans.size() == n * m);
        for (auto x : ans) {
            if (flag) {
                swap(x[0], x[1]);
            }
            printf("%d %d\n", x[0], x[1]);
            if (stx == -1) {
                stx = x[0];
                sty = x[1];
            }
            else {
                tmp1 = max(tmp1, abs(lasx - x[0]) + abs(lasy - x[1]));
                tmp2 = min(tmp2, abs(lasx - x[0]) + abs(lasy - x[1]));
            }
            lasx = x[0];
            lasy = x[1];
        }
        tmp1 = max(tmp1, abs(lasx - stx) + abs(lasy - sty));
        tmp2 = min(tmp2, abs(lasx - stx) + abs(lasy - sty));
        assert(tmp2 >= 2 && tmp1 <= 3);
    }
}
```
