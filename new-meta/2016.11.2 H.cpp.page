``` {.cpp}

#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cassert>
#include <cstring>

using namespace std;

const int MOD = 1e9 + 7;
const int N = 3005;
const int MAXV = 75;

int num[N], cnt[N];
int a[N], n;
int f[2][MAXV][MAXV][MAXV];
int factor[MAXV], rev[MAXV];
int g[MAXV][MAXV];

void add(int &a, int b) {
    if ((a += b) >= MOD) a -= MOD;
}

int power(int a, int n) {
    int ret = 1;
    for (int i = 1; i <= n; i <<= 1) {
        if (n & i) {
            ret = 1LL * ret * a % MOD;
        }
        a = 1LL * a * a % MOD;
    }
    return ret;
}

void prepare() {
    memset(g, -1, sizeof(g));
    factor[0] = rev[0] = 1;
    for (int i = 0; i + 1 < MAXV; i++) {
        factor[i + 1] = 1LL * factor[i] * (i + 1) % MOD;
        rev[i + 1] = power(factor[i + 1], MOD - 2);
    }
}

int comb(int n, int m) {
    if (m > n || m < 0) return 0;
    return 1LL * factor[n] * rev[m] % MOD * rev[n - m] % MOD;
}

int fact(int l, int r) {
    if (l > r + 1) {
        return 0;
    } else {
        return 1LL * factor[r] * rev[l - 1] % MOD;
    }
}

int dfs(int n, int m) {
    if (g[n][m] != -1) {
        return g[n][m];
    }
    if (n == 0) {
        if (m == 0) {
            return 1;
        } else {
            return 0;
        }
    }
    int &ret = g[n][m];
    ret = 0;
    for (int i = 0; i <= m; i++) {
        add(ret, 1LL * dfs(n - 1, m - i) * comb(m, i) % MOD * factor[i] % MOD);
    }
    return ret;
}

pair<int, int> solve() {
    for (int i = 0; i < N; i++) {
        cnt[i] = 0;
    }
    for (int i = 1; i < MAXV; i++) {
        num[i] = 0;
    }
    for (int i = 0; i < n; i++) {
        num[a[i]]++;
    }
    pair<int, int> ret = make_pair(0, 0);
    for (int i = 1; i < MAXV; i++) {
        cnt[num[i]]++;
        ret.first += num[i] * (num[i] + 1) / 2;
    }
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < MAXV; j++) {
            for (int k = 0; k < MAXV; k++) {
                for (int l = 0; l < MAXV; l++) {
                    assert(f[i][j][k][l] == 0);
                }
            }
        }
    }
    f[0][cnt[N - 1]][0][0] = 1;
    int cur = 0, nxt = 1;
    for (int i = N - 1; i >= 2; i--) {
        if (cnt[i] == 0 && cnt[i - 1] == 0 && i > 2) {
            continue;
        }
        for (int j = 0; j <= cnt[i]; j++) {
            for (int k = 0; k < MAXV; k++) {
                for (int l = 0; l < MAXV; l++) {
                    if (f[cur][j][k][l]) {
                        // single
                        int tmp = f[cur][j][k][l];
                        for (int t = 1; t <= j; t++) {
                            add(f[cur][j - t][k + t][l + t],
                                1LL * tmp * comb(j, t) % MOD * fact(k + 1, k + t) % MOD);
                        }
                    }
                }
            }
        }
        for (int j = 0; j <= cnt[i]; j++) {
            for (int k = 0; k < MAXV; k++) {
                for (int l = 0; l < MAXV; l++) {
                    if (f[cur][j][k][l]) {
                        // couple
                        int tmp = f[cur][j][k][l];
                        for (int t = 1; t * 2 <= j; t++) {
                            add(f[cur][j - t * 2][k + t][l],
                                1LL * tmp * comb(j, 2 * t) % MOD * comb(2 * t, t) % MOD
                                * factor[t] % MOD * fact(k + 1, k + t) % MOD);
                        }
                    }
                }
            }
        }
        if (i == 2) {
            for (int j = 0; j <= cnt[i]; j++) {
                for (int k = 0; k < MAXV; k++) {
                    for (int l = 0; l < MAXV; l++) {
                        if (f[cur][j][k][l]) {
                            // combine 2
                            add(ret.second, 1LL * f[cur][j][k][l] * fact(k + 1, k + cnt[1]) % MOD
                                                * dfs(l + cnt[1], j) % MOD);
                            f[cur][j][k][l] = 0;
                        }
                    }
                }
            }
            return ret;
        }
        assert(i >= 3);
        for (int j = 0; j <= cnt[i]; j++) {
            for (int k = 0; k < MAXV; k++) {
                for (int l = 0; l < MAXV; l++) {
                    if (f[cur][j][k][l]) {
                        // combine
                        if (j <= cnt[i - 1]) {
                            add(f[nxt][cnt[i - 1] - j][k + j][l + j],
                                1LL * f[cur][j][k][l] * comb(cnt[i - 1], j) % MOD * factor[j] % MOD
                                * fact(k + 1, k + j) % MOD);
                        }
                        f[cur][j][k][l] = 0;
                    }
                }
            }
        }
        swap(cur, nxt);
    }
    assert(false);
}

int main() {
    prepare();
    int test;// = 100;
    scanf("%d", &test);
    while (test--) {
        scanf("%d", &n);
        //n = 3000;
        for (int i = 0; i < n; i++) {
            scanf("%d", &a[i]);
            //a[i] = rand() % 70 + 1;
        }
        pair<int, int> result = solve();
        static int testCount = 0;
        printf("Case #%d: %d %d\n", ++testCount, result.first, result.second);
    }
    return 0;
}
```
