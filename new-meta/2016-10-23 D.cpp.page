``` {.cpp}
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <iostream>
#include <vector>
#include <cassert>
#include <functional>

using namespace std;

const int LEN = 1e6 + 7;
const int DEBUG = 0;

void pre_ex_kmp(const string& text, int len, int next[]) {
    int i, ind = 0, k = 1;
    next[0] = len;
    while(ind + 1 < len && text[ind + 1] == text[ind]) ind++;
    next[1] = ind;
    for(i = 2; i < len; i++) {
        if(i <= k + next[k] - 1 && next[i - k] + i < k + next[k])
            next[i] = next[i - k];
        else {
            ind = std::max(0, k + next[k] - i);
            while(ind + i < len && text[ind + i] == text[ind]) ind++;
            next[i] = ind;
            k = i;
        }
    }
}

void ex_kmp(const string &s, int slen, const string &t, int tlen, int extend[]) {
    int i, ind = 0, k = 0;
    static int next[LEN];
    pre_ex_kmp(t, tlen, next);
    while(ind < slen && ind < tlen && t[ind] == s[ind]) ind++;
    extend[0] = ind;
    for(i = 1; i < slen; i++) {
        int p = k + extend[k] - 1, L = next[i - k];
        if((i - 1) + L < p)
            extend[i] = L;
        else {
            ind = std::max(0, p - i + 1);
            while(ind + i < slen && ind < tlen && s[ind + i] == t[ind]) ind++;
            extend[i] = ind;
            k = i;
        }
    }
}

string s, t, sr;
int n, m, proj[LEN], proj_rev[LEN];
vector<int> removed;

void scanf_string(string &s, int &n) {
    static char buf[LEN];
    scanf("%s", buf);
    s = buf;
    n = s.size();
}

int extend_l[LEN], extend_r[LEN], is_removed[LEN], last_removed[LEN];

int tree[LEN << 4];
void insert(int x, int l, int r, int pos, int v) {
    tree[x] += v;
    if (l == r) return ;
    int mid = (l + r) / 2;
    if (pos <= mid) {
        insert(x << 1, l, mid, pos, v);
    } else {
        insert(x << 1 | 1, mid + 1, r, pos, v);
    }
}

int ask(int x, int l, int r, int ql, int qr) {
    if (qr < l || r < ql) return 0;
    if (ql <= l && r <= qr) return tree[x];
    int mid = (l + r) / 2;
    return ask(x << 1, l, mid, ql, qr) + ask(x << 1 | 1, mid + 1, r, ql, qr);
}

pair<int, int> get_range(int l, int r) {
    int ll = l, rr = r;
    l = lower_bound(removed.begin(), removed.end(), l) - removed.begin();
    r = upper_bound(removed.begin(), removed.end(), r) - removed.begin() - 1;
    if (l > r) {
        return {-1, -1};
    } else {
        assert(ll <= removed[l] && removed[r] <= rr);
        return {l, r};
    }
}

struct Event {
    int type, y, l, r;
    bool operator <(const Event &o) const {
        if (y != o.y) {
            return y < o.y;
        } else {
            return type < o.type;
        }
    }
};

long long solve() {
    long long ans = 0;
    for (int i = 0; i < n; i++) {
        if (extend_r[i] >= m) {
            ans++;
        }
    }
    if (removed.size() == 0) {
        return ans;
    }
    int id_l, id_r;
    id_l = id_r = removed.size() - 1;
    vector<Event> events;
    for (int l = n - 1; l >= 0; l--) {
        if (DEBUG) {
            cout << "l = " << l << " id_l = " << id_l << endl;
        }
        int r = l + m;
        if (r < n && is_removed[r]) {
            id_r--;
        }
        if (r < n && id_r >= 0) {
            int pos = r - extend_r[r] + 1;
            pair<int, int> range = get_range(pos - 1, r - 1);
            if (range.first != -1) {
                assert(range.second == id_r);
                events.push_back({0, r, r - range.second, r - range.first});
            }
        }
        if (is_removed[l]) {
            id_l--;
        } else {
            assert(l >= id_l);
            if (l + m - 1 < n) {
                int sr_pos = proj[l];
                int sr_r = proj_rev[sr_pos + extend_l[sr_pos] - 1];
                sr_r = last_removed[sr_r + 1] - 1;
                pair<int, int> range = get_range(l, sr_r);
                if (range.first != -1) {
                    int x = l + m - 1 - id_l;
                    events.push_back({-1, range.first + l + m - 1 - id_l, x, x});
                    events.push_back({1, range.second + l + m - 1 - id_l, x, x});
                }
            }
        }
    }
    sort(events.begin(), events.end());
    for (int i = 0; i < events.size(); i++) {
        if (events[i].type == -1) {
            insert(1, 0, 2 * n, events[i].l, 1);
        } else if (events[i].type == 0) {
            ans += ask(1, 0, 2 * n, events[i].l, events[i].r);
        } else {
            insert(1, 0, 2 * n, events[i].l, -1);
        }
    }
    return ans;
}

int main() {
    scanf_string(s, n);
    scanf_string(t, m);
    {
        int k; scanf("%d", &k);
        for (int i = 0; i < k; i++) {
            int x; scanf("%d", &x);
            removed.push_back(--x);
            is_removed[x] = 1;
        }
    }
    last_removed[n] = n;
    for (int i = n - 1; i >= 0; i--) {
        if (is_removed[i]) {
            last_removed[i] = last_removed[i + 1];
        } else {
            last_removed[i] = i;
        }
    }
    for (int i = 0, ptr = 0; i < n; i++) {
        if (ptr >= removed.size() || removed[ptr] != i) {
            proj[i] = sr.size();
            proj_rev[sr.size()] = i;
            sr += s[i];
        } else {
            proj[i] = -ptr - 1;
            ptr++;
        }
    }
    ex_kmp(sr, sr.size(), t, t.size(), extend_l);
    {
        function<string(string)> rev = [&](string s) {
            reverse(s.begin(), s.end());
            return s;
        };
        ex_kmp(rev(s), s.size(), rev(t), t.size(), extend_r);
        for (int i = 0, j = n - 1; i < j; i++, j--) {
            swap(extend_r[i], extend_r[j]);
        }
    }
    if (DEBUG) {
        cout << sr << endl;
        for (int i = 0; i < sr.size(); i++) {
            cout << "i = " << i << ": " << extend_l[i] << endl;
        }
        cout << s << endl;
        for (int i = 0; i < n; i++) {
            cout << "i = " << i << ": " << extend_r[i] << endl;
        }
    }
    cout << solve() << endl;
    if (DEBUG) {
        long long check = 0;
        for (int i = 0; i < s.size(); i++) {
            if (i + t.size() <= s.size()) {
                check += s.substr(i, t.size()) == t;
            }
            if (is_removed[i]) continue;
            for (int j = i; j < s.size(); j++) {
                if (is_removed[j]) {
                    int flag = true, ptr = 0;
                    vector<int> pos;
                    for (int k = i; k <= j; k++) {
                        if (!is_removed[k]) {
                            flag &= (ptr < t.size() && t[ptr] == s[k]);
                            ptr++;
                            pos.push_back(k);
                        }
                    }
                    if (ptr == t.size()) {
                        continue;
                    }
                    for (int k = j + 1; ptr < t.size() && k < s.size(); k++) {
                        flag &= (t[ptr] == s[k]);
                        pos.push_back(k);
                        ptr++;
                    }
                    check += flag && ptr == t.size();
                    if (flag && ptr == t.size()) {
                        for (auto s : pos) {
                            printf("%d ", s);
                        }
                        printf(" ----- path %d %d\n", i, j);
                    }
                }
            }
        }
        cout << "check = " << check << endl;
    }
    return 0;
}
```
