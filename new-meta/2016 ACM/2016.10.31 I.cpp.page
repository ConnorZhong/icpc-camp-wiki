``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
const long long INF = 1e18;
struct point {
    long long x, y;
    point(long long x, long long y) : x(x), y(y) {}
};
point operator - (const point &a, const point &b) {return point(a.x - b.x, a.y - b.y);}
long long det(const point &a, const point &b) {return a.x * b.y - a.y * b.x;}
vector<int> G[N], W[N];
int P;
long long d[N], f[N];
void dfs0(int x, int p) {
    for (int i = 0; i < (int) G[x].size(); ++ i) {
        int u = G[x][i], w = W[x][i];
        if (u == p) continue;
        d[u] = d[x] + w;
        dfs0(u, x);
    }
}
bool ban[N];
int sz[N];
vector<int> st;
void dfs1(int x, int p, const int &tot, int &root, vector<int> &toroot) {
    sz[x] = 1;
    int mx = 0;
    st.push_back(x);
    for (int u : G[x]) {
        if (ban[u] || u == p) continue;
        dfs1(u, x, tot, root, toroot);
        sz[x] += sz[u];
        mx = max(mx, sz[u]);
    }
    mx = max(mx, tot - sz[x]);
    if (mx * 2 <= tot && root == -1) {
        root = x;
        toroot = st;
    }
    st.pop_back();
}
__inline long long calcb(const point &p, long long k) {return p.y - p.x * k;}
long long findv(const vector<point> &st, int i) {
    if (st.empty()) return d[i] * d[i] + P;
    long long k = d[i];
    int l = 0, r = (int) st.size() - 1, ans = -1;
    while (l <= r) {
        int mid = (l + r) / 2;
        if (calcb(st[mid], k) <= (mid + 1 < (int) st.size() ? calcb(st[mid + 1], k) : INF)) {
            ans = mid;
            r = mid - 1;
        }
        else {
            l = mid + 1;
        }
    }
    return calcb(st[ans], k) + d[i] * d[i] + P;
}
void dfs2(int x, int p, const vector<point> &st) {
    f[x] = min(f[x], findv(st, x));
    for (int u : G[x]) {
        if (ban[u] || u == p) continue;
        dfs2(u, x, st);
    }
}
int dfs3(int x, int p) {
    int res = 1;
    for (int u : G[x]) {
        if (ban[u] || u == p) continue;
        res += dfs3(u, x);
    }
    return res;
}
void divide(int x, int sz) {
    int root = -1;
    vector<int> toroot;
    dfs1(x, 0, sz, root, toroot);
    ban[root] = 1;
    if ((int) toroot.size() > 1) {
        int tr = toroot[toroot.size() - 2];
        divide(x, dfs3(x, root));
    }
    vector<point> st;
    for (int j : toroot) {
        if (j == root) f[j] = min(f[j], findv(st, j));
        point tmp = point(2 * d[j], d[j] * d[j] + f[j]);
        while (st.size() >= 2 && det(st.back() - st[st.size() - 2], tmp - st[st.size() - 2]) <= 0) st.pop_back();
        st.push_back(tmp);
    }
    for (int u : G[root]) {
        if (ban[u]) continue;
        dfs2(u, root, st);
    }
    st.clear();
    toroot.clear();
    for (int u : G[root]) {
        if (ban[u]) continue;
        int sz = dfs3(u, root);
        divide(u, sz);
    }
}
namespace Reader {  
    const int L = (1 << 15) + 5;
    char buffer[L], *S, *T;
    __inline bool getchar(char &ch) {
        if (S == T) {
            T = (S = buffer) + fread(buffer, 1, L, stdin);
            if (S == T) {
                ch = EOF;
                return false;
            }
        }
        ch = *S++;
        return true;
    }
    __inline bool getint(int &x) {
        char ch; bool neg = 0;
        for (; getchar(ch) && (ch < '0' || ch > '9'); ) neg ^= ch == '-';
        if (ch == EOF) return false;
        x = ch - '0';
        for (; getchar(ch), ch >= '0' && ch <= '9'; )
            x = x * 10 + ch - '0';
        if (neg) x = -x;
        return true;
    }
}
int main() {
    int T;
    Reader::getint(T);
    while (T --) {
        int n;
        Reader::getint(n);
        Reader::getint(P);
        for (int i = 1; i <= n; ++ i) {
            G[i].clear();
            W[i].clear();
            f[i] = INF;
            d[i] = 0;
            ban[i] = 0;
        }
        f[1] = 0;
        for (int i = 1; i < n; ++ i) {
            int u, v, w;
            Reader::getint(u);
            Reader::getint(v);
            Reader::getint(w);
            G[u].push_back(v);
            G[v].push_back(u);
            W[u].push_back(w);
            W[v].push_back(w);
        }
        dfs0(1, 0);
        divide(1, n);
        long long ans = 0;
        for (int i = 1; i <= n; ++ i) ans = max(ans, f[i]);
        if (ans) ans -= P;
        printf("%I64d\n", ans);
    }
}
```
