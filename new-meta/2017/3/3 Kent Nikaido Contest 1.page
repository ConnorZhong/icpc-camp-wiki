E. Coins
========

**题意:**

现在有$n \leq 2e5$枚硬币排成一排，奇数序号的硬币正面朝上，偶数反面朝上。

两个人轮流玩游戏，第$i$轮的时候，轮到的人可以选择flip第$i$或者第$i+1$枚硬币（也可以选择不翻）。最后正面朝上的硬币给第一个人，翻面朝上的给第二个人。

问第一个人最多获得多少钱。

现在有$q$个操作，每个操作是把某个硬币价值减少。每一次操作要求回答答案。

**题解:**

首先这个flip硬币我们可以看成我们希望要某个硬币。在第$i$轮，我们可以选择**拒绝**前一轮另外一个人对我$i$这个位置的硬币的**索取**，或者可以不管第$i$枚硬币，而是选择索要下一枚硬币。

设$f[i]$代表我们现在一个从第$i$枚硬币开始的子游戏，并且我们的硬币没有被前一个人索取的情况下，先手最终比后手多多少钱。

对称的，$g[i]$代表的是我们被前一个人索取了。我们可以发现性质，$f[i] = g[i] + 2 * min(v[i..n])$

尝试归纳证明:

首先如果$i = n$，显然。

如果$i \geq k+1$是对的，那么我们考虑当$i = k$。

我们首先有$f[i] = v[i] - g[i + 1] = v[i] - f[i + 1] + 2 * min(v[i + 1 .. n])$

$g[i] = max(v[i] - f[i + 1], -g[i + 1] - v[i]) = max(v[i] - f[i + 1], 2 * min(v[i + 1 .. n]) - v[i] - f[i + 1])$

可以发现，如果$v[i] \leq min(v[i + 1 .. n])$,
那么$f[i] - g[i] = 2v[i]$，否则$f[i] - g[i] = 2min(v[i + 1 .. n])$

也就是$f[i] - g[i] = 2min(v[i..n])$

有了这个性质，我们可以认为，我们往后面索取就可以多得到后面的最小值。这样一来，决策其实就已经确定了。

如果我们面对索取，而自己不是当前后缀最小值，我们会选择**拒绝**。

从第一轮开始考虑决策，第一个人必然会为了全局最小的硬币$i_1$而开始往后面索取。

考虑在第一轮到全局最小数值对应的$i_1$轮之间，必然都是索取，拒绝的循环出现，换句话来说，在$[1 .. i_1 - 1]$这一段区间我们维持着正面朝上的给第一个人，反面朝上的给第二个人。

而对于$i_1$硬币，如果$i_1$硬币本来属于第二个人，那么第二个人放弃了这一枚硬币给第一个人，而去追寻他后面的最小值$i_2$硬币。第一个人正式获得了$i_1$，并且可以预见$i_2$属于第二个人。

如果$i_1$硬币本来属于第一个人，那么第一个人其实并没有额外得到什么，但是注意到第一个人的目标开始往$i_1$后面的最小硬币$i_2$硬币转移了。第一个人还是得到了$i_1$，并且可以预见$i_2$也属于第一个人。

往下递推下去，可以发现，对于$i_1, i_2, i_3 .. i_k$这些硬币的归属，只和前一枚硬币本来的归属有关，并且$i_1$肯定属于第一个人。而对于其他的硬币，本来是谁的就是谁的。

那么做法就有了，我们维护序列$i_1, ... i_k$，可以发现这是个单调栈。而修改只有一个值的减少，我们可以轻松维护每个点是否在栈里面。复杂度可以直接使用栈的势能分析。

[Kent Nikaido Contest 1 E.cpp]()

F. Forbidden Puzzle
===================

**题意:**

现在给你一个大小为$n * n, n \leq 30$的棋盘，四周边界处都已经被染上了红色或者绿色，而中间的位置还留白没有染色。现在希望你把所有格子都染色，使得满足两个限制。

-   有些中间留白的格子中，边相邻的两个格子要求颜色相同。

-   不能有

GG | RR | RG | GR

GG | RR | GR | RG

这些pattern出现。

问是否存在合法方案

**题解:**

仔细观察这些pattern的意思，可以发现就是要求对于每个$2*2$的格子里面，边相邻的格子的颜色之间，恰好有2个相同，2个不相同的关系。

考虑构建网络流。有$(n-1)*(n-1)$个点，代表这么多的$2*2$方格。把它们黑白染色，使得这些相交的方格颜色不同，然后白色的和源连边，流量为2，黑色的和汇连边，流量为2。

有交的方格之间也连边，流量为1，代表的是相交的那个$1*2$的长方形里面唯一的那个边是否代表的是一个不等号。

考虑这样建图之后满流，就是我们存在一个分配不等号的方案，使得小方格里面恰好有两个不等号，其他两个位置就是等号。可以发现这样填完必然对应着一组解。否则就是无解。

[Kent Nikaido Contest 1 F.cpp]()
