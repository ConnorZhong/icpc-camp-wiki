B. Solitaire
============

**题意: **

有个$3\times n$的棋盘, 每个格子有或者没有棋子.
现在你要把每个没有棋子的格子都放入棋子,
规则是你一次只能选择一个上面和下面相邻的格子都有棋子的格子放入棋子,
或者选择一个左面和右面都有棋子的格子放入棋子. 问你放棋子的顺序有多少种.

**做法: **

首先, 无解情况是四个角没有棋子, 或者边界上有两个相邻的空位.
没有无解情况以后, 可以用$dp(i,j,k)$表示前$i$列已经放满,
其中第$i$列中间的棋子(如果需要放)是第$j$个放的,
并且这个棋子要求($k=1$)或不要求($k=0$)第$i+1$列中间的棋子在他之前出现,
这种情况下前$i$列放满的顺序种数. 部分和优化转移即可.

F. Sushi
========

**题意：**

你有一个长度为$N\leq 400000$的环状数组，要你执行$Q\leq 25000$个操作，每次操作会给你环上的一段区间$[s,t]$和一开始手上的数$p$，一次枚举区间里每个数，如果比手上的数大，那就交换一下。每次询问输出最后手上的数。

**做法：**
分块。当一个数需要完整跨过一块时，如果手上的数比最大数小，就是把这块里最大的数换出来，并把这个数挂在这块上表示这个数要在里面。

当没有完整跨过时，需要把那一段重建。重建的过程是把挂着的数放进去，当一堆数跨过一个数的时候，是把最小的数留下。

注意，这里换出来并不需要真正的删除，因为最后重建的时候他一定不会被留下。所以用堆维护一下就行了。

[F.cpp](Japanese%20OI%20Team%20Selection%20F.cpp)

Comments
========

Miceren:

这一场题目节奏很适合我们队伍，该想的题目大体来说还是很快就会做了，而且大多题目很好写，在前中期抢了不少节奏。

虽然结果不错，但是从board上看，我们的D题WA的次数比较多，原因是因为用了bitset但是没有交64位的编译器，导致速度很慢，扣了好几次常数才过。

还有剩下的F和B题不太会做。都是技不如人，甘拜下风。
