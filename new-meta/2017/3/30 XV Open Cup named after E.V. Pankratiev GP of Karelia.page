F. Strange Sequence
===================

**题意: **

定义一种数字串的压缩方法,
将一个数字串$s=a_1^{t_1}\ldots a_k^{t_k}$(其中$a_i$均为$0$\~$9$的数码,
相邻的$a_i$不可相同, $t_i$不能为$0$),
压缩为$((a_1,t_1),\ldots,(a_k,t_k))$的形式. 若$t_i$均不超过$9$,
则可以定义$f(s)$为$a_1t_1a_2t_2\ldots a_kt_k$,
即将压缩后的序列写成一个字符串. 现在定义一个数字串列$L$, 初始$L_0="2"$,
$L_i=f(L_{i-1})$. 问$|L_n|$, $n\le 10^{18}$. 初始几项如下:

$L_0="2"$

$L_1="12"$

$L_2="1112"$

$L_3="3112"$

$L_4="132112"$

**做法: **

可以发现, $s$和$f(s)$的末尾字符不变. 打表观察可以发现, $s$, $f(s)$,
$f(f(s))\ldots$的首位总是在几步内循环. 用力打表观察可以猜测,
生成数字串列的过程中, 可能在某一步存在一个分界线,
使得分界线前后的两个子串以后各自变换, 不再互相影响. 结合刚才观察的性质,
只要验证后面那个子串经过若干步变换后,
首位不会和前面那个子串的末位(这个末位是不会变的)一样,
就能判断出这两个子串以后再不会互相影响了. 从$L_0="2"$开始,
每次先作用$f$, 再尝试分割,
发现只能找到$93$个不同的串$E=\{e_1,\ldots,e_{93}\}$,
他们经过一步$f$函数的作用, 均会变成一个或多个$E$中的串.
我们用$c_{i,k}$表示$L_i$是由$c_{i,k}$个互不相关的$e_k$连接而成,
向量$c_i$和$c_{i-1}$之间是线性关系. 所以可以矩乘.
