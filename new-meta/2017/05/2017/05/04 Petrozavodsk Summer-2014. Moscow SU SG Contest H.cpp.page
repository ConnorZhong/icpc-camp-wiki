``` {.cpp}
#include <bits/stdc++.h>
#define __int128 long long
using namespace std;
typedef long long ll;
const int B = 200;
typedef __int128 big;
vector<long long> a[B];
long long cross(ll l1, ll r1, ll l2, ll r2) {
    return max(0LL, min(r1, r2) - max(l1, l2));
}
long long calc(long long x, int y) {
    ll a = 1, b = x;
    for (int i = 1; i < y; ++ i) {
        if (b > ((ll) 1e18 + a) / x) return (ll) 1e18 + 5;
        //if ((big) b * x - a > 1e18) return 1e18 + 5;
        ll c = b * x - a;
        a = b, b = c;
    }
    return b;
}
long long lb(ll l, ll r, ll x, int lie) {
    ll ans = r + 1;
    while (l <= r) {
        ll mid = (l + r) / 2;
        //printf("calc(%I64d, %d)=%I64d >= %I64d\n", mid, lie, calc(mid, lie), x);
        if (calc(mid, lie) >= x) {
            ans = mid;
            r = mid - 1;
        }
        else {
            l = mid + 1;
        }
    }
    return ans;
}
ll getll() {
    char c;
    while (c = getchar(), c < '0' || c > '9');
    ll x = c - '0';
    while (c = getchar(), c >= '0' && c <= '9') x = x * 10 + c - '0';
    return x;
}
int main() {
    for (int i = 3; i < B; ++ i) {
        a[i].push_back(1);
        a[i].push_back(i);
        while (a[i].back() <= (a[i][a[i].size() - 2] + (ll) 1e18) / i) {
        //while ((big) a[i].back() * i - a[i][a[i].size() - 2] <= 1e18) {
            a[i].push_back(a[i].back() * i - a[i][a[i].size() - 2]);
        }
    }
    int T;
    //ios::sync_with_stdio(false);
    //cin >> T;
    bool debug = 0;
    if (debug) T = 1e5; else
    T = getll();
    //T = 1e5;
    while (T --) {
        long long L, R;
        //cin >> L >> R;
        if (debug) {
            L = rand() % 5000 + 1, R = rand() % 5000 + 1;
            if (L > R) swap(L, R);
        } else {
        L = getll();
        R = getll();
        }
        //L = 1;
        //R = 1e18;
        long long ans = R - L;
        for (int i = 3; i < B; ++ i) {
            ans += max(0, (int) (upper_bound(a[i].begin(), a[i].end(), R) - lower_bound(a[i].begin(), a[i].end(), L)) - 1);
        }
        if (B <= R) {
            long long las_l, las_r;
            if (L == 1) las_l = 1, las_r = (ll) 1e18 + 1; else las_l = las_r = -1;
            for (int j = 1; j < 8; ++ j) {
                long long l = lb(B, R, L, j);
                long long r = lb(B, R, R + 1, j);
                //cout << l << " " << r << endl;
                ans += cross(las_l, las_r, l, r);
                las_l = l, las_r = r;
                //cout << ans << endl;
            }
        }
        ans = ans * 2 + (L == 1);
        /*int cnt = 0;
        for (ll a = L; a <= R; ++ a) {
            for (ll b = L; b <= R; ++ b) {
                if ((a * a - 1) % b == 0 && (b * b - 1) % a == 0) cnt ++;
            }
        }
        assert(cnt == ans);*/
        string s;
        while (ans) {
            s += ans % 10 + '0';
            ans /= 10;
        }
        if (s.empty()) s += '0';
        reverse(s.begin(), s.end());
        printf("%s\n", s.c_str());
    }
}
```
