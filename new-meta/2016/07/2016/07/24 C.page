Code

``` {.cpp}

#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
const int N = 1e4 + 10, B = 14;
vector<int> G[N], add;
int a[N], b[N], f[N][B], ans1, len[N], d[N], pid[N];
bool v[N], ntre[N];
int vv[N];
void dfs(int x, int p)
{
    len[x] = 0;
    int m1 = 0, m2 = 0, cnt = 0;
    f[x][0] = p;
    v[x] = 1;
    for (int i = 0; i < (int) G[x].size(); ++ i)
    {
        int u = a[G[x][i]] ^ b[G[x][i]] ^ x;
        if (u == p) continue;
        if (v[u])
        {
            add.push_back(G[x][i]);
            ntre[G[x][i]] = 1;
        }
        else
        {
            cnt ++;
            d[u] = d[x] + 1;
            dfs(u, x);
            pid[u] = x;
            if (len[u] > m1)
            {
                m2 = m1;
                m1 = len[u];
            }
            else if (len[u] > m2)
            {
                m2 = len[u];
            }
        }
    }
    if (cnt == 1)
    {
        len[x] = m1 + 1;
        ans1 = max(ans1, m1 + 1);
    }
    else if (cnt > 1)
    {
        len[x] = m1 + 1;
        ans1 = max(ans1, m1 + m2 + 2);
    }
    ans1 = max(ans1, len[x]);
}
bool v1[20];
bool pick(int s, int t, vector<int> &path)
{
    bool flag = 0;
    while (s != t)
    {
        if (d[s] < d[t])
        {
            if (v[pid[t]] && pid[t] != s)
            {
                flag = 1;
                break;
            }
            if (pid[t] != s) path.push_back(pid[t]);
            t = pid[t];
        }
        else
        {
            if (v[pid[s]] && pid[s] != t)
            {
                flag = 1;
                break;
            }
            if (pid[s] != t) path.push_back(pid[s]);
            s = pid[s];
        }
    }
    return flag;
}
int tick[N], xxx, dd[N];
int bfs(int x, vector<int> &A)
{
    queue<int> q;
    q.push(x);
    xxx ++;
    tick[x] = xxx;
    dd[x] = 0;
    int ans = x;
    while (!q.empty())
    {
        int p = q.front(); q.pop();
        ans = p;
        vv[p] ++;
        A.push_back(p);
        for (int i = 0; i < (int) G[p].size(); ++ i)
        {
            if (ntre[G[p][i]]) continue;
            int to = a[G[p][i]] ^ b[G[p][i]] ^ p;
            if (v[to]) continue;
            if (tick[to] < xxx)
            {
                dd[to] = dd[p] + 1;
                tick[to] = xxx;
                q.push(to);
            }
        }
    }
    return dd[ans];
}
int m1[N], m2[N];
void dfs3(int x, int tar, int p)
{
    m1[x] = dd[x];
    m2[x] = -0x3f3f3f3f;
    for (int i = 0; i < (int) G[x].size(); ++ i)
    {
        if (ntre[G[x][i]]) continue;
        int to = a[G[x][i]] ^ b[G[x][i]] ^ x;
        if (to == p) continue;
        if (v[to] && to != tar) continue;
        dd[to] = dd[x] + 1;
        dfs3(to, tar, x);
        if (m1[to] > m1[x])
        {
            m2[x] = m1[x];
            m1[x] = m1[to];
        }
        else if (m1[to] > m2[x])
        {
            m2[x] = m1[to];
        }
    }
}
int ta;
bool dfs4(int x, int tar, int p, int om)
{
    if (x == tar)
    {
        ta = max(ta, om + m1[x] - dd[x]);
        return true;
    }
    bool flag = 0;
    for (int i = 0; i < (int) G[x].size(); ++ i)
    {
        if (ntre[G[x][i]]) continue;
        int to = a[G[x][i]] ^ b[G[x][i]] ^ x;
        if (to == p) continue;
        if (v[to] && to != tar) continue;
        int tmp = m1[x];
        if (m1[to] == tmp) tmp = m2[x];
        if (dfs4(to, tar, x, max(om, tmp)))
        {
            int tmp = m1[x];
            if (m1[x] == m1[to]) tmp = m2[x];
            ta = max(ta, om + tmp - dd[x] + dd[tar] - dd[x]);
            flag = 1;
        }
    }
    return flag;
}
void dfs2(int x, int st, int las, int len)
{
    if (las != -1)
    {
        memset(vv, 0, sizeof(vv));
        vector<int> nt;
        int a1 = bfs(st, nt);
        nt.clear();
        int a2 = bfs(las, nt);
        bool flag = 0;
        for (int i = 0; i < (int) nt.size(); ++ i) if (vv[nt[i]] == 2)
        {
            flag = 1;
            break;
        }
        if (flag)
        {
            dd[st] = 0;
            dfs3(st, las, -1);
            ta = 0;
            dfs4(st, las, -1, -0x3f3f3f3f);
            ans1 = max(ans1, len + ta - 1);
        }
        else
        {
            ans1 = max(ans1, len + a1 + a2 - 1);
        }
    }
    if (x == (int) add.size()) return;
    for (int i = 0; i < (int) add.size(); ++ i)
    {
        if (v1[i]) continue;
        for (int j = 0; j < 2; ++ j)
        {
            int S = a[add[i]], T = b[add[i]];
            if (j) swap(S, T);
            if (v[T]) continue;
            if (v[S] && S != las) continue;
            v[S] = 1; v[T] = 1;
            vector<int> path;
            if (las != -1)
            {
                if (pick(las, S, path))
                {
                    v[S] = v[T] = 0;
                    if (las == S) v[las] = 1;
                    continue;
                }
            }
            for (int k = 0; k < (int) path.size(); ++ k) v[path[k]] = 1;
            v1[i] = 1;
            dfs2(x + 1, st == -1 ? S : st, T, len + 2 - (S == las) + (int) path.size());
            for (int k = 0; k < (int) path.size(); ++ k) v[path[k]] = 0;
            v1[i] = 0;
            v[S] = 0; v[T] = 0;
            if (las == S) v[las] = 1;
        }
    }
}
int main()
{
    int T;
    scanf("%d", &T);
    while (T --)
    {
        int n, m;
        scanf("%d%d", &n, &m);
        for (int i = 1; i <= n; ++ i) G[i].clear();
        for (int i = 1; i <= m; ++ i)
        {
            scanf("%d%d", &a[i], &b[i]);
            G[a[i]].push_back(i);
            G[b[i]].push_back(i);
        }
        memset(v, 0, sizeof(v));
        memset(ntre, 0, sizeof(ntre));
        add.clear();
        ans1 = 0;
        dfs(1, 1);
        sort(add.begin(), add.end());
        add.erase(unique(add.begin(), add.end()), add.end());
        memset(v1, 0, sizeof(v1));
        memset(v, 0, sizeof(v));
        dfs2(0, -1, -1, 0);
        printf("%d\n", ans1);
    }
}
```
