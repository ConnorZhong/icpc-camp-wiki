Code

``` {.cpp}

#include <iostream>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;
const int N = 65540, B = 8, A = 1e9 + 7, MOD = 1e9 + 7, INF = 2e9;
long long f[1 << B][1 << B];
char ord[5];
vector<int> G[N];
int a[N];
long long tmp[N][1 << B], ans[N];
long long opt(int a, int b)
{
    if (ord[0] == 'A') return a & b;
    if (ord[0] == 'X') return a ^ b;
    return a | b;
}
void dfs(int x)
{
    long long at = 0;
    for (int hi = 0; hi < (1 << B); ++ hi)
    {
        long long &cur = f[hi][a[x] & ((1 << B) - 1)];
        if (cur != -1) at = max(at, cur + (opt(hi, a[x] >> B) << B));
    }
    for (int lo = 0; lo < (1 << B); ++ lo) tmp[x][lo] = f[a[x] >> B][lo];
    for (int lo = 0; lo < (1 << B); ++ lo) f[a[x] >> B][lo] = max(f[a[x] >> B][lo], at + opt(a[x] & ((1 << B) - 1), lo));
    ans[x] = 1LL * at + a[x];
    for (int i = 0; i < (int) G[x].size(); ++ i)
    {
        int u = G[x][i];
        dfs(u);
    }
    for (int lo = 0; lo < (1 << B); ++ lo) f[a[x] >> B][lo] = tmp[x][lo];
}
int main()
{
    int T;
    scanf("%d", &T);
    while (T --)
    {
        int n;
        scanf("%d%s", &n, ord);
        for (int i = 1; i <= n; ++ i)
        {
            scanf("%d", &a[i]);
            G[i].clear();
        }
        for (int i = 2; i <= n; ++ i)
        {
            int p;
            scanf("%d", &p);
            G[p].push_back(i);
        }
        memset(f, -1, sizeof(f));
        dfs(1);
        int A = 0;
        for (int i = 1; i <= n; ++ i)
        {
            (A += 1LL * i * ans[i] % MOD) %= MOD;
        }
        printf("%d\n", A);
    }
}
```
