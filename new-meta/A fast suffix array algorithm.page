Abstract
========

DC3算法依靠每次2/3的速率递减，从而达到了O(n)的时间复杂度，看上去常数比较大。

而这里要说的方法每次以1/2的速率递减，而且十分不满，看上去还不错。

设字符串为s。

Details
=======

这个算法的精髓在于计算出来了一个label\[i\]这样的变量，若s\[i:\] &lt;
s\[i+1:\]则label\[i\]标识为小，否则label\[i\]标识为大（显然不会有等于的情况）。

Property 1
----------

-   **对于两个后缀s\[i:\]与s\[j:\]，若s\[i\] =
    s\[j\]且label\[i\]与label\[j\]标识不同，我们可以直接知道这两者的大小关系。**

不失一般性，假设x =
s\[i\]，且label\[i\]标识为大，label\[j\]标识为小，那么我们有s\[i:\] &lt;
xxx...，而s\[j:\] &gt; xxx...，大小关系一目了然。

------------------------------------------------------------------------

用radix
sort对每个后缀按照首字母排序之后，对于首字母相同的，我们可以把这些字符串分成两个集合，一份是label小的，一份是label大的。它们之间的顺序是已知的。\
为了实现递归，不失一般性，我们假设label小的后缀个数小于n/2，我们递归把这些串的大小都排出来了。\
可以发现对于label大的这些串，有一个比较好的性质：

Property 2
----------

-   **对于任意一个label大的后缀串s\[i:\]，如果我们按照最终字典序从小到大扫描这些后缀串，s\[i+1:\]一定要比s\[i:\]早出现。**

这样一来，我们先把这些后缀串放在桶子中，并且把那些在桶中确定了位置的label小的后缀固定好位置。\
从小的桶不断取出来当前最小的串，假如是s\[i:\]，我们用这个来更新s\[i-1:\]的位置（如果label\[i-1\]是大的话）。具体做法是把s\[i-1:\]这个后缀提前到它所在的桶里面第一个的位置，并且固定住（即不与后面的提前操作又任何关系。）\
这样一来大小关系就确定了，剩下的就只是怎么实现递归了。

------------------------------------------------------------------------

为了达到递归到子问题的目的，我们现在只要对label小的排序，自然也希望它们形成一个长度不超过n/2的字符串。\
这样一个目的使得我们不得不去『压缩』字符串，就是把那些是大后缀的位置给隐藏起来。\
一个直观想法是，把s\[i:j\]压成一个字符，其中i位置是小，i+1\~j都是大，j+1是小。\
但是这样会有一个严重的问题，就是这样的话，后面一些"字符"和另外一些"字符"在这里其实是前后缀关系，大小关系其实还是不明确的。\
一个精妙的方法是，我们现在把s\[i:j\]压成一个字符，其中i,j都是小，i+1\~j-1都是大。\
这样就算出现前后缀关系，比如一个字符是小大大大大小，一个是小大小，并且后者是前者的前缀，那么大小关系根据Property
1也可以直接确定。

------------------------------------------------------------------------

那么剩下的问题就是给这些『字符』线性排序了。注意到字符是小大大大大小这样的格式出现，也就是每个『字符』所代表的字符串，其实除了起始位置之外，后面是一个非增子串，开个脑洞，用上面类似的做法，或者自己随便搞搞吧，就能桶排序了。

------------------------------------------------------------------------

Over
