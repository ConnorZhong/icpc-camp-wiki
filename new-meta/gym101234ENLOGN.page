``` {.cpp}
#include<bits/stdc++.h>
using namespace std;
const int N(111111);
typedef pair<int, int> PII;
int inf(2e9);
int rela[N], bck[N], strt[N], ed[N], a[N], dp[N], go[N];
void solve(int le, int ri, vector<int> & sorted) {
    if(le == ri) {
    }else {
        vector<int> ple, pri;
        int mid(le + ri >> 1);
        for(int i(0); i < (int)sorted.size(); i++) {
            int x(sorted[i]);
            if(x <= mid) {
                ple.push_back(x);
            }else {
                pri.push_back(x);
            }
        }
        solve(le, mid, ple);
        vector<int> stck, tmp;
        for(int i(0); i < (int)sorted.size(); i++) {
            int x(sorted[i]);
            if(x <= mid) {
                while(!tmp.empty() && tmp.back() < sorted[i])
                    tmp.pop_back();
                tmp.push_back(sorted[i]);
            }else {
                strt[x] = ed[x] = -1;
                if(tmp.size()) {
                    ed[x] = strt[x] = tmp[0];
                    go[ed[x]] = -1;
                    bck[ed[x]] = -1;
                    for(int j(1); j < (int)tmp.size(); j++) {
                        if(dp[tmp[j]] < dp[strt[x]]) {
                            go[tmp[j]] = strt[x];
                            bck[strt[x]] = tmp[j];
                            bck[tmp[j]] = -1;
                            strt[x] = tmp[j];
                        }
                    }
                    tmp.clear();
                }
                while(!stck.empty() && stck.back() > x) {
                    int cur(strt[stck.back()]);
                    while(cur != -1 && cur < ed[x]) {
                        cur = go[cur];
                    }
                    
                    if(cur != -1) {
                        while(ed[x] != -1 && dp[ed[x]] >= dp[cur])
                            ed[x] = bck[ed[x]];
                        if(ed[x] != -1) {
                            go[ed[x]] = cur;
                            bck[cur] = ed[x];
                        }else {
                            strt[x] = cur;
                            bck[cur] = -1;
                        }
                        ed[x] = ed[stck.back()];
                    }
                    stck.pop_back();
                }
                if(strt[x] != -1) {
                    dp[x] = min(dp[x], dp[strt[x]] + a[x]);
                }
                stck.push_back(x);
            }
        }
        
        solve(mid + 1, ri, pri);
    }
}
inline bool bySecond(const PII & a, const PII & b) {
    return a.second < b.second;
}
int main() {
    int n;
    scanf("%d", &n);
    vector<PII> pts;
    for(int i(1); i <= n; i++) {
        int x;
        scanf("%d", &x);
        pts.push_back(make_pair(i, x));
    }
    pts.push_back(make_pair(n + 1, n + 1));
    
    sort(pts.begin(), pts.end(), bySecond);
    for(int i(1); i <= n; i++) {
        scanf("%d", &a[i]);
    }
    int mn(inf);
    dp[n + 1] = inf;
    for(int i(0); i < n; i++) {
        if(mn > pts[i].first) {
            dp[pts[i].first] = a[pts[i].first];
            mn = pts[i].first;
        }else {
            dp[pts[i].first] = inf;
        }
    }
    vector<int> v;
    for(int i(0); i < n + 1; i++) {
        v.push_back(pts[i].first);
    }
    solve(1, n + 1, v);
    printf("%d\n", dp[n + 1]);
}
```
