``` {.cpp}
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

const int N = 555;

vector<vector<int>> segs;
int length[N], dir[N];
int n, inver;

void append(vector<int> &a, const vector<int> &b) {
    a.insert(a.end(), b.begin(), b.end());
}

bool solve(int &l, int &r) {
    //printf("%d %d %d\n", l, r, (int)segs.size());
    if (length[l] <= length[l + 1]) {
        reverse(segs[l].begin(), segs[l].end());
        if (dir[l]) {
            append(segs[l + 1], segs[l]);
        } else {
            append(segs[l], segs[l + 1]);
            swap(segs[l], segs[l + 1]);
        }
        inver ^= 1;
        return ++l, true;
    }
    if (length[r] <= length[r - 1]) {
        reverse(segs[r].begin(), segs[r].end());
        if (dir[r - 1]) {
            append(segs[r - 1], segs[r]);
        } else {
            append(segs[r], segs[r - 1]);
            swap(segs[r], segs[r - 1]);
        }
        return --r, true;
    }
    for (int i = l + 1; i < r; i ++) {
        if (length[i - 1] >= length[i] && length[i] <= length[i + 1] && dir[i - 1] != dir[i]) {
            reverse(segs[i].begin(), segs[i].end());
            //reverse(segs[i - 1].begin(), segs[i - 1].end());
            //reverse(segs[i + 1].begin(), segs[i + 1].end());
            if (dir[i - 1]) {
                append(segs[i - 1], segs[i]);
                append(segs[i - 1], segs[i + 1]);
                length[i - 1] += -length[i] + length[i + 1];
                for (int j = i; j + 1 < r; j++) {
                    dir[j - 1] = dir[j + 1];
                    length[j] = length[j + 2];
                    segs[j] = segs[j + 2];
                }
                r -= 2;
            } else {
                append(segs[i + 1], segs[i]);
                append(segs[i + 1], segs[i - 1]);
                length[i + 1] += -length[i] + length[i - 1];
                for (int j = i; j - 1 > l; j--) {
                    dir[j] = dir[j - 2];
                    length[j] = length[j - 2];
                    segs[j] = segs[j - 2];
                }
                l += 2;
            }
            return true;
        }
    }
    return false;
}

int main() {
freopen("japanese.in", "r", stdin);
freopen("japanese.out", "w", stdout);
    while (scanf("%d", &n) == 1 && n) {
        segs.clear();
        for (int i = 0; i < n; i++) {
            static char str[10];
            int l;
            scanf("%d %s", &l, str);
            segs.push_back(vector<int>(1, i));
            dir[i] = (str[0] == 'V');
            length[i] = l;
            if (i == n - 1) {
                scanf("%d", &l);
                length[n] = l;
                segs.push_back(vector<int>(1, n));
            }
        }
        int l = 0, r = n;
        inver = false;
        while (l < r && solve(l, r)) {}
        //printf("finish\n");
        if (l != r) {
            puts("No");
        } else {
            puts("Yes");
            int cnt = n;
            static int ans[N];
            for (auto c : segs[l]) {
                ans[c] = cnt--;
            }
            for (int i = 0; i <= n; i++) {
                printf("%d%c", inver ? n + 1 - ans[i] : ans[i] + 1, i == n ? '\n' : ' ');
            }
        }
    }
    return 0;
}
```
