``` {.cpp}
#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 5, B = 20, mask = (1 << B) - 1;
struct Big {
    vector<int> a;
    Big() {}
    Big(char *s) {
        int n = (int) strlen(s);
        int tmp = 0, cnt = 0;
        for (int i = n - 1; i >= 0; -- i) {
            tmp ^= (int) (s[i] - '0') << cnt;
            if (++ cnt == B) {
                a.push_back(tmp);
                cnt = 0;
                tmp = 0;
            }
        }
        if (tmp) a.push_back(tmp);
    }
    Big(int x) {
        while (x) {
            a.push_back(x & mask);
            x >>= B;
        }
    }
    Big(long long x) {
        while (x) {
            a.push_back(x & mask);
            x >>= B;
        }
    }
    void operator += (const Big &b) {
        while (a.size() < b.a.size()) a.push_back(0);
        a.push_back(0);
        int j = 0;
        for (int i = 0; i < (int) a.size(); ++ i) {
            long long tmp = a[i] + (i < (int) b.a.size() ? b.a[i] : 0) + j;
            a[i] = tmp & mask;
            j = tmp >> B;
            if (i >= (int) b.a.size() && j == 0) break;
        }
        while (!a.empty() && a.back() == 0) a.pop_back();
        if (a.empty()) a.push_back(0);
    }
    void print2() {
        string s;
        for (int i : a) {
            for (int j = 0; j < 20; ++ j) s += (i >> j & 1) + '0';
        }
        reverse(s.begin(), s.end());
        cout << s << endl;
    }
    void operator *= (const Big &b) {
        Big c;
        c.a.resize(a.size() + b.a.size());
        fill(c.a.begin(), c.a.end(), 0);
        for (int i = 0; i < (int) a.size(); ++ i) {
            for (int j = 0; j < (int) b.a.size(); ++ j) {
                long long tmp = c.a[i + j] + 1LL * a[i] * b.a[j];
                c.a[i + j] = tmp & mask;
                c.a[i + j + 1] += tmp >> B;
            }
        }
        while (!c.a.empty() && c.a.back() == 0) c.a.pop_back();
        if (c.a.empty()) c.a.push_back(0);
        c.a.swap(a);
    }
    long long val() {
        long long ans = 0;
        int cnt = 0;
        for (int i : a) {
            ans += (1LL * i) << cnt;
            cnt += B;
        }
        return ans;
    }
    void rsb() {
        a.push_back(0);
        for (int i = 0; i < (int) a.size() - 1; ++ i) a[i] = a[i + 1];
        a.pop_back();
        if (a.empty()) a.push_back(0);
    }
    void lazywork(Big &A, Big &B, int p) {
        Big tmp = A; tmp *= Big(a[p]);
        B += tmp;
        //printf("BBBBB="); B.print2();
        a[p] = B.a[0];
        //printf("a0=%d\n", a[p]);
        B.rsb();
    }
};
unordered_map<long long, int> small;
int dfs(long long x) {
    if (x == 1) return 0;
    if (small.count(x)) return small[x];
    return small[x] = dfs(x & 1 ? x * 3 + 1 : x / 2) + 1;
}
long long a[1 << B], b[1 << B], c[1 << B];
Big calc(Big n) {
    //n.print2();
    if ((int) n.a.size() <= 1) return dfs(n.val());
    Big ans = 0;
    Big A = 1, B = 0;
    for (int i = 0; i < (int) n.a.size() - 1; ++ i) {
        //n.print2();
        //printf("A="); A.print2();
        //printf("B="); B.print2();
        n.lazywork(A, B, i);
        int p = n.a[i];
        ans += Big(c[p]);
        Big C = a[p], D = b[p];
        n.lazywork(C, D, i);
        A *= C;
        B *= C;
        B += D;
        //printf("p=%d *%I64d +%I64d  %I64d\n", p, a[p], b[p], c[p]);
        if (max(B.a.size(), A.a.size()) >= 666) {
            Big tmp;
            for (int j = i + 1; j < (int) n.a.size(); ++ j) {
                tmp.a.push_back(n.a[j]);
            }
            tmp *= A; tmp += B;
            ans += calc(tmp);
            ans += Big((i + 1) * ::B);
            return ans;
        }
    }
    Big nn = n.a.back();
    nn *= A; nn += B;
    ans += Big(((int) n.a.size() - 1) * ::B);
    //printf("ans + %d\n", (n.a.size() - 1) * ::B);
    ans += calc(nn);
    return ans;
}
char s[N];
int main() {
    for (int n = 0; n < (1 << B); ++ n) {
        long long i = n;
        a[n] = 1, c[n] = b[n] = 0;
        while (i && ilogb(i & -i) < B) {
            //printf("%I64d lowbit=%d\n", i, j & -j);
            a[n] *= 3;
            b[n] = b[n] * 3 + (i & -i);
            c[n] ++;
            i = i * 3 + (i & -i);
            assert(i < 1e18);
            assert(a[n] < 1e18);
        }
    }
    int debug = 0;
    if (debug) for (int i = 0; i < 200000; ++ i) s[i] = (rand() & 1) || i == 0 ? '1' : '0'; else
    scanf("%s", s);
    Big n = s;
    cout << calc(n).val() << endl;
}
```
