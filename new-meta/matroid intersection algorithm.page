Solution
========

定义拟阵 M = (E, I),
其中E就是所有的边，而I是一个好的边集的集合，我们定义一个边集是好的，当且仅当：
可以分割成两个边集，且每一个边集中没有环。

证明这是一个拟阵。 根据拟阵的定义：

1.  空集属于I。
2.  如果A'是A子集，A是好的子集, 则 A'也是好的。
3.  如果A，B都是好的集合，且|A| &lt;
    |B|，那么我们可以添加一个B中的元素到A中，A还是好集合。

前两个条件是废话，第三个条件的话，我们可以先把A, B分成两个无环的边集 Ax,
Ay, Bx, By, 因为|A| &lt; |B|, 不失一般性，假设|Ax| &lt;
|Bx|，根据一般的生成树的matroid性质，我们肯定可以把Bx中的一条边加到Ax中去。

自此，可以证明划分成2棵生成树的matroid的性质（其实k棵生成树应该也是一样的。）

那么算法就很显然了，我们随便按照一个顺序，往里面添加边，难点在于，我加入了一条边之后，我原先的边集还是不是好边集。
如果最后我弄出来了一个大小是 2(n - 1) 大小的好边集，我们就大功告成啦！

不失一般性，我们假设当前的边集是A，分成了两份是Ax, Ay,
现在要加入e这条边。e的两边分别是ex, ey。

首先不急着加进去，我们测试一下e可不可以加到Ax里面去，这个只取决于Ax里面是不是已经存在了一条从ex到ey的一条路径，不存在的话，直接丢到Ax里面去，Bx也这么试一试。否则，取出Ax里面从ex到ey的那条路径，我们尝试下，把其中一条边移出去（移到另外一个集合里面去），连锁下去。。。

可以发现这就是一个BFS的过程，每加入一个边，我们最坏情况下要把它尝试插到每一个集合里面去，而每一次验证的复杂度是O(n)，所以总的复杂度大概就是O(m(kn)\^2)，其中k在这里是2。

我感觉明显是可以扩展到k个不相交生成树的吧。。有待大家的意见。

程序中用了一点trick，因为我们只要判断是否可以分出两棵生成树，而每个边也有正反两条。而我们往队列里面push的是（x这条边放到y这个集合里面去），所以他就直接用边的编号了，这个要注意。

``` {.cpp}

#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <queue>

using namespace std;

#define link LINK

const int N = 1e2, M = 3e2;

int n, m;
struct Graph {
    int other[M << 1], succ[M << 1], last[N], sum;
    void clear(int n) {
        fill(last, last + n, -1);
        sum = 0;
    }
    void addEdge(int a, int b) {
        other[sum] = b, succ[sum] = last[a], last[a] = sum++;
        other[sum] = a, succ[sum] = last[b], last[b] = sum++;
    }
};

Graph g;
int edge[M][2], color[M], link[M << 1], prev_node[N], prev_edge[N];
bool in_queue[M << 1], mark[N];

bool find_cycle(bool flag, int x, int target) {
    if (x == target) {
        return true;
    }

    for (int i = g.last[x]; ~i; i = g.succ[i]) {
        int y = g.other[i];
        if (!mark[y] && color[i >> 1] == flag) {
            mark[y] = true;
            prev_node[y] = x;
            prev_edge[y] = (i >> 1 << 1) | flag;
            if (find_cycle(flag, y, target)) {
                return true;
            }
        }
    }
    return false;
}

bool solve(int id) {
    queue<int> q;
    fill(in_queue, in_queue + g.sum, false);
    //memset(in_queue, 0, sizeof(in_queue));
    q.push(id << 1); in_queue[id << 1] = true;
    q.push(id << 1 | 1); in_queue[id << 1 | 1] = true;

    while (!q.empty()) {
        int x = q.front();
        q.pop();

        fill(mark, mark + n, false);
        mark[edge[x >> 1][0]] = true;
        if (find_cycle(x & 1, edge[x >> 1][0], edge[x >> 1][1])) {
            for (int y = edge[x >> 1][1]; y != edge[x >> 1][0]; y = prev_node[y]) {
                int e = prev_edge[y] ^ 1;
                if (!in_queue[e]) {
                    in_queue[e] = true;
                    q.push(e);
                    link[e] = x;
                }
            }
        } else {
            for (; (x >> 1) != id; x = link[x]) {
                color[x >> 1] ^= 1;
            }
            color[id] = x & 1;
            return true;
        }
    }
    return false;
}

int main() {
    int testCase;
    scanf("%d", &testCase);
    while (testCase --) {
        scanf("%d %d", &n, &m);
        g.clear(n);
        fill(color, color + m, -1);


        int cnt = 0;
        for (int i = 0; i < m; i++) {
            int a, b;
            scanf("%d %d", &a, &b);
            g.addEdge(a, b);
            edge[i][0] = a, edge[i][1] = b;
            cnt += solve(i);
            //cout << "cnt = " << cnt << endl;
        }

        static int testCount = 0;
        printf("Case %d: ", ++testCount);
        puts(cnt == (n - 1) << 1 ? "YES" : "NO");
    }
    return 0;
}
```
