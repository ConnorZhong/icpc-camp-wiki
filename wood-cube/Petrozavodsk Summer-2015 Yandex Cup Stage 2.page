## A. Angle Patterns

## B. Best Strategy

## C. Coin Game

## D. Domination [TDJ]

用线段树维护擂台即可知道出现超过一半的数字（如果存在这个数字的话），接下来就需要check这个数在这个区间中的出现个数：首先整体用一个set维护区间，然后我们需要对每种数字维护区间+1/-1和询问区间和，一个简单的想法是可以维护一个值域线段树（但是算了下内存还是爆了256MB）（或者也可以维护一个平衡树），于是一种方法是我们可以实现一个带内存回收的值域线段树（实现起来略诡异），另一种方法是用基于map的双BIT实现（一次操作$O(log^2{N})$），果断T了（unordered_map不但开不下而且更慢，全部颜色一起存一个unordered_map**更慢**（虽然理论上单次$O(log{N})$的复杂度））……最后发现前缀操作有冗余于是在BIT里加了个buffer过了。（其实用双BIT思想实现单点修改区间查询带内存回收的值域线段树似乎会更好）

## E. Equation

## F. Safe Flight

## G. Version Control System

## H. Hack

## I. Optimal Choice [TDJ]

求边双仙人掌的最大权独立集，做法：在dfs树上做树形DP，先做一遍dfs将节点按与环中返祖边的关系分为四类：1.不在环中 2.环的最高节点(返祖边顶部) 3.环的中间节点 4.环的最低节点(返祖边底部)；然后状态记为 `f[x][是否取了x节点][是否取了x子树中与返祖边相邻的点] = maxWeight`，四类节点分别实现不同转移即可

## J. Jeopardy