<pre><span style="font-family:Menlo,Consolas,Monospace; font-size:15px;">
┌─────────────────────────────────────────────────────────────────────┐
│       2016-10-06 17:13-22:13 · Fudan U Wood Cube · MZH/TDJ/GX       │
├────────┬────────────────────────────────────────────────────────────┤
│B [0:37]│          ·₀ oo·o!! ·‼ !   ·    ō                        ₁  │
├────────┼════════════────────────════════════────────────════════════┤
│C₇[0:42]│    oo··               ₀         ·          ·ooo·oō         │
│F [0:29]│             ₀       ₁ooooō                                 │
│I [0:18]│    ₀             ₁         o· ··o!ō                        │
├────────┼════════════────────────════════════────────────════════════┤
│D [0:43]│        ₀       o oo·    ₁         ·oooo·! !ō               │
│E [0:40]│            ₀                          ₁          ₂oooo·····x
├────────┼════════════────────────════════════────────────════════════┤
│+ [3:24]│    oo··  ·  oo·o·oo·ooooo··o· ·oo··oooo·· ··ooo·oooooo·····│
└────────┴────────────────────────────────────────────────────────────┘
┌────────┬────────────────────────────────────────────────────────────┐
│G₂[-:--]│                                                       ₀    │
│A₀[-:--]│                                                            │
│H₀[-:--]│                                                            │
└────────┴────────────────────────────────────────────────────────────┘
</span></pre><br>

## A. Alone in the Cactus

## B. Binary Neural Network [MZH]

## C. Chess Puzzle [TDJ]

不断把三列折起来变成一个8列内的问题后开始搜。GX另有构造解法。

## D. Dominoes [GX]

注意到可以先确定怎么放骨牌然后再决定放哪种骨牌，所以简单状压dp即可。

## E. Experience is Worth It [GX]

枚举r1,r2，然后接下来从大到小枚举列起点，统计能吃到每种怪物的最早列，每种怪物出现的最早列，然后枚举矩形中能吃到的最大怪物即可。

## F. Fix the Matrix [TDJ]

问题关键即构造一个01矩阵使得任意两行或任意两列至少有三位不同，随便搜一下即可。

## G. Guess the Data Structure [TDJ]

维护一个01trie和数组，01trie每个节点维护子树中每一位的1的个数，并打上旋转标记，不过这样会MLE；可改为不旋转的trie并另维护一个splay来解决MLE……待实现。

## H. Hovercraft [TDJ]

我们发现随机地图基本都是无解的，因此考虑搜索指令的思路。先枚举函数指令，函数分两种情况，递归及非递归；之后我们在主程序上做BFS，执行12步。这里需要加一个剪枝：如果剩下步数沿最短顺序依然无法遍历未开灯泡，则此状态无解。然后再加一堆优化即可。最后需要注意判断函数执行到中途达到接收态的情况。

## I. Izhevsk Training Camp [TDJ]

三维CDQ分治会TLE，由于只需要求和，所以可以用二维容斥一下。