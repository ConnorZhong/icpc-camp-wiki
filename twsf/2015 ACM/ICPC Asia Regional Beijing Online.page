如果崩习惯了是不是感觉还挺正常的？

A. The Cats' Feeding Spots [zxa](#zhy) {#a.-the-cats-feeding-spots-zxa-zhy}
======================================

水题，一开始理解错题意了，而且写的时候非常变扭。

B. Mission Impossible 6 [zxa](#zxa)
===================================

模拟，写之前好好的和zhy一块讨论题目的所有的细节。

写得还算顺利，用两个栈来模拟，可以避免链表的种种奇怪的情况。

但是最后还是因为不小心WA了三次。

-   没有释放最后被选中的部分
-   没清空复制板
-   插入在改写模式下在最后的位置也是非法的

C. Protecting Homeless Cats
===========================

D. The Celebration of Rabbits [zxa](#jsy) {#d.-the-celebration-of-rabbits-zxa-jsy}
=========================================

因为n是奇数，不难证明一旦每个数列至多只有一个x能让它合法。

所以不妨枚举x的值，问题就变成了一个长度为n序列的，每个数可以填$[x,x+m]$，求让序列异或为0的方案数。

直接DP是$O(nw^2)$的，因为最每层转移都相同且满足结合律，可以用快速幂优化为$O(w^2 \log n)$，其中瓶颈在于求两个向量的异或卷积。

异或卷积如果使用了快速沃尔什变换(FWT)，就能做到单次$(w \log w)$，这样整体的复杂度就变为了$O(w^2 \log w \log n)$，实际上像下面那样写复杂度是$O(w^2 (\log w + \log n))$的。

[AC代码](http://paste.ubuntu.com/12513569/)

E. Border Length [zxa](#jsy) {#e.-border-length-zxajsy}
============================

几何，答案为多边形在圆内的长度加上圆弧在多边形内的长度。

前者只需要求出所有交点然后判断，后者我的做法是求出交点极角排序后看相邻两点弧上的中点是否在多边形内，就可以判断出这段圆弧是否在多边形内。

写之前也是和zhy一块讨论清楚了所有细节，但不应该在这种题上面讨论这么长时间。

写的非常顺利，一次通过。

upd：圆在多边形内长度等于将多边形三角剖分之后圆在三角形内部的弧长之和（按面积容斥），这样就有了一个$O(n)$的做法。

F. Couple Trees [zxa](#jsy) {#f.-couple-trees-zxa-jsy}
===========================

一交就过了哦 - -

如果可以离线，很容易想到把询问按A树上所在点分类，然后对A树DFS，DFS的同时在B树上标记出所有当前A树上x点到根路径上的所有点。

对于每个询问，只需要求出y点到B的根的被标记的点的最大值即可，这个过程可以使用线段树+树链剖分维护。

强制在线的话，换用可持久化线段树来维护即可。

jsy: 利用$dfs$序可以做到一个$log$。

G. Boxes [jsy](#jsy)
====================

搜索，预处理出所有初始状态到目标状态的最小步数。

H. Fractal [zhy](#zhy)
======================

那条竖线从左往右扫，每经过一条原有正方形竖边，答案$＋4$，竖边坐标为$\sum0.5/2^i$

比赛中因为$eps$设置为$1e-9$造成错误。
赛后又尝试了多种姿势，发现不改$eps$，把除法转化为乘法可以ac。或者还是使用除法，将$eps$设置为$1e－12$便可ac。
尝试了几组数据，发现原有正方形竖边有一条大约为$0.4999999701976776...$当eps设置为1e－9时，即可发现用$fabs()<eps$判断时就会当成$-1$了。
总结一下：
1.其实在运用精度处理方面，大体正确，就算$eps$设置为$1e－12$如果运气不好恰好比较了一个$0.4999999700000123123$还是会错，但是人家给的8位小数，$eps$设置为$1e-9$实在时太蠢了，$1e-12$就能让错误的概率小很多。
2.$eps$设置为$1e－12$相当于后面允许多3个0，转换成乘法后，每次只是减0.25，就算$eps$设置为$1e－9$，也允许后面多6个0。所以在今后的处理中，尽量转化成乘法。（感觉变成整数也是类似的道理。）

I. New Teaching Buildings
=========================

J. Scores [zxa](#jsy) {#j.-scores-zxa-jsy}
=====================

这题强制在线 = =||| 而且没注意到也能过样例。

先对每一位维分别排序，如果对每一维分别考虑的话，如果能计算出某一维值不大于一个数的点集，对于一个询问$V_{0..4}$，答案就是每一维点集的并集大小。

所以可以使用bitset来优化……我们没法预处理出所有“某一维值不大于一个数的点集”，但可以分个块，对于每个询问可以以$\sqrt{n}$的复杂度得到这个bitset，无论怎么样只要让这里的复杂度小于$O(n/64)$就好了。

总结
====

jsy
---

这场又是几乎零贡献。刚开始zhy做$H$的时候和我说精度可能有点问题，但是我坚信用$esp$来控制精度就行了，于是等$H$返回$wa$时我们整个队伍都不好了。然后$G$题看成$n \leq 8$，正好搜索过不了，浪费了许多时间。等做完$G$之后我就下来想$F$和$D$了，然后就陷入了想想$D$再想想$F$的循环。等队友过掉$B$之后，我自认为已经会做$D$了，等上面写完暴力之后才发现有$bug$。接着我又好像会做$F$了，推完$100$多行代码，已经把$re$的问题解决好后，才发现做法有漏洞。

在训练或者比赛中，经常性地出现“咦，我会做了。。。噢，做法有bug”这种情况，这样不仅影响心情又浪费时间。

知识面贫乏确实是一个大弱点，比赛的时候一旦没有遇到自己擅长的题目或者擅长的题目超过自己的能力范围，这时候在队伍里发挥的作用就非常小。

zxa
---

一上来就梦游，不认真看题目，水题没有做到写的又快又好。

自己没有做到独立思考，像F题如果自己好好想想还是很容易想出正解的，也可能是自己一直都有写题的任务。

写模拟题的时候有些着急了，而且比较依赖队友造数据。

zhy
---

精度处理上一直存在很多问题，但是当时觉得还是要自信一点就果断上了，两次wa还是给整队造成了很多负面影响。由于前面的原因，到模拟的时候就虚的不行了，其实这种模拟如果能分担下来，能减轻对内很多压力。仍需多多扩展知识面，提升代码准确性和调试能力。
