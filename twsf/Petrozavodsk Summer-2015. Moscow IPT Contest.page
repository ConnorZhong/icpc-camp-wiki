A. Rectangle Query \[zxa\]\[jsy\]
=================================

转化为三维区间询问问题，用bitset解决。

B. Game With A Fairy \[zxa\]
============================

随机一堆大小为$2^k$的集合。

C. Portkeys \[jsy\]
===================

用set维护没被更新的点，每次更新是更新一个区间，暴力从set中取出元素更新。

D. Maximal Common Subpair \[zxa\]\[jsy\]
========================================

先构造s1+s2的SAM，dp出每个节点在s1以及s2中出现的最前面的位置x,y，相同节点保留长度最长的子串长度v，得到一堆三元组(x,y,v)。

再构造rev(s2)+rev(s1)的SAM，同样DP出在s1与s2出现的最后面的位置，得到另一堆三元组，拿个数据结构(BIT)拼起来就完了。

E. k-transpositions \[jsy\]
===========================

首先$k$很小，所以至多有$2k$个点需要被交换，也就是说建图之后至多有$2k$个点不在一元环上。$f[i][j]$代表有$i$个点，形成$j$个环的方案，这个很好$dp$出来。$h[i][j]$代表$i$个点形成$j$个非一元环的方案，这个可以用$f[i][j]$容斥得到，但是是$O(k^3)$的。考虑到当$i$相同时，容斥的系数都是相同的，所以可以把这类dp值一起考虑。用$g[i]$代表有$i$个点形成若干个非一元环的方案，然后就做完了。

F. PQ tree \[jsy\]
==================

首先，先把第一个排列重标号升序的，同时用新标号修改其他排列。一棵子树下的数字一定是连续的一段，$[l, r]$可以在同一棵子树当且仅当数字$[l,r]$在所有排列中都在连续的一段标号中。

假设某个节点$P$对应了一个数字区间$[l,k]$，现在要给它加一个子树$[k+1,r]$，需要满足的条件是$[k+1,r]$在所有排列中都是连续的,如果不再往这个节点上加子树了，要满足的条件是$[l,r]$是连续的。

节点$Q$的情况比较麻烦，它需要满足的条件是$[k+1,r]$是连续的，$[l,r]$是连续的，如果不再往这个节点加子树了，只要这两个限制就可以了。但如果以后还要往这个节点加子树就必须存在一个$z$满足$[k+1，z]$是连续的。

G. Random Walking \[zxa\]
=========================

老题，同长春网络赛M

H. Sasha And Swag Strings \[zxa\]
=================================

建一个SAM，然后对于每个节点进行做类似后缀树的缩边，即一直走走到不是出度为1的点为止。然后把除了根以外的出度为1的点都删去，剩下的DAG的结构就很类似于题面所给的后缀树。

然后对于每个新DAG上的节点的所有入边有个最大的长度，由于这个DAG是由DAWG缩成的所以这个最大长度之和是线性的，然后就能暴力了。

I. Tree Confrontaton \[zxa\]
============================

考虑一条有向边可以如果能把树划分为两块，一块大小不小于A，一块不小于B，那么无论部落在块内怎么动都是一个等价类。称这样的边为好边，所以等价类不多于$2(n-1)$个。

接下来考虑合并，假设两个连通块已经固定，那么任意断开就能让这两个联通块之间不连通的边都是属于一个等价类。所以考虑枚举任意两条边，前一条的终点是另一条的起点且它们都是好边就可以合并。用枚举这两条边的公共点优化上述过程。

J. Two Airlines \[zhy\]
=======================

维护两个数组，第一个数组中任意两个相邻的点间连的都是A边，第二个数组中任意两个相邻的点间连的都是W边，第一个数组最后一个点与第二个数组最后一个点间连得是A边。
初始状态第二个数组放入第一个点，第一个数组为空。

每次加入一个点，询问与第二个数组最后一个点间边的颜色。

为W： 放入第二个数组并询问与第一个数组最后一个点间边的颜色。
为A或第一个数组为空则保持不变。
为W则将第一个数组最后一个元素弹出并放入第二个数组的末尾。 为A：
将第二个数组最后一个元素弹出并放入第一个数组末尾 询问与第二个数组 当前
最后一个元素间边的颜色。 为W或空将这个新点放入第二个数组。
为A则将新点放入第一个数组。 这样便继续保持了数组间元素的性质。
最后按一定顺序输出即可。
