A. Prevent a Galactic War! \[zxa\]
==================================

初始解设为y，迭代几次就可以出解。

B. Forcefield \[zxa\]
=====================

set模拟

C. Missing Part \[zxa\]
=======================

枚举第一个串从哪个位置开始匹配，然后需要算有多少个位置某两个字符之间可以匹配，算出这个以后剩下的是个KM，可以直接暴力。算匹配个数用FFT，老方法。

D. Handling a Spaceship \[zxa\]\[jsy\]
======================================

先询问出每个齿轮对应的基向量，因为保证向量间线性无关，可以直接整体二分，对于得到的向量S用高斯消元解出它在这组基下的坐标，通过坐标的正负来判断某一维的m是取大了还是取小了还是刚刚好。

E. Cryptographic Argument \[jsy\]
=================================

找规律

F. The Jedi Killer \[jsy\]
==========================

枚举一个点或者两个点在中间那条线段上，这样公共点就固定了。

G. Youngling Tournament \[jsy\]
===============================

假设之前的和为$y$，上一次获胜人的数字为$x$。如果$[y, y + x)$之间没有数字，则大于等于$x+y$的第一个数字会获胜。如果$[y, y + x)$之间有数字，则这些人都不会赢。这个过程用线段树以及set模拟，次数不会超过$40$。

H. Garland Checking \[zxa\]
===========================

裸LCT。

I. Equipment Assembling
=======================
