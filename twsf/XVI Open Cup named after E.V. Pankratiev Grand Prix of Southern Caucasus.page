A. Business \[jsy\]
===================

考虑答案为$0$时如何check，这只需要把年收益当作容量，钱当作花费做一遍背包即可。对于答案大于$0$的情况，只需要预处理一下，获得年收益为$d$初始金币恰好不够用时最少的时间，然后再按时间作为代价做一遍背包即可。

B. Edit
=======

C. Cellular Explosion \[jsy\]
=============================

有解的两种情况：

1.  最终的序列能被拆成两部分，第一部分是一个数字生成序列的后缀，第二部分是另一个数字生成序列的前缀，生成次数不超过10，这部分可以dp解决。然后用最短路求出每个相邻有序对至少需要多少步操作能生成，统计答案即可。

2.  其他情况，序列一定是某个数字的生成不超过10次的序列的子串，这部分可以dp解决。然后用最短路求出每个数字至少需要多少步操作能生成，统计答案即可。

D. Pocket Money \[jsy\]
=======================

如果总和为偶数则全取，否则去掉最小的奇数。

E. Lighting \[jsy\]
===================

$f(i,j)$代表左边取了$i$个右边取了$j$个的概率

$f(i,j) = (1-p)^ip^j \binom{i+j}{i}$

当$i$固定时，$f(i,j)$是个关于$j$的单峰函数，三分出极值的位置，然后左右都卡一个界，暴力计算贡献。

$f(i,j) * (i + j + 1)*(1-p)$对$ans[i + 1]$有贡献。

$f(i,j)*(i + j + 1) * p$对$ans[n-j]$有贡献。

F. Toll Roads \[zxa\]
=====================

树状数组维护DFS序列。

G. Boxes \[jsy\]
================

$f[i]$代表环长度为$i$的合法方案数。

$set$代表不合法环长的集合。

$f[i] = \sum_{j = 1}^i f[i-j] * (j - 1) ! * \binom{i - 1}{j - 1} [j \notin set]$

化简后可以通过前缀和减去不合法的情况来计算。

H. Track Gauge \[zxa\]
======================

每个子树上的根节点有一个取值的区间，代表根节点的权值在这个范围内时子树内的代价之和最小。然后考虑合并的时候每个子树都对应着一个代价对应根节点的权值的一个分段线性函数，找出它的最小值就行了。

I. States \[zxa\]
=================

按询问分块，每块中把值域至多分成根号块。然后每一段值域的操作都是独立的，再用并查集来模拟操作的过程。

另一个做法：用Treap维护，合并的时候扯成一段一段来归并，复杂度据说是两个log，实测跑的很快。

J. Dancing Course \[zxa\]
=========================

考虑费用流建模，任意一条增广路都会经过中间的t个点，所以拿堆或者set维护这t个点与源点汇点共t+2个点之间直接走过去的最长路，然后每次直接求从起点经过这t个点到汇点的的最长路。即可跑过时限。
