---
title: 2017 Multi-University Training Contest - Team 7
---

# A. All kill

# B. Build a tree [zmy]

每一层的点只有三类，一类是满二叉树，且最深层与原二叉树同层。另一类也是满二叉树，不过比原二叉树低一层。还有一类是不满的。前面两类很容易计算。所以我们主要需要计算不满的情况。递归下去即可。

# C. Color the chessboard [wbr]

把棋盘按奇偶反转颜色，那么题中的条件就变成了每一行都是一个颜色，或每一列都是一个颜色。那么把翻转后的图判断一下就是个简单的快速幂问题。需要注意的是假如图全是一个颜色或者干脆没有染色点的话需要减去相应重复的答案。

# D. Destroy the cube

# E. Euler theorem [zmy]

简单数论

# F. Free from square [zmy] [wbr]

按照最大质因子的大小将数分组，质因子均小于等于19的数直接暴力容斥。大于$19$的，按照最大质因子的大小分为一组，显然这一组中最多只能挑一个放到新集合里。
$dp_{i,j}$表示$i$状态下，已经加了$j$个数的方案数。$i$为二进制压缩后的结果，表示小于等于$19$，即前$8$个质因数是否在集合中出现过。使用滚动数组来优化空间，转移形式类似背包。


# G. Give out candies [jds]

用$i.j$这点表示给第$i$个孩子至少$j$块糖，当这个点属于$S$集合时所代表条件成立。然后$i.j->i.j+1$连$1000-w_{i,j}$，$i.m$向$T$连$1000-w_{i,m}$，$S$向$i.1$连$inf$。如果存在$a_x-a_y \leq z$，$x.k$->$y.k-z$连$inf$。跑最小割，再用$n*1000$减掉答案。

# H. Hard challenge [wbr]

按极角排序扫一遍

# I. Inverse of sum [wbr]

题目要求$\frac{1}{a_{i}+a_{j}} \equiv \frac{1}{a_{i}}+\frac{1}{a_{j}} (\mod p)$，

即要求$(a_{i}a_{j} \equiv a_{i}(a_{i}+a_{j})+a_{j}(a_{i}+a_{j}) (\mod p)$，于是得到下列式子

$$a_{i}^{2}+a_{i}a_{j}+a_{j}^{2} \equiv 0 (\mod p)$$

当$a_{i} \neq a_{j}$时，上式转化为$a_{i}^{3} \equiv a_{j}^{3} (\mod p)$

因此只需要计算出每种$a_{i}^{3}$和$a_{i}$有多少种，扫一遍即可得出答案。

但是要注意$p=3$的特殊情况。时间复杂度$O(n\lg n)$.

# J. Just do it [jds] [zmy]

看到了几种做法，一种找规律

第一次 贡献为 `1` `1` `1` `1` `1` `1` `1` `1` `1` `1` `1`

第二次 贡献为 `1` `0` `1` `0` `1` `0` `1` `0` `1` `0` `1` `0`

第四次 贡献为 `1` `3个0` `1` `3个0` `1` `3个0` `1` `3个0`

第八次 贡献为 `1` `7个0` `1` `7个0` `1` `7个0` `1` `7个0`

一种dp，

$dp(i, j)$表示第$i$次变换第$j$列的数。
 
$$dp(i, j) = dp(i, j-1)\oplus dp(i-1, j) = dp(i, j-2)\oplus dp(i-1, j-1)\oplus dp(i-1, j-1)\oplus dp(i-2, j) = dp(i, j-2)\oplus dp(i-2, j) => dp(i, j-2^n)\oplus dp(i-2^n, j)$$ 

压到一维便可以搞定

```cpp
while(m) {
    int x = m&-m;
    for(int j = x; j < n; j++) {
        dp[j] ^= dp[j-x];
    }
    m -= x;

}
```

还有一种就是标解，比赛时我也推出每个位置的贡献是个组合数$\mod 2$，然而忘记组合数奇偶性的规律，并且标解中计算贡献把$m$按位拆分，然后从低位往高位进行计算使得用$\mathcal{O}(NlogN)$的时间算出了二进制子集的转移，从后往前计算避免重复，最终代码极为精简，值得学习。

# K. Kolakoski [wbr]

模拟

# L. Loop nest [zmy]

我们将问题进行转化。实际上我们要考虑的是，满足一些大小限制关系，且每个数字大小在$[1,n]$之间的方案数。我们考虑将原来所有数划分成$k$段，每一段内数字大小相同，且整体呈严格递增的趋势。这样我们可以不用考虑$n$的影响，只需要在最后乘以$C(n,k)$即可求出恰好划分为$k$段的方案数。
下来我们考虑如何计算$f[S][k]$，即现在已用了$S$（状压的结果）的数，且分了$k$段的方案数。
首先考虑限制的转化。原题相当于给了一系列这样的关系：$i_j<=i_k (j<k)$或$i_j>=i_k(j<k)$，我们全部转化为$i_j<=i_k$的形式。如果我们按照递增的顺序枚举$k$段中的数字，那么一定满足，对于新的一段$x$（$x$表示新一段数的状压结果），对于其包含的任意一个数$i_y$，所有小于等于$i_y$的数$i_z$都应该不晚于$i_y$出现。
所以我们枚举最后一段的状态$x$,判断其在当前所有用的数为$S$的状态下，能否作为最后一段。如果可以，进行转移。

# M. Mystery

# 总结反思

###replay
开场之后过掉了两道签到题，随后三人看见10通过人数较多就一直在想这道题，但是没什么想法，浪费了很多时间。大概想了一个小时之后wbr发现08是个简单的计算几何，但是由于不够熟练WA了两发。随后wbr嘴出了02的做法交给zmy写。zmy写完之后接连WA，debug了一个小时才通过这道题。然而10还是没有进展。最后一个小时zmy和jds一起想10，wbr去想数学题，但是都没有成果。最后半个小时zmy决定写一发10，但是样例都无法通过，最终又一次血崩。

**zmy** 时间主要浪费在10了，三个人都毫无思路。这种情况还是应该多开题。

**jds** 看到全场都过了10，于是十分想做出10，结果最后我们都没有想出来，于是又血崩了一次，虽然策略上有些失误，但我觉得这次更多反应的还是水平上的不足，以后要多多弥补漏洞，多见些题目，杜绝这种毫无头绪的情况发生。

**wbr** 本场比赛数学题较多，很多题读过题都有一些思路，但是并不完整，最终也没能尝试写。全队在10上浪费了比赛接近一半的时间，却没有做出来。如果及早的更换策略转去看03,09,07等可能更为擅长的题的话也许结果会好很多。