A. Wrestling Match \[Skywalkert\]
=================================

题意杀。设一个集合 $S$ 表示已经确定属性的点，根据到根的距离模 2
的值来区分两种属性，未知属性的点类似地根据 match
情况区分属性异同即可。仅当出现奇环的时候答案为 No 。

B. Regular Number \[Skywalkert\]
================================

这个题在`2016 Astar Round 3`有一个一模一样的题目，那道题字符集更大一点。

设 $S(i)$ 表示第 $i$ 个模式可接受的字符集合， $f(i, j)$ 表示前 $i$
个字符最后 $j$ 个位置能否匹配前 $j$ 个模式，则有
$f(i, j) = f(i - 1, j - 1) \cdot [s_i \in S(j)]$ 和 $f(i, 0) = 1$。

为下标做一个变形，令 $g(i)$ 表示可接受第 $i$ 种字符的模式编号，则有
$f(i, j) = f(i - 1, j - 1) \cdot [j \in g(s_i)]$ 和 $f(i, 0) = 1$ 。

这样变形的好处是将第二维完全地对齐，令 $g(i, j)$ 表示第 $i$
种字符能否被第 $j$ 个模式接受，则有
$f(i, j) = f(i - 1, j - 1) \cdot g(s_i, j)$ 和 $f(i, 0) = 1$
，将第二维压缩成 bits 即有
$f(i) = (f(i - 1) \text{<<} 1) \text{&} g(s_i) \text{|} 1$ 。

C. Game of Taking Stones \[Skywalkert\]
=======================================

威佐夫博弈模型。不妨设 $a < b$ ，令
$r = b - a, \phi = \frac{\sqrt{5} + 1}{2}$ ，则局面必败的情况满足
$a = \left \lfloor r \phi \right \rfloor, b = \left \lfloor r \phi^2 \right \rfloor$
。事实上，只需要判定 $a, r$ 或 $b, r$ 的关系即可。

对于这道题，不妨分析所需要的精度，为了保证 $r \phi$ 的精度误差小于
$10^{-1}$，则最坏情况 $\phi$ 的误差需要小于 $10^{-101}$ ，因此可以求
$\left \lfloor 10^{100} \phi \right \rfloor$ ，然后直接使用大整数验证。

这其中涉及到对 $2 \cdot 10^{101}$ 的开根，我的做法是直接用 python
牛顿迭代求出值存到了 C++ 代码里，减少许多计算。如果用 Java ，可以
BigDecimal 保留一定精度直接计算。

D. A Simple Math Problem \[Skywalkert\]
=======================================

观察一下即可发现和证明 $\gcd(a, b) = \gcd(x, y)$ ，然后就变成
$x' + y' = a', x' \cdot y' = b', \gcd(x', y') = 1$
的问题了，我的做法是枚举 $x' | b$
检查，实际上只需要根据前两个式子解方程即可。

E. An Interesting Game \[Skywalkert\]
=====================================

关键是读懂题意（感谢队友提供正确的转化后的题意），两问都可以使用相同的做法解决。

第一问是给定 $L, R$ 求 $\sum_{L \leq x \leq R} {lowbit(x)}$
，第二问是给定 $n, y$ 求
$\sum_{1 \leq x \leq n}{[x - lowbit(x) < y \leq x]}$ ，即
$\sum_{1 \leq x \leq n}{[y \leq x < y + lowbit(x)]}$ 。

考虑区间中每个数 $x$ 对答案产生的贡献就好啦，将 $lowbit(x) = k$
的情况归为一类进行统计，发现就是搞搞不等式，统计下满足条件的奇数
$\frac{x}{2^{lowbit(x)}}$ 有多少个，算算贡献就好了。

由于第一问答案可能达到 $\frac{n \log_2{n}}{2}$
，队长在场上问了下能否用`int128`， clarification
回复说不需要考虑这个问题，所以就耿直地用`long long`了，然后就过啦。

F. Detachment \[Skywalkert\]
============================

这是一道我在准备`NOIP`时就见过的题目，最近发现这道题和`BestCoder Round #76 Div.1 1001`很像。

观察到几个结论就好了。

-   如果可以用更多的数字来凑，不妨用更多的数字。
-   1 是不会使用的。

我们可以把这个问题看成分配技能点，首先我们要找到一个最大的 $k$ 满足
$\frac{(k + 2)(k - 1)}{2} \leq n$ ，因为我们最多可以学习 $k - 1$
个有用的技能，接下来就是把剩余的技能点一点一点加上去，此时剩下的技能点不会超过
$k$ ，否则足够我们学习一个新的技能了。

如果剩下的技能点不超过 $k - 1$
，那我们的策略必然是按已经点的技能点数从高往低使每个技能增加一个技能点，而不会使得高的技能点增加很多，这是因为当
$a + 1 < b - 1$ 时 $a b < (a + 1) (b - 1)$ ；而剩下的技能点恰好为 $k$
时，多的技能点应该给点数最高的技能。

总之答案可以表示成两个连续区间乘积的乘积，甚至其实是一个阶乘除以两个整数，只需要
$O(\sqrt{N})$ 预处理阶乘和逆元就可以 $O(1)$ 回答了。

G. Garden of Eden \[Constroy\]
==============================

树上每个节点有一个颜色，求经过所有颜色的路径数。经典的点分治模型，无脑套模型即可。

稍微思考一下发现状态数很少 $O(2^k)$，所以可以树上DP，复杂度更低。

H. To Begin or Not to Begin \[Constroy\] \[Skywalkert\]
=======================================================

不清楚什么题意，看样例猜答案。

puts((n + 1) & 1 ? "1" : "0");

------------------------------------------------------------------------

把抽出来的序列补齐成长度为 $n + 1$
的，发现红球在每个位置的概率均等，可以直接计算谁的概率之和更大一点。

I. Convex \[Skywalkert\]
========================

读完题可以直接敲的题目。

J. Find Small A \[Skywalkert\]
==============================

不用读完题就可以直接敲的题目。

K. Guess The Number \[Skywalkert\]
==================================

这道题和`2016 Multi-University Training Contest 5 A`很像，也就是经典的鹰蛋实验问题，而这道题就可以看作是只有**两个鹰蛋**可以摔的实验。

仔细读题后可以这样理解决策，每当区间大小大于 1
时，选择一个点将区间断成两个子区间，这两个子区间的代价最大值是所有可选的断点造成的结果里最小的，这样的话决策就只和区间的长度有关了，令
$f_i$ 表示长度为 $i$ 的区间对应的代价，$g_i$
是对应的决策数量，很容易写出 DP 方程。

不难发现鹰蛋问题的 DP
方程是满足凸完全单调性的，所以可以记录转移的区间，区间的端点单调不降，每次算方案数其实就是一个区间和而已。

Summary
=======

**Constroy:**
今年第一场ICPC区域赛，准备不是很充分，模板是当天早上打印的。不过 Tang
这场状态很好，一上来就要抢键盘签到，然后就一路A了下去。我和 Liu
就去读一些后面的题并给 Tang
提供思路。总的来说前期很顺，中期卡A题换我上去写G，节奏有点缓，Tang
有些着急。我让他先冷静一下，过了G之后去帮他们看A。过了C和A之后节奏稳住了，也不那么急了。本来K是我来写的，写完了
DP 的 prototype 发现决策区间是单调的，要维护two
pointer。当时我没想好，就耸了，让状态更好的 Tang
来写。结果不仅耽误了很多时间，还害 Tang WA
了一发（赛后估计了一下还不如自己想清楚了直接写）。本来E也是我在想，受长春那题的启发我和
Liu 设计了两种数位 DP。然后 Tang 发现可以直接枚举 lowbit
统计，把键盘抢过去就写了。顿时觉得自己好傻，不过还是要盯着 Tang
写，于是发现了迷之 %d。

**Skywalkert:**
全场题思考难度不大，打的效果对于一个不好好训练的队伍总体来说还行。码力还行，但是跟榜时总觉得节奏不够快有点慌，导致了K的错误提交并增加了一些对拍时间。赛中阻止了几次队友犯智障，比如认为XX题不可做。当然队友也纠正了我几次，例如E读入错写成%d。4:13过完E开始总结这场比赛，当时比较担心被北师和港中大反超，毕竟港中大中期是带榜的。结束后听到港中大队伍被压位题卡了（ICPCCamp恐成最大赢家？）觉得挺可惜的。然后问到被北师踩了，顿时感觉我好菜啊。回去后要进行专项练习了。

**braveTester:** 全程充当读题 +
思(hao)路(wu)提(yong)供(chu)者。自己真的好菜啊...K 一看是
“最优决策的方案数”
直接吓蒙了，根本没看出来其实是做过的题...然后把错误信息扔给队友，以至于该题拖到了后半场才开始。A
题应该认认真真枚举题意的，不应该拖到后面看板刷一片才开始调，不然罚时应该可以省一部分。D
数学太弱没看出 $O(1)$
做法，不过既然唐老师说了约数个数不多的话就直接暴力枚举了。唯一贡献应该算是
C 的博弈凭着印象连蒙带猜写出了公式。后半程想 E
的时候脑子都不知道在想什么，一直在梦游，然后被唐老师一语敲醒。这场总结起来就是
“队友全程带节奏，码力太弱毫无出场机会”。个人短板就是码力太弱，应该多写一些基础题，训练一下一些小问题的套路，比如离散化，筛法，高精度之类的，这样等把大问题拆解成这些问题之后直接就可以上手写了，而不是停留在
“嘴上这题过了” 的境界。回去后开启专项训练，一练码力，二练树分治 + cdq
分治。
