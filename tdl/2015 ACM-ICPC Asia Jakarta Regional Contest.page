A. Arithmetical CAPTCHA \[Constroy\] \[Skywalkert\]
===================================================

1.  人肉枚举所有情况（其实有些情况是等价的）。

2.  DFS 三个符号是什么即可。

B. Udin and Ucok \[Skywalkert\]
===============================

神 tm 找规律，把 SG 值为 0
的位置搞出来，算一下相邻的差，发现后面比较有规律了，差的循环节是
`[4, 4, 12, 4, 4, 10]` ，前面有三个特例 `0, 14, 34` ，不明觉厉。

C. Counting Partition \[Skywalkert\]
====================================

神 tm
输入是空的。现在实现了一个可能会超时的做法，和暴力拍了下胡乱随机的数据没出什么问题。

由限制 3 可知，只有值为 $x$ 的位置才是有用的，不妨设这样的位置有 $m$
个。

由限制 2 可知，对于同一个 $x$ ，只有 $m$ 种本质不同的 $y$
，而且答案应该是 $O(\frac{m}{y})$ 的，这意味着这些 $y$ 对应的答案之和是
$O(m \log m)$ 的，可以记忆化之前的答案避免重算。

限制 1 比较麻烦，目前想到的做法是每次 $O(\log m)$
二分下一个划分点的位置，这样总的复杂度是 $O(n \log^2 n)$
的，但是这个上界只有在 $A_i$ 全部相等时才会达到。

D. An ICPC Problem without Statement \[Constroy\] \[Skywalkert\]
================================================================

给 n 个数 $a \in [-2, +2]$，从中选出若干个使得乘积最大。

xjb 贪心 + 乱搞。基本就是讨论所有情况。

------------------------------------------------------------------------

贪心 + 调整，分正、零、负三种情况，分别构造最大值、任意值、最小值。

优先利用最优数字确定符号，然后根据最优性将构造最值可用的数字尽量添加进去，再尝试用无关紧要的数字单纯地添加进去。

如果数字个数不达标，则尝试将构造最值的数字替换成次优值的数字组合。

如果还是不达标说明这种情况无解。

E. Awesome Cipher Machine \[Skywalkert\]
========================================

简化题意就是构造不超过 40 个物品，物品体积不超过 20000
，物品两两不同，使得凑出体积之和为 $n$ 的方案数模 $m$ 为 $k$ ，其中 $m$
是质数， $n, k$ 均不超过 20000 ，而且 $n \geq 50$ 。

经典的背包问题的一种 inverse
版本，刚好在背包密码体制中有看过如何进行攻击。（233

不考虑 $m$ ，可以考虑使用组合数直接构造方案数为 $k$
的答案，具体来说就是使用不超过 $\frac{n}{2}$ 个体积为 1
的物品，再使用一些体积超过 $\frac{n}{2}$ 的物品。

假设使用了 $p (2 p \leq n)$ 个 1 ，对于任意
$i = 0, 1, \cdots, \left\lfloor\frac{p}{2}\right\rfloor$ 使用了 $c_i$
个体积为 $n - i$ 的物品，则凑出体积之和为 $n$ 的方案数为
$\sum_{i = 0}^{\left\lfloor\frac{p}{2}\right\rfloor}{c_i \binom{p}{i}}$
，而物品数是
$p + \sum_{i = 0}^{\left\lfloor\frac{p}{2}\right\rfloor}{c_i}$ 。

可以猜测和发现所需的物品数在 $n \leq 20000$ 时是关于 $p$ 单谷的，在
$p = 14$ 时取到最小值，所需物品数不超过 36
，可以用完全背包验证这个结论，并且得到具体的构造方案。

其实发现每个 $n$ 有最好的 $p$ 时 $(p = O(\log n))$
，只要稍微改改就可以处理 $n < 50$ 的情况了，因此有一个
$O((n + k) \log n)$ 的在线做法。

F. Problem on Group Trip \[Constroy\] \[Skywalkert\]
====================================================

有 n 个人，3 个房间。每个人要依次使用 3
个房间，并在房间花费一定时间。房间一时刻只能被一个人使用。其余人在外面等待，序号小的优先。求总的时间。

用优先队列维护排队，模拟以下即可。

G. Dungeon Trap \[Skywalkert\]
==============================

考虑最终答案退一步的情况，如果不是一条路径，则可以变成一条路径。

所以答案是一条路径上去掉一个最大值，令 $f(i, j)$ 表示从 $A$ 到 $i$
的路径里点权最大值为 $j$ 的最小点权和，跑一下最短路就可以了。

H. Harvest Season \[Skywalkert\]
================================

苹果的纵坐标贡献可以直接算，然后转化为数轴上的问题。

显然最优解是排序后每一个机器接至多一段区间的苹果，考虑一段区间里的苹果被某个机器接的最小代价，可以把苹果和机器视作数轴上的点（复制
$A$ 遍或复制 $B$
遍），求一个点到所有点的曼哈顿距离最小，即带权的中位数。

那么可以令 $f(i, j)$ 表示前 $i$ 个机器接前 $j$
个苹果的最小代价，根据机器插入苹果序列中的位置讨论一下即可 $O(m)$
转移，总时间复杂度为 $O(nm^2)$ 。

I. National Disaster \[Skywalkert\]
===================================

将二元组按距离排序，统计下前缀 1 的个数，枚举答案即可。

J. Alien Abduction 3 \[Skywalkert\]
===================================

对于询问的两个串，分别构建一个非确定有穷状态机接受该串和该串的所有突变串，问题转化为找到一个最短且字典序最小的串能被这两个自动机接受。

每个串长度不超过 20 ，它可能有 210 种子串，每个子串可以替换成至多 4
种长度不超过 20 的字符串，那么自动机的结点数至多为
$21+210 \times 4 \times 19 =15981$ ，边数同阶。

定义二元状态 $f(i, j)$ 表示是否存在字符串能在第一个自动机上被识别到状态
$i$ 且在第二个自动机上被识别到状态 $j$ （不允许失配），初始
$f(\text{start}, \text{start}) = \text{true}$ 。

通过 BFS 可以依次求出长度为 $n$
的字符串能到达的状态，并求出每个状态对应的最优解是从哪个状态走哪种扩展(字符)到达的，从
$f(\text{end}, \text{end})$ 逆推回去即可得到答案。

具体来说，需要保证 BFS 扩展时按照字典序从长度为 $n-1$ 的状态扩展出长度为
$n$ 的状态，所以需要按照字典序枚举从长度为 $n-1$
的状态（可能存在状态对应的字符串相同），一系列等价的状态再按照字典序枚举可能的扩展。

注意到需要找出所有等价的状态，这些状态在 BFS
序列中连续，只需要在扩展时维护出等价类即可。

由于替换的数量很少，最优解若存在也不会太长，~~以及数据不好造~~，所以这个做法运行起来还是挺快的。

K. Amplified Energy \[Skywalkert\]
==================================

区间乘积最大即取 log 后区间和最大，考虑怎么求最大子段和就行。

对于 $k$ 个元素的选择，肯定是优先选择大的进行替换，可以先排个序。

尺取法是不适用的，因为 $[L, R]$ 的解既不关于 $L$ 单峰也不关于 $R$
单峰，需要考虑 DP 。

定义 $f(i, j)$ 表示以原序列第 $i$ 个位置作为区间右端点，使用了 $j$
次替换能得到的最优解，分别考虑左端点是否小于 $i$ 、第 $i$ 个位置是否用第
$j$ 大的元素替换这么四种情况，记录一下转移即可。

L. Summation and Divisor \[Skywalkert\]
=======================================

随便搞一组解出来，考虑其他解与这组解的差，肯定能表示成每一个序列里的数与对应数字做差的值的
01 线性组合，用所有可能的差值去和这组解求最大公约数即可。

Summary
=======

**Constroy:**

**Skywalkert:** 这套题真是非常~~丧病~~良心啊！感觉自己好棒棒啊，各种 sb
错误犯一犯，尤其是卡 G 简直没眼看啊！弱者为何要战斗啊！
