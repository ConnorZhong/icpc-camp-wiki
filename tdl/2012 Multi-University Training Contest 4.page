A. Image Recognition \[Skywalkert\] \[braveTester\]
===================================================

预处理一个点向四个方向延伸的最大长度，考虑枚举正方形的一个对角线上的两个点，可以发现二者之间满足区间交关系，枚举对角线和右端点，利用树状数组维护左端点即可。时间复杂度$O(n^2 \log n)$。

B. Constructing Chimney \[braveTester\]
=======================================

十分自然的想到状压 DP
搞出转移矩阵之后，用矩阵快速幂加速。考虑一层一层的铺设砖块，由于砖块的高度至多为
2，因此可以用长度为 8 的 01
串来表示由于下一层一些砖块竖着放导致当前层哪些位置不能放。可以枚举当前层的禁位状态，然后
DFS
出在铺满当前层的情况下下一层的所有可能禁位状态，但是由此得到的状态过多，有
256 种。注意到其实有很多状态是从什么都不放不能转移到的，因此用
BFS/DFS/Floyd 处理出可能的状态发现只有 80
左右，然后矩阵快速幂就妥妥的了。复杂度 $O((2^8)^2 + 80^3 \log N)$。

C. Revolving Digits \[braveTester\] \[Skywalkert\]
==================================================

KMP
的核心思想是**已经匹配过的部分的全部信息都蕴含在模板串之中。**根据类似思想，令
g\[i\] 和 l\[i\] 分别表示如果在 i + 1 失配的话，从 i 跳到 P\[i\]
的过程中，有多少个数比原数大/小。这两个数组可在递推 P 数组（也就是 next
数组，P 根据 matrix67 的版本而来）的同时算出。根据 P
的递推过程，知道是从 P\[i\] 来推 P\[i + 1\]，也就是说，如果在 i + 2
位置失配的话，i 首先要变成 P\[i\] 才能满足 str\[1...P\[i\]\] 为
str\[1...i\] 的后缀，根据 g、l 的定义，g\[i\]/l\[i\] 对于 g\[i +
1\]/l\[i + 1\] 有贡献。剩下的部分只需要根据 P
的递推过程做相应修改即可。为防止说明不清，这里附上代码（字符串下标从 1
开始）：

``` {.cpp .numberLines}
int i, j;
for(i = 2, j = 0;i <= N;i += 1)
{
    g[i] = g[i - 1];
    l[i] = l[i - 1];
    while(j && str[j + 1] != str[i])
    {
        if(str[j + 1] > str[i])
            l[i] += 1;
        else
            g[i] += 1;
        g[i] += g[j];
        l[i] += l[j];
        j = P[j];
    }
    if(str[j + 1] == str[i])
        j += 1;
    else
    {
        if(str[j + 1] > str[i])
            l[i] += 1;
        else
            g[i] += 1;
    }
    P[i] = j;
}
```

做完上述步骤之后还有一个遗留的小问题，即去除重复。根据字符串理论，如果存在
$y$ 满足 $y \neq \epsilon, y \neq x, yx \leq_{pref} x^2$，那么 $x$
就是某个串的非平凡幂。因此如果有重复，必然有循环节，所以只要找到最小循环节然后最终答案分别除以频率（即一个字符串有几个最小循环节）即可。时间复杂度
$O(len)$。

网上的另一种做法是直接套用扩展 KMP
的模板，然后比较第一个不同的末尾统计，或许思路更加自然。但上述做法或许更加原生态？

------------------------------------------------------------------------

[Z Algorithm](http://www.csie.ntnu.edu.tw/~u91029/StringMatching.html#6)
做法：定义$z[i]$是满足$str[0..k-1] = str[i..i+k-1]$的最大$k$，可以使用类似
manacher 的技巧线性求出。将原串复制一遍，求出前一半的 Z
数组，比较答案即可。对于题目要求的**不同**数字个数，可以考虑有多少个循环串与其相等，因为每个循环串的出现次数都是这个相等的次数。

D. Trouble \[Constroy\]
=======================

E. What is N? \[Skywalkert\]
============================

当$n \geq \varphi(P)$时，指数可以直接看作$\varphi(P)$，因此将$n$分为两部分考虑。

对于$n < \varphi(P)$的情况，维护$n!(mod\,\varphi(P))$，利用快速幂计算$n^{n!}$，如果等于$b$则加1。

对于$n \geq \varphi(P)$的情况，枚举$n\,mod\,P$，利用快速幂计算$n^{n!}$，如果等于$b$则加$\frac{M - low}{p} + 1$，其中$low$为与$n$模$P$同余且还没考虑过的最小正整数。

其实只要知道$a^b \equiv a^{{b\,mod\,\varphi(P)} + \varphi(P)}(mod\,P)$即可，上述两个过程可以放在一起求，注意答案可能是$2^{64}$。时间复杂度$O(P \log P)$。

F. Card Collector \[Skywalkert\]
================================

状压dp。设$dp[s]$表示从状态$s$走到终态的期望步数，则有$dp[s] = \sum_{i}{p_i \cdot dp[s | 2^i]} + 1$，消一下右边的$dp[s]$即可。时间复杂度$O(n 2^n)$。

G. King Arthur's Knights \[Skywalkert\]
=======================================

稠密图中搜索哈密顿回路，由于数据水，加不加剪枝都可以过这道题。

H. Simple Path
==============

**braveTester** 嘴巴题解：

点双联通缩点后和割点建图。然后在得到的森林上跑
LCA，找到路径上的点数和减去边数（割点重复计算之故），再用总点数减去该值即为答案。注意如果起点终点是割点的话，也必须从树上的割点出发，而不是随便找个边双联通分量。

下面来证明上面的做法为什么是对的。显然起点终点在森林路径外的点不可能到达。现在需要证明，路径上的任意双联通分量中的点都可达。显然，由于树上路径唯一，因此进出双联通分量的点是固定的，并且不是同一个点（起点如果在双联通分量中则算作一个进点，同理终点算出点。）。现在问题转化对于双联通分量
$B$ 中的任意非出入点 $c$，是否存在一条以 $s$ 始，以 $t$ 终的简单路径经过
$c$？证明如下。

设以 $c$ 为根的 $B$ 的生成树为 $T$。如果 $s$ 和 $t$ 分属 $c$
的不同子树，则显然存在。如果在同一子树中，则如图所示。其中 $p_1$
不为空，$p_2$ 和 $p_3$ 不同时为空。由点双性质，必定存在一条路径
$p_4$，与 $p_1 + p_2$ 不内部相交。如果 $p_3$ 与 $p_4$ 不内部相交，则
$p_4 + p_1 + p_3$ 满足要求；否则设在 $p_3$ 上最深的交点为
$w$（该点肯定不为图中分叉点。），则可以 $w$ 为剪切点，将 $p_4$ 和 $p_3$
修剪成一条 $c$ 到 $t$ 的路径 $p_6$。注意到 $p_6$ 与 $p_1 + p_2$
内部不交，因此 $p_6 + p_1 + p_2$ 满足要求。证毕。

![D 的证明](/ProofOfD.jpg)

I. Query \[Skywalkert\]
=======================

令$f_i = [s1[i] == s2[i]]$，只需要维护$f_i$和查询$f$从某个下标$i$开始的连续1个数即可，为了便于查询后者，可以先算出$\sum_{j < i}{f_j}$，再进行树上二分。时间复杂度$O((|S| + q) \log |S|)$。
