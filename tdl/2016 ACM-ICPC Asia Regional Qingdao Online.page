A. I Count Two Three \[braveTester\]
====================================

B. Cure \[Skywalkert\]
======================

$\sum_{i = 1}^{\infty}{\frac{1}{i^2}} = \frac{\pi^2}{6}$，答案保留5位小数，发现$n \geq 10^6$差不多误差就在$5 \cdot 10^{-6}$以下了，于是预处理小的情况，特判大的情况。

C. Family View \[Skywalkert\]
=============================

将模式串组成一个Trie，组建AC自动机记录每个点的失配和最长匹配长度，对文本串进行匹配，匹配上则是一段区间加1，这个可以在差分序列上进行，最后求前缀和得到每个位置被覆盖的次数。

这个题主要是卡复杂度，不能有关于字符集大小（26）的枚举，也不能开字符集大小的后继链接，考虑用hash完成对边的映射，边上记录对应添加的字符，则可以做到节点数相关的枚举，空间也是和节点数相关的了。这里hash可能需要开一个较大的数组进行散列，为了避免每组数据对其进行清空，可能使用相同大小的空间标记更新时间。

D. Tea
======

E. Balanced Game \[Constroy\]
=============================

n种招式的石头剪刀布游戏是否公平。n为奇数公平，偶数不公平。

F. The Best Path \[Constroy\]
=============================

在一个无向图图上找出欧拉路径，按路径经过的顺序将点权异或求和，求最大异或和。如果不存在欧拉路径，输出Impossible。

如果没有欧拉回路，那么答案就是欧拉路径上点出现的次数（度数 / 2
上取整）。

如果有欧拉回路，那么起点的会多经过一次，枚举起点，贪心答案。

G. Sort \[Skywalkert\]
======================

主观意识流认为分叉越多，哈夫曼树的代价越小，这大概是因为叶节点离树根更近。

二分答案$k$，利用两个有序表模拟合并过程，初始第一个表为所有元素，第二个表为空，每次合并的结果放到第二个表，合并则是从两个表的表头选元素，这样即可做到线性模拟。

注意当$n - 1$不是$k - 1$的倍数时，第一次合并可能是不足$k$个元素才最优，可以补一些0在有序表的前面。

H. XM Reserves
==============

I. Tower Defence \[Skywalkert\]
===============================

主要思想是每个点记录前三长的来自不同分支的链长，因为直径可能是删去一个连通块之后的最长链加次长链。

第一遍搜索出子树的前三长情况，第二遍搜索出整棵树的前二长情况，过程中维护每棵子树的直径，以及每棵子树之外的直径，最后取最值累加答案即可。

J. Herbs Gathering \[Constroy\]
===============================

一个经典的01背包问题，$n \le 100$，其余的数字都是$[0, 10^9]$内的均匀分布的随机数。

将物品按性价比从大到小排序，然后搜索，如果剩下物品全选都不比当前解更优，则剪枝（可以先把代价为0的物品挑出来，并且把价值为0的去掉）。
这个算法一直TLE。

赛后加上部分背包的最优性剪枝就秒过了T\_T

K. Barricade \[Constroy\]
=========================

给定一个无向图，边长为1，权值为w。选取边权和最小的边集，使得n到1的最短路至少经过边集中的一条。

BFS最短路 + 有源最小割

一开始用SAP超时了（大概因为这是个分层图？），后来用裸E-K过了。

L. Eighty seven
===============

M. String
=========
