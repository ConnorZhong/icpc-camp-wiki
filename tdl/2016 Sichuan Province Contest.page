A. Nearest Neighbor Search \[Constroy\]
=======================================

基础空间几何，分情况讨论。

B. Odd Discount \[Skywalkert\]
==============================

取巧做法：枚举一对价值，计算其对答案的贡献，发现和物品的状态有关，交换求和顺序后得到答案为$\sum_{i = 1}^{m}{c_i \cdot (2^{n - 1}\sum_{mask_i = mask_j}{c_j} + 2^{n - 2}\sum_{mask_i \neq mask_j}{c_j})}$。

------------------------------------------------------------------------

正常做法：设$f(i, s, t, r)$表示当前已经确定了前$i$位的取值为$s$，那些后$n - i$位是$t$的条件（不一定是所有条件）在选的物品对应的奇偶性为$r$的情况时产生的收益值。

初始状态$s$为空，$t$恰好将相同的状态合在一起，$r$为0。

考虑第$i$个物品，它的决策总可以可以将两堆条件合并到同一个$s$中，只是$r$可能不同。

如果不选第$i$个物品，则$s$对应位为0，$r$不变；如果选第$i$个物品，则$s$对应位为1，$r$根据原来的$t$对应为是否有1来确定是不是要变化。

到最后将完全确定选取的物品状态为$s$时，所有的条件对这种物品状态产生的收益值，此时随手算一下答案就可以了。

C. Eight Queens \[Skywalkert\]
==============================

考虑每个格子对答案的贡献，即这个格子在多少种方案中被至少一个皇后 cover
，它的反面是好算的，即这个格子能 cover 的位置都没有皇后。

设 $f(i, j)$ 表示 $(i, j)$ 能 cover
到的格子数量，随手解一下不等式可以得到
$f(i, j) = n + m - 1 + \sum_{x \in \{i - 1, n - i\}} \sum_{y \in \{j - 1, m - j\}} \min(x, y)$
。

设 $g(s)$ 表示 $f(i, j) = s$ 的数量，答案即为
$\sum_{1 \leq i \leq n, 1 \leq j \leq m} {\binom{n m}{k} - \binom{n m - f(i, j)}{k}} = n m \binom{n m}{k} - \sum_{s} {g(s) \binom{n m - s}{k}}$
。

定义 $g(s)$ 主要是因为相邻的 $f(i, j)$
差别不会很大，可以画个图看出些端倪（以下设 $n \leq m$ ）：

![examples](/2016-Sichuan-C.png)

在虚线两边的格子至少存在一个 $\min(x, y)$
取值来自不同的变量，由此可以划分出很多区域，区域形状发生变化的地方是
$n = m$ 和 $2 n = m$ 。

当 $n - 1$ 为偶数时 $i - 1$ 和 $n - i$ 奇偶性相同，其他变量也同理，这对
$f(i, j)$ 也产生了许多影响（导致某些情况被划分到不同的状态里）。

但是对于两组输入 $n, m, k (n \leq m, 1 \leq k \leq n m)$ 和
$n', m', k (n' \leq m', 1 \leq k \leq n' m')$ ，如果 $n$ 与 $n'$
同奇偶性， $m$ 与 $m'$ 同奇偶性， $2 n < m$ 与 $2 n' < m'$
同时成立或同时不成立，则它们的解有相同的形式，这里可以直接分情况用有限和分计算了，但是计算量好像有点大。

对 $n = m$ 的情况进行观察，可以发现答案关于 $n$ 的函数进行 $2 k + 1$
次差分即可得到常数，因此可以猜测答案是关于 $n, m$ 的 $k + 1$
次表达式，根据上述 $O(n m)$
的做法找出小数据的答案进行高斯消元，从而求得系数。

求系数过程中发现有些情况还是比较难找到所有的线性基，而且答案也不仅仅是
$k + 1$ 次的，不过这个题可以本地乱搞，经测试拿出最小的 500
组解去消元是可以得到答案的。

D. Longest Common Subsequence \[Skywalkert\]
============================================

设$f(i, j)$表示$B$的前$i$段与$A$的前$j$个位置产生的最长公共子序列长度，考虑$f(i, j)$与$f(i - 1, j')$的关系，枚举$j'$，计算有序序列$[A_{j'}, A_{j' + 1}, \cdots, A_j]$与无序集合$\{B_{i,1}, B_{i, 2}, \cdots, B_{i, k_i}\}$的匹配序列长度，注意对于每个$v$，能匹配上$B_{i, t} = v$的$A_{t'}$个数是有限的，只需要记录尽量靠后的那些位置，而且只有从这些位置（当作$j'$）开始匹配的区段才可能是最优解，因此对于每个$j$所需要枚举$j'$个数是不超过$k_i$的，用$l$个链表来维护所有可能的决策点，暴力即可。

E. Coins \[braveTester\]
========================

由于面值只有 $1$，$2$ 和 $3$，因此考虑如何手算背包。

首先考虑有面值为 $1$ 的情况，则有一定可以有 $1, 2, \cdots, a_1$。无论
$a_2$ 是否为 $0$，均可以有 $1, 2, \cdots, a_1 + 2 \times a_2$。如果
$a_1 + 2 \times a_2 \ge 2$ 的话，那么 $3k$ 到 $3k + 3$
的面值便可以无缝拼接，也就是说可以有
$1, 2, \cdots, a_1 + 2 \times a_2 + 3 \times a_3$。如果不然，也就是
$a_1 + 2 \times a_2 \le 2$，由于假设有面值为 $1$，因此必有
$a_2 = 0$，不难得出此时答案为
$1, 3, 4, \cdots, 3 \times a_3, 3\times a_3 + 1$，总计
$2 \times a_3 + 1$ 个。

现在考虑没有面值为 $1$ 的情况。首先有
$2, 4, \cdots, 2 \times a_2$。假设没有面值为 $3$ 的，则答案为
$a_2$。考虑有至少一个 $3$。假设没有 $2$，则答案为 $a_3$。假设至少有 1 个
$2$，则有
$2, 3, 4, 5, \cdots, 2 \times a_2, 2 \times a_2 + 1, 2\times a_2 + 3$。注意到只有一个空位
$2 \times a_2 + 2$。如果 $2 \times a_2 - 1 \ge 2$，即
$a_2 \ge 2$，则该空位会被下一个 $3$ 所引入的新方案填补，构成
$2, \cdots, 2 \times a_2 + 2, 2\times a_2 + 3, 2\times a_2 + 4, 2\times a_2 + 6$。可以想见更多的
$3$ 不会对最终构成的方案形式造成影响，因此答案为
$2 \times a_2 + 3\times a_3 - 1 - 1$。如果 $a_2 = 1$，易得答案为
$2 \times a_3 + 1$。

按照上述几种情况分类讨论即可。

F. Floyd-Warshall \[Constroy\]
==============================

一棵树上多了100条边，先建一棵树。两点的最短路要么只走树边，要么经过至少一条非树边。树上的最短路直接LCA。非树边上有200个关键点，bfs把每个关键点的最短路预处理出来，查询的时候枚举经过的关键点即可。

G. Road History \[Skywalkert\]
==============================

对于二分图，奇数长度路径的端点必然在不同的点集中。

对于非二分图，存在奇环使得任意一条路径可以多走这个环而改变路径长度的奇偶性，从而任意两点间存在奇数长度路径。

利用带权并查集维护二分图和非二分图的点集大小即可。

H. Around the World \[Skywalkert\]
==================================

由于任意两点间的路径必须经过"树边"，所以实际上是可以给边定向的，对于有$2k$条边直接相连的点对，分别选出$k$条边指向其中一个点即可。

有向图欧拉回路的数量可以使用`BEST Theorem`计算，需要得到以某个点$u$为根的树形子图数量$t_u(G)$，和每个点$v$的入度$deg(v)$，则相应的欧拉回路数量为$t_1(G) \prod_{i = 1}^{n}{(deg(i) - 1)!}$。

由于图很特殊，树型图的数量可以直接计算，所以$t_1(G) = \prod_{i = 1}^{n - 1}{c_i}$，注意我们是求1号点出发的欧拉回路，所以还需要乘以$deg(1)$。

I. Longest Increasing Subsequence \[Skywalkert\]
================================================

枚举$n$的排列$p_1, p_2, \cdots, p_n$，使得$x_{p_{i - 1}} \leq x_{p_i}$，同时枚举哪些位置是取等号哪些是不取等号，为了不算重，这样的位置可以限制有$p_{i - 1} < p_i$。

对于这样的排列，可以直接根据大小关系求出LIS的长度，再用$f(i, j)$表示考虑排列前$i$个位置的情况下第$i$个位置的取值是$j$的方案数，转移时根据能否取等来确定是否需要用前缀和转移。

J. Matrix Transformation \[Skywalkert\]
=======================================

考虑每次产生变化的两个矩形，实际上产生链接变化的只有它们的边沿，是$O(n)$个位置，利用十字链表把它们快速地拆开、连上即可。
