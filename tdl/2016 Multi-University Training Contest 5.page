A. ATM Mechine \[Skywalkert\]
=============================

鹰蛋问题模型，令$f[i][j]$表示用不超过$i$次失误来测试$[0,j]$每个数的最优决策的代价之和，则答案为$\frac{f[W][K]}{K+1}$，考虑代价的期望模型，即选择一个最优的$k$使得$f[i][k-1]$和$f[i-1][j-k]$尽量小，所以有$f[i][j] = \min_{k = 1} ^ {j} {f[i][k - 1] + f[i - 1][j - k]} + (j + 1)$，不难发现决策的单调性，因此可以$O(KW)$求解。

注意到$2^W > K$时很多失误是不会用上的，所以$W = \min(W, \log_2 K)$，因此时间复杂度可以做到$O(K \log K)$，当然鹰蛋问题还有更快的做法。

B. Cycle \[Skywalkert\]
=======================

令 $f_i$ 表示第一个串从第 $i$ 位开始匹配第二个串的最大前缀长度， $g_i$
表示第二个串从第 $i$ 位开始匹配第二个串的最大前缀长度。(0-based)

$f, g$ 可以用`Z Algorithm`在线性的复杂度下轻松算出。

显然一个合法的拼接满足 $f_i \geq j, g_j \geq i$ ，拼接得到的前缀长度为
$i + j$ 。

考虑以某种顺序枚举 $i$ ，此时有 $j \leq f_i, g_j \geq i$
，如果能得到满足条件的 $j$ 集合 $S$ ，则对答案的贡献是 $S \text{<<} i$
。

所以做法就是预处理 $T_i = T_{i - 1} \text{<<} 1 \text{|} 1$ ，降序枚举
$i$ ，利用`two pointer`维护 $g_j \geq i$ 的集合，而 $j \leq f_i$
本质上就是 $S \text{&} T_{f_i}$ 这样一个加掩码的操作。

时间复杂度 $O(\frac{n^2}{w})$ ，其中 $w$ 是计算机的位长。

C. Divide the Sequence \[Constroy\]
===================================

由于任意前缀和不为负，所以负前缀和必须向前延伸到非负为止，题目保证有解，贪心就好。

D. How Many Triangles \[Constroy\]
==================================

求有多少个锐角三角形，统计锐角个数A，直角和钝角个数B，答案就是(A - 2 \*
B) / 3。

求角的个数先极角排序，然后two
pointer推一下，用二分会被卡常数。注意极角相等的情况。

E. Interesting \[Skywalkert\]
=============================

题目中所求的$i$与$k$互不影响，只需要对于每个$j$算出$pre_j = \sum_{s[i..j]\,is\,palindrome}{i}$和$suf_j = \sum_{s[j..k]\,is\,palindrome}{k}$，则答案为$\sum {pre_j \cdot suf_{j + 1}}$。

对于一个回文串$s[j..j']$，设它的对称轴是$i$，则有$j + j' = 2 i$，因此固定$j$，求$\sum{j'}$可以通过计算$\sum{2 i - j}$得到，因此需要维护中轴$i$的和与数量，由于求和跟查询不是同时进行的，所以这一部分的复杂度可以做到线性。

求出每个极大回文子串只需要manacher就可以了。时间复杂度$O(n)$。

F. Interval
===========

G. K-wolf Number \[Constroy\]
=============================

求小于等于x的任意连续K位数字不相同的数的个数。状压 +
数位dp，f\[i\]\[j\]\[0/1\]表示做到第i位前K -
1位数构成的状态是j，之前小于/等于x的方案数。

一开始没想清楚前导零的情况，调了好久。后来用了11进制的状压（10表示没放数字）就对了。

H. Level Up \[constroy\]
========================

一棵树上每个点有个能力值，每个点的得分是以它为根的子树的能力值中位数。把某一个点的能力值提升到能力值上界，使得所有点得分和最大。

提升一个点的能力值只会影响它以及它的所有祖先。当且仅当它原来的值小于等于某个点的中位数，得分会变成中位数的下一个数。

用某种数据结构（treap）维护某个子树的能力值，DFS 启发式合并，kth
找出中位数和下一个数。

第二遍
DFS，用树状数组维护当前路径上中位数大于等于某个值的得分增量，对每个点提升取增量最大值。

I. Permutation
==============

J. Prefix \[Skywalkert\]
========================

考虑将所有串插入一棵Trie树中，每个前缀都能得到唯一的Hash值——它在树中的标号，询问第$L$个串到第$R$个串里有多少个不同的前缀可以转化为询问一段区间里有多少个不同的数字。

对于每个位置$i$的数字，求出在这个位置之前与它出现相同数字的前一个位置$pre_i$，由于一段区间$[L,R]$里本质不同的数字个数等于这段区间里$pre_i < L$的个数，个数满足区间减法，所以可以维护$n$棵可持久化线段树，每棵线段树维护下标在$[0,\sum{|S|})$的位置，第$k$个位置表示$pre_i = k$的个数，每次插入最多影响$O(\log \sum{|S|})$个节点，所以时间复杂度是$O((\sum{|S|} + Q) \log \sum{|S|})$。

K. Two \[Skywalkert\]
=====================

令$f[i][j]$表示以$A$序列第$i$位结尾且以$B$序列第$j$位结尾的公共子序列个数，则当$A[i]=B[j]$时$f[i][j] = \sum_{x < i, y < j} {f[x][y]}$，维护一个二维前缀和即可。时间复杂度$O(NM)$。

L. World is Exploding \[Skywalkert\]
====================================

算反面，用任意的减去不合法的，最终可以发现答案等于$\sum_{1 \leq i < j \leq n}{[A_i < A_j]}\cdot \sum_{1 \leq i < j \leq n}{[A_i > A_j]} - \sum_{i}{(\sum_{1 \leq j < i}{[A_j < A_i]} + \sum_{i < j \leq n}{[A_i < A_j]})\cdot (\sum_{1 \leq j < i}{[A_j > A_i]} + \sum_{i < j \leq n}{[A_i > A_j]})}$，拿树状数组维护一下即可。时间复杂度$O(n \log n)$。
