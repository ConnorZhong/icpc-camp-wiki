A. Mike and Friends \[Skywalkert\]
==================================

离线处理，每个询问其实是后缀排序后一段区间内字符串的标号个数，处理出询问区间后排序枚举右端点即可。

B. Random walks in Thailand \[braveTester\]
===========================================

注意到执行什么决策只跟在哪个点有关，而与历史无关。因为只要坐飞机，历史就没有意义，因此在坐飞机之前的任意坐船都是不明智的。所以最优解一定是先做若干趟飞机，直到到达某个集合
$A$ 中的点时选择坐船到终点。假设 $A$ 已经确定，可以凭直觉列出期望方程:

$$
E[i] = 
\begin{cases}
Distance(i, N) &, i \in A\\
K + \frac{1}{N} \Sigma_{j = 1}^{N}{E[j]} &, i \notin A
\end{cases}
$$

由于坐飞机的点互相等价，因此期望相同，

$$
E[i] = K + \frac{1}{N} (\Sigma_{j \in A}{E[j]} + (N - |A|) * E[i]) = \frac{N * K + \Sigma_{j \in A}{E[j]}}{|A|}, i \notin A
$$

如果 $A$ 的大小确定的话，由上述公式可以发现，$\Sigma_{j \in A}{E[j]}$
越小越好，贪心可得 $A$
固定大小下的最优解。注意到权值都是正的，因此可以用 Dijkstra
跑一边终点到其他任意点的最短路（SPFA
被卡了=\_=），按照元素个数从少到多枚举
$A$，代入公式得到答案，最后所有答案取最小即可。复杂度
$O(N + (N + M) \log N)$。

C. Fighting the Rajasi \[braveTester\]
======================================

顺序不定比较麻烦，得想办法把序定下来。显然先把满足 $x[i] <= y[i]$ 的 $i$
放前面，然后对于这类 $i$，按 $x$
从小到大排序，顺着做一遍，不行说明必须用到符咒（spell）。如果符咒变成负的，说明没解，否则考虑
$x[i] > y[i]$ 的那类 i。不考虑符咒，令 $H[i...j]$ 表示要打倒 $[i, j]$
这一段最少需要的 $H$，同时令 $left[i...j]$ 表示至少会剩下多少 $H$。显然
$H[i...k] = H[i...j] + max(0, H[j + 1...k] - left[i...j])$，特别的，有
$H[1...N] = H[1...i - 1] + max(0, H[i...N] - left[1...i - 1])$。考虑相邻的两项
$i$ 和 $i + 1$ 对 $H[1...N]$ 的影响，显然这两项的顺序只会影响
$H[i...N]$。

1.  $i$ 在前：
    $H[i...N] > x[i], H[i...N] - x[i] + y[i] > x[i + 1], H[i...N] \geq H[i + 2...N]$。第二项等价于
    $H[i...N] > x[i] + x[i + 1] - y[i]$。
2.  $i + 1$ 在前：
    $H[i...N] > x[i + 1], H[i...N] - x[i + 1] + y[i + 1] > x[i], H[i...N] \geq H[i + 2...N]$。第二项等价于
    $H[i...N] > x[i] + x[i + 1] - y[i + 1]$。

由于假设 $x[i] > y[i]$，因此 1. 的第二项大于 2. 第一项，2. 的第二项大于
1. 的第一项，所以只要比较 $x[i] + x[i + 1] - y[i]$ 和
$x[i] + x[i + 1] - y[i + 1]$ 的大小就能知道两种情况下 $H[i...N]$
哪个更小。可以发现，$y[i]$ 越大 $H[i...N]$ 越小，也就是说，如果相邻两项
$y[i] < y[i + 1]$，那么交换他们答案不会变的更差。因此最优解的形式一定是按
$y$ 从大到小排列的。剩下的只要简单 DP 即可。复杂度 $O(N \log N + N ^ 2)$

看数据范围 $\Sigma N$ 有 $2 * 10^4$ 吓哭了，结果仔细一看发现有
$N \leq 2 * 10 ^ 3$，仔细算算发现可以过，交了测完发现只有
140ms，\[黑人问号.jpg\]

D. Pudding Monsters
===================

E. Find the Border
==================

F. Monster Trap
===============

G. Removing coins in Kem Kadrãn \[braveTester\]
===============================================

如果有可行解，那么每个点都会被拿走。考虑左端点，如果是 'B'
那么必须等它右边的点拿完它才能拿，如果是 'D'
那么必须比它右边的点先拿，又它只会影响右边的点，于是显然可以第一个拿。用一个栈维护，递推即可。

H. Hillan and the girl \[Skywalkert\]
=====================================

逗你玩系列题目，正常推导思考一下就知道答案是$n \cdot m - \sum_{d} {\left\lfloor\frac{n}{d}\right\rfloor\left\lfloor\frac{m}{d}\right\rfloor\mu(d)}$。

I. Por Costel and the Censorship Committee \[Constroy\]
=======================================================

可以用后缀数组搞出所有需要屏蔽的区间（更好的方法是AC自动机）。把区间按右端点升序排列，现在要用一些点依次支配每一个区间。

设f\[i\]\[j\]表示支配第i个区间用了点j（点j的取值区间大小只有200）。决策是要么用i
- 1的点j，要么新放一个点j。

J. New Year Garland \[Skywalkert\]
==================================

利用第二类斯特林数进行集合划分的计数即可。

K. New Year Snowflake \[Constroy\]
==================================

显然当且仅当新加入的点数k等于原来点数n时，对称中心有无穷多个。

对于一个对称的点集，将它按坐标双关键字排序，第i个点一定会对称到第n - i -
1个点。

所以只要知道了对称点集的第一个点和最后一个点，就确定了对称中心，就可以check剩下的点不对称的有几个。

这个check可以用一个类似two
pointer来做，因为点坐标是单调的，那么对称中心（两个点的和的一半）也是单调的。

如果左右端点的对称中心小于了之前确定的对称中心，那么左端点是不对称的。大于则右端点是不对称的。等于就配对成功了。

所以可以暴力枚举这个点集的的首尾位置，然后check总的不对称点数是否不超过K。

由于不对称的点数不超过k个，所以首尾位置总共有$O(k^2)$种。

L. 2D Geometry 110 in 1! \[braveTester\]
========================================

训练指南原题。说白了就是 6 个题...最终写了 300 行...orz...

求两圆交点用了高中方法。两圆相减出过交点的直线，然后转化为一条直线与圆的交点问题。直线与圆相交的话先求出圆心到直线的垂足，然后勾股定理算垂足到两交点的距离，最后从垂足按照方向向量往两个方向移动求出的距离即可得到交点。
