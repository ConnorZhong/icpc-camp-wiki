A. Adjustment Office \[braveTester\]
====================================

B. Binary vs Decimal
====================

任何$10^k$都是合法的，从这个方面考虑，答案其实很多，所以答案很小，bfs
过程中用 bitset 维护二进制，bfs
出一定长度的所有合法解后排序得到所需答案即可。

C. Cactus Jubilee
=================

只有两种情况，删桥边和删环上的边。

case 1 : select a bridge then

ans += (left vertex count) \* (right vertex count) - 1

case 2 : select an edge in a circle then

let the sum of each bridge block C(vertex - 1, 2)

tmp = sum - {C(vertex - 1, 2) | bridge block is neighbor of circle} +
C({vertex | bridge block is neighbor of circle or circle self} - 1, 2)

ans += tmp \* (vertex in circle)

所以需要维护的只有每个桥左右两边的点数，每个环的点数，只由桥边组成的每个连通块（桥块）的点数，每个环邻接的桥块关系。这些内容可以在一遍
dfs 给环标号和求桥两边点数后，再给每个桥块标号和向环连边来完成。

D. Distance on Triangulation
============================

类似点分治，找到一个最好的三角形，使得抠掉这个三角形上的三个点后剩下的连通块最大点数最小。

抠掉这三个点后可以将最短路划分为需要跨越这三个点的情况与不跨越的，处理出这样的结构后分治处理询问即可。

E. Easy Problemset \[Constroy\]
===============================

F. Froggy Ford \[Constroy\]
===========================

G. Generators \[Constroy\]
==========================

H. Hypercube
============

判定三维空间里通过 7 个面相连的 8 个立方体是不是一个 4D
超立方体的展开图。

3D 几何的做法就是通过搜索给每个顶点确定一个四维坐标，并且满足一些限制。

4D 几何不会。

I. Iceberg Orders
=================

对于新增卖订单情况，直接暴力买订单即可。

对于新增买订单情况，注意到输出 Log 不超过 $10^5$
条，所以直接暴力确定哪些卖订单要产生交易即可。

先枚举同样价格的卖订单是否都要产生交易，不是的话就可以停止了，这样复杂度O(输出)。

否则每个订单至少交易一次，设这样的订单有$m$个，二分这种价格的订单要交易多少轮，然后输出即可，这样复杂度$O(m \log V_a)$。

所以总体复杂度还是O(输出$\log V_a$)，很可观。

J. Jump \[braveTester\]
=======================

显然只有输出值为 $n$ 或 $\frac{n}{2}$
的串才是有用的，因此自然想到随机。根据斯特林公式
$$n! \sim \sqrt{2 \pi n} \left(\frac{n}{e}\right)^n$$
估算一下随出有用串的概率大概是 $\sqrt{\frac{2}{\pi n}}$。而
$n \le 1000$，可见随出有用串的概率还是挺大的。

假设已经得到了一个有用串，考虑如何才能进一步获得信息。考虑同时对两个不同位置取反，如果答案为
$0$ 说明这两个位置要么同时对要么同时错；反之如果答案为 $\frac{n}{2}$
则说明这两个位置一定一对一错（感谢唐老师的当头棒喝。）。因此通过 $n - 1$
次询问就可以知道所有位置是否与第一个位置处于同一个集合，之后再用至多两次尝试即可确定答案。随出有用串后的代价至多
$n + 1$ 次，算上随机的代价，题目中给出的限制绰绰有余。

K. King's Inspection
====================

对于入度为 1 的点，将其点和出边缩给其前继，对于出度为 1
的点，将其点和入边缩给其后继，剩下的每个点入度和出度均大于 1
，由于边数不超过点数加 20，从而点数不会超过 20，随便 dp
一下哈密顿回路就好。

其实最多 20 个点，40 个边，在这种情况下还要有每个点的入度出度均大于等于
2，图的形态应该不多，好像搜一下也可以。

L. Landscape Improved \[braveTester\]
=====================================

由题目描述，峰周围一定成一个等腰直角三角形的一部分。考虑二分答案，问题变成如何快速检查对给定峰值所需要的最小添加块数。

显然可以把代价分为三类：左边，峰，右边。峰单独考虑，左右类似，因此只考虑左边。假设当前峰是
$i$，给定高度是 $H$，每个位置的初始高度是 $H[j]$，那么左边的代价就是对
$\{j | \forall j \le j' < i, H[j'] < H - |i - j'| = H - i + j'\}$
中所有位置的 $H - i + j - H[j]$ 求和。变换一下形式有
$H[j'] - j' < H - i$，发现左边与 $i$
无关，因此借鉴划窗里找最大值的单调队列做法即可 $O(w)$
确定以每个位置为峰的左边产生的贡献。具体代码如下（主要是说不清楚 QAQ）：

``` {.cpp .numberLines}
//[l, i - 1] is the interval of valid j with respect to i.
//res is the sum of h[j] - j for all valid j.
for(i = l = 1;i <= N;i += 1)
{
    while(!Q.empty())
    {
        x = Q.front();
        if(H - i > h[x] - x)
            break;
        for(;l <= x;l += 1)
            res -= h[l] - l;
        Q.pop_front();
    }
    cost[i] = (long long)(H - i) * (i - l) - res;
    if(l == 1 && H - i > h[1] - 1)
        cost[i] = M + 1;
    while(!Q.empty())
    {
        x = Q.back();
        if(h[x] - x > h[i] - i)
            break;
        Q.pop_back();
    }
    Q.push_back(i);
    res += h[i] - i;
}
```

时间复杂度$O(w \log n)$。

Summary
=======

**Constroy:**

**Skywalkert:** 由于不可描述的原因，我在这场训练中的角色是 translator &
thinker & debugger，并第一次在训练中负责且读完了所有的题目。我们想到了除
D & H & I
外所有题目的做法，但限于队伍整体太过咸鱼卡到其他题目所以没能实现所有的想法，其中
D 是 sd0061 在 icpc-camp
讲过的题目（很抱歉，到训练的时候我还是不会边分）， H 涉及的 4D
几何是我队没人擅长的部分， I 看漏了输出 Log 行数不超过 $10^5$
的限制（发现后直接想出题解），综上所述，我认为我们队伍**非常需要**规范想题做题过程(think
twice, code once, instead of endless
modifications)，提高姿势水平，对队员的技能点分配进一步了解。

**braveTester:**
