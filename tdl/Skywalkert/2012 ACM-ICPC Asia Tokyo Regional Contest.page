A. Ginkgo Numbers
=================

~~第一眼看成高斯素数了，然而样例教做人 = =。。。~~

由于$1 < n^2 + m^2 < 20000$，所以可以预处理平方数，枚举模长的约数，再枚举平方数拆分，暴力统计即可。单次时间复杂度$O((n^2 + m^2)^\frac{3}{4})$。

也可以根据高斯素数或者二平方和的结论来判定，模长的平方是$(4k+3)$型素数的平方或素数则为高斯素数，筛一下即可。总时间复杂度$O(\max(n^2 + m^2))$。

B. Stylish
==========

别看着数据范围小就乱上高斯消元，样例再次教做人 = =。。。

每一行可以表示成$R, C, S$的线性组合，从而得到$p$个方程。由于$1 \leq R, C, S \leq 20$，所以枚举可能的解，在输出时检查是否有唯一解即可。时间复杂度$O(20^3(p + q))$。

C. One-Dimensional Cellular Automaton
=====================================

裸题，矩阵乘法快速幂。时间复杂度$O(N^3 \log T)$。

D. Find the Outlier
===================

找半天才发现$d \leq 5$。。。

枚举哪一位是错的，其他$(d + 2)$位刨掉一个用作验证，其他的用高斯消元爆搞出系数即可。时间复杂度$O(d^4)$。

E. Sliding Block Puzzle
=======================

抠一抠游戏过程，除了不用动的情况，必然是两个空格不断地跑到大矩形的一边推动矩形，重复跑到矩形旁边、推动矩形这个过程，所以可以将两个空格和大矩形压缩成$(x, y, d)$的状态，其中$(x, y)$为大矩形的左上角坐标，$d$表示空格在大矩形的哪个方向。

猜想存在一种方案使得空格之间时刻的间距不超过2，这~~显然~~是不对的。

~~显然~~两个空格到任意两个点的移动距离就等于它们分别到达其中一个点的最短距离，所以在枚举$(x, y)$的过程中，只需要将附近至多8个点到其他点的最短路bfs出来就可以了。

利用bfs的信息对于$(x, y, d)$这样的点之间建边，跑一遍最短路即可。时间复杂度$O(H^2 W^2)$。

F. Never Wait for Weights
=========================

裸题，带权并查集。时间复杂度$O(N \alpha(N))$。

G. Let There Be Light
=====================

有些题意在`Input`中。。。

考虑最终对目标点产生贡献的灯是哪个集合即可知道要删掉哪些圆，只需要判断一下线段和圆是否相交即可。时间复杂度$O(n m + 2^m \frac{n}{64})$。

H. Company Organization
=======================

操作1,2,4之间是不会产生影响的，不妨考虑它们对操作3,5产生的影响，只是影响需要静下心来想清楚。

操作1和操作2直接建偏序关系的边即可。

操作4显然有一个性质，如果A和B交集为空，那么A的子集和B的子集交集也为空，记录一下每个集合是否和某个集合的子集交集为空。

操作3产生矛盾有两种可能，一种是操作1和2直接导致的，一种是操作4使得两个集合都变成空集，显然如果一个集合和它的子集交集为空，那么它和它的子集都是为空的，判断一下即可。

操作5产生矛盾必须是操作4导致的了，一种是两个集合有至少一个是空集，一种是它们的交集为空集，后者发生时，存在一个集合包含操作中的一个集合，且与另外一个集合有交集为空的关系。

上述是判定过程，在外面套个二分答案即可。时间复杂度$O(n m \log m)$。

I. Beautiful Spacing
====================

玛雅这不就是`诗人小G`么

二分答案，令$f_i$表示前$i$个单词能否放满若干个整行，枚举最后一行是放$j+1 \sim i$，可行的$j$是一段区间，且随着$i$的增加，区间不会向左移动，维护一下$f$的前缀和就可以$O(1)$查询一段区间里是否有$1$了，最后再枚举一下最后一行放的是哪一段即可。时间复杂度$O(N \log W)$。

J. Cubic Colonies
=================

一道智商题。

考虑在完整的立方体表面上如何计算两点的最短距离，最短路必然是在表面展开成的二维图形上经过一些拐点的折线。

现在缺了一些小立方体，可能无法直接展开表面成一个二维图形，但起点与终点都是整点坐标，因此“拐点”还是整点，现在麻烦的是，在展开图上的线段与小立方体的边可能相交于非整点。

然而展开图上的每条线段在任意一个方向上的偏移都不会很大，实际上这个偏移最坏是7，因此只需要将每条边上的等分点找出来，按表面建图求最短路即可。

一条边上最多有19个点有用，所以实际上只有33724个点，预处理这些点的定位，以及每个面需要枚举的信息，可以降低常数。设蒯出来的点数为$N$，对应的边数为$M$，时间复杂度为$O(M\log N)$。

偏移最坏不是6的一个例子是：

![trick](2012Tokyo-J.png)

这将必然形成一个3\*7的展开图。
