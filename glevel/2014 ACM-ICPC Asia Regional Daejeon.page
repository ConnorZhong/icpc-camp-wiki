[题目链接](http://acm.hust.edu.cn/vjudge/contest/view.action?cid=102259#overview)

Solution
========

### **A. UVALive 6894 Algorist Club \[×\]**

**不是逗比题就是个错题 没spj也不说怎么输出**

### **B. UVALive 6895 Deduction \[\*\]**

题意：有三种类型的推论：

Type 1: Si 表示Si为true

Type 2: Si1,Si2,...Sik -&gt; 空 表示Si1,Si2,...Sik至少有一个为false

Type 3: Si1,Si2,...Sik -&gt; Si
表示如果Si1,Si2,...Sik都为true，那Si也为true

然后分别给出n个statement和m1,m2,m3种三种类型的推论，问会不会和事实冲突

shy： 先通过type3的推论确定topo序，然后再用Type2的推论判断有没有冲突即可

一开始所有statement优先选为false

### **C. UVALive 6896 Eureka Theorem [lcy](#lcy)**

$T[n]=n*(n+1)/2$

输入一个数$n$ 问$n$能否由3个$T[i] i=1,2,....,n$组成

lcy:

随便背个包

### **D. UVALive 6897 Exploration \[lcy、shy\]**

给一个图 问图上最大的集合满足所有节点在集合内的度的最小值大于等于$k$

lcy:

通过队列实现先扫一次把度小于$k$的点加入队列

从队列中拿出点然后从图上删去 然后删去后会新出现度小于$k$的点 再加入队列

全部搞完剩下的就是最大集合了

shy:

用队列维护，把度数小于k的点删掉，然后删掉和那个点相连的边，动态维护即可

### **E. UVALive 6898 Marbles \[GOD\]**

看了下别人代码 看到了扫描线线段树 状压$dp$ 防$ak$神题

### **F. UVALive 6899 Permutation Cycles [lwt](#lwt)**

题意: 给出一个置换，求循环节个数

lwt：

签到题，裸的置换求循环节，这题还放$O(n^2)$过了

### **G. UVALive 6900 Road Repair \[\*lwt\]**

题意：给定$N\le 2\times10^4$的一棵树, 给定描述这棵树的四元组,
$(u,v,cost,profit), cost, profit \le 10^3$\
对于树的所有简单路,
找到一条简单路满足$\sum cost \le C\le 2\times 10^7$,且$\sum profit$最大\
求这个最大的$\sum profit$

分析：点分治，对于我们枚举的一条到重心的路径,
假设这条路径的信息为$(c,p)$\
此时我们需要知道当前子问题中其它到重心的路径$(c',p')$的$max\{p'\}, c'\le C-c$,
如何快速知道这个, 可以考虑线段树或者$BIT$来维护最大值\
那么$ans = max\{p+p'\}$

详细代码：[戳这里](http://blog.csdn.net/lwt36/article/details/50348092)

### **H. UVALive 6901 String Transformation [lcy](#lcy)**

给定两个长度相同的字符串$A,B$ 元素只有$a$和$b$
每次可以进行的操作是交换相邻元素 然后问把$A$变成$B$需要交换几次

lcy:

如果$a$的数量不相同那么就无法变成$B$

然后我们扫一遍$A$ 扫一遍$B$ 然后按顺序记录下$a$的下标 记为$posA$ $posB$

最后的答案就是$\sum_{i=0}^{len-1}|posA[i]-posB[i]|$

### **I. UVALive 6902 Three Squares \[\*\]**

题意：用三个相等的正方形去覆盖所有的点，求正方形的最小边长，其中每个点都是格点

shy:

先二分正方形边长

然后枚举覆盖的方向，从未覆盖的点的边界开始覆盖，然后记录已覆盖的点，dfs回溯

之前考虑的太少，应该再暴力一点！

### **J. UVALive 6903 Torus \[×\]**

**题太难读 赛后又读了好多遍 样例也模拟不出来**

### **K. UVALive 6904 Travel Card \[lcy、shy\]**

有两种交通工具 公交和火车

我坐一次公交要1元 坐一次火车要2元

单日公交票要3元 单日公交火车套票要6元

下同

7日 18元 36元

30日 45元 90元

给出每天我要坐几次公交几次火车 问怎么买能使得费用最低\
lcy:

仅描述30日的转移 其他类似

$dp[j]$ 到第$j$天花费最小值

$dp[j]=min(dp[j-30]+买30天公交票+30天火车最小花费,dp[j-30]+买30天套票)$

值得注意的有两点

1、未满30天也可以买30天的票

2、30天火车的最小花费需要重新从30天前dp一遍

shy:

dp\[i\]表示前i天的最优惠价格，然后就是讨论了

因为有可能在某一天内同时享用两种方式，比如可能买7天汽车票而不买全票，然后在这7天里单独买火车票

所以dp\[i\]从dp\[i-30\]和dp\[i-7\]转移时要分买全票和买汽车票另外买火车票的情况考虑

### **L. UVALive 6905 Two Yachts \[\*lwt\]**

题意：可以转化为从$N \leq 10^4$区间中选出一些区间使得所有点被覆盖次数不超过$2$次的最大权和(区间$k$覆盖问题)

lwt:

此问题可用费用流求解, 考虑如下建图：

对于区间$[l_i,r_i),w_i$, 我们添加一条权为$-w_i$，容量为$1$的边,
保证一个区间最多被选择一次

同时离散化区间端点之后，设$n$为总点数，所有的$x_i,x_{i+1}, i \in [1,n)$连一条，权为$0$，容量为$INF$的边，保证图连通

与此同时，为了限制被覆盖次数不超过$2$，我们添加源$S$，汇$T$，添加$2$条边来限流，$(S,1)$权为$0$，容量为$2$，$(n,T)$权为$0$，容量为$2$

因为原图已经连通, 所以添加两条边限流即可

shy:

此题同poj 3680，只是k=2，开区间变成闭区间

做法：

先离散，对区间右端点+1，这样流量就可以表示到点

然后从左到右将相邻的每个点连起来，容量为k，费用为0

对每个区间，连左端点和右端点，容量为1，费用为负的权值

如果选了这个区间，就会从费用为负数的边流过去，否则，就是从这个费用为0的边流过去

然后超级源点和最左边的点相连，容量为k，费用为0

最右边的点和超级汇点相连，容量为k，费用为0

然后跑费用流

Summary
=======

by shy（个人视角）：

前面三道sb题C F H基本顺利，除了粗心大意罚时严重以外，反正shy连题目都没看

A题勉强有点思路，但是题意坑，联系到样例各种不对

后来D题往连通块上想，坑了好久，尤其shy浪费时间尤多，这个时候应该早点帮忙去帮lcy调K的

K题出来以后，D也简单粗暴的过了(要指正两位的是，那个是最大集合不是最大团，最大团是最大的完全子图)

L题只有lwt见过这种模型，但是当时没有成功，其余两人没帮上忙

I题shy想的大致正确，但是没有考虑的太清楚，当时三人状态都不好，解决了代码迷的问题后也是妥妥的跪了

虽然赛后很轻易想通了。。。。

J题意太恶心，不清楚难度

感觉这场也是打的不好，正常发挥的话，最少应该要出6题(I)，而且罚时应该要少很多，以后应该少犯D题这种错误

叉姐说，少做外国垃圾赛区的模拟赛，不知道应该怎么办，他和其他人的看法不一样。。。。

我个人认为，在训练初期还是尽量做吧，但是每次都要有突破(因为和垃圾赛区的比确实会有自己很强的感觉，容易迷失自我)

具体怎么突破，我也不知道，我觉得应该深刻反省下，通过这四次组队训练赛，我们究竟提高了多少吧。。。。

我怕的是我们闭关锁国，一出门又被虐爆(或许14级私底下的训练强度，比我们高很多呢？)，所以想和外校的中游队伍比比看，给我们点教训吧

下学期开始转中国多校

比较好的一点是：我们现在有点自己开题不跟榜的潜质了，这主要还是归功于tt的神English

### shy

感觉最近状态不好，可能是早起难进入状态：

前期不小心又回到了单刷状态，也许这是造成队友罚时的原因之一，A题坑了好久，其实应该果断放弃

还好中期想到了要和队友交流

网络流太久没用，不够熟悉，最近考虑先刷完挑战例题，再补L，争取再次成为强项

D题往团上想坑了好久，太纠结于某些算法而使思维受到影响，根本上还是算法太久没用不熟悉了

K题其实没输出太大贡献，就是看出j可以小于7这个bug，一段时间内可以同时享用两种优惠这个细节怎么调整，主要是lcy想的，我当时没有考虑得太清楚，估计是不小心说了某些话启发了他

I题想得太单纯，其实也是个水题

或许这场本身不难，被自己的智商折服罢了。。。

现在个人短期的目标：容斥水平的提高和网络流的回顾

### lwt

加油！感谢shy对于最大团概念的指正
事实证明过去对于算法的一知半解在比赛会还的

### lcy

I题当时没想明白 傻逼dp空间开小醉到了

K题没我一开始想的那么简单 还好后来解决了
