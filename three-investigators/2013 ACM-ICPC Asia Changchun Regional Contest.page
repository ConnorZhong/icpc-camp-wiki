Contest Info
============

date: 2017.07.30 10:00-15:00

[practice link](https://cn.vjudge.net/contest/174846)

Solutions
=========

A. Hard Code
------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

braveTester's solution

模拟签到题。

B. Golden Radio Base
--------------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

braveTester's solution

稍加尝试不难发现整数和小数部分至多各不超过 50
位，然后每次从头扫一遍，按照提示所给的两个规则尽可能操作，扫描若干次直到满足规则即可。

实测很快，一个数大概不超过 100 次，于是就过了。

不会分析时间复杂度...

C. Little Tiger vs. Deep Monkey
-------------------------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

直接用 dp 出所有分数的概率即可。

D. Bathysphere
--------------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

原问题等价于给定一个横坐标严格递增的 polyline，然后求坐标跨度为 $2d$
的一段与 $x$ 轴的最大面积。

考虑一个滑窗从左划到右，那么这个滑窗有几种情况：

1.  左端点卡在一个点上；
2.  右端点卡在一个点上；
3.  两个端点都没卡在任何一个点上。

1 和 2 都很好求，3 的话，认为只能是 1 和 2 的滑窗继续往右滑动得到的。

在向右滑动的过程中，面积的导数为右端点纵坐标减左端点纵坐边。由于右端点和左端点都是在一条直线上，因此二者纵坐标之差随滑窗从
1 或 2 向右滑动的位移 $\text{shift}$ 呈一次函数。容易发现 3
的极值只可能当 $\text{shift}$ 是该直线同 $x$
轴交点横坐标时取到，稍加判断即可。

这题精度要求不是很高，随便写写就过了。

复杂度 $O(n)$。

E. Min-max-multiply
-------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

$0 < T \leq 100$ 是逗你玩的，题目中 assert 了 $T \leq 10$
。昂神有个很简单的 $\mathcal{O}((n + m) \log \sqrt{\max(\text{value})})$
的算法，可以踩着时限通过，这里给出一个 $\mathcal{O}(n + m)$ 的算法。

注意到每次操作前后函数都呈现为分段线性函数，不妨尝试维护这些分段函数的信息。维护每段的斜率与截距，或是维护拐点的坐标都是可取的，这里我采用的是后者。

题目中所述的四种操作都可能使函数的某些段被上下界抹平，且只有 `@`
操作能产生新的一段，看上去最多可能有 $\mathcal{O}(n)$
段，实际上最坏情况是斜率依次为 $1, 2, \cdots$ ，不难得出此时段数为
$\mathcal{O}(\sqrt{\max(\text{value})})$ 段。~~所以放心大胆地带 $\log$
吧，敢写敢过！~~

题目中涉及到的操作都是对整体进行的，而且它们都可逆，因此可以考虑将操作维护成一些标记，在新产生一段时往分段函数里加的是进行标记操作的逆操作的值，再用上下界去限制分段函数，这样看上去就可以线性了。实际上还需要注意被上下界限制的位置有可能是分段函数中间的情况，这里可以利用线性函数的性质做到线性。

然而存在标记是将原来的值乘以某个大于 $1$ 的数字，其逆操作是无法直接在模
$2^{64}$ 意义下做的，不过改成在模质数意义下即可完成这件事情。

最后询问用基数排序处理一下之后即可线性找解了。

F. RP problem
-------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

首先高斯消元判断是否有自由元，如果有就是 INF ，否则只有唯一解。

对于第二问，考虑加一条边只会改变初始矩阵的最后一列，那么我们设初始矩阵最后一列分别是
$x_i(1\le i\le n)$ ，那么高斯消元后最后一列的值都为 $x_i$
的线性组合，这个在前面那次高斯消元中一起处理即可。

G. Mosaic
---------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

braveTester's solution

二维线段树。

H. Tower
--------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

令 $f(i, j)$ 表示前 $i$ 个公司的代价已经确定，第 $i$ 个公司的选点是 $j$
的最小代价，对于 $x_{i - 1} \leq x_i$ 有
$f(i, j) = \min_{k \leq j}{f(i - 1, k)} + \mathrm{cost}(i, j)$ ，对于
$x_{i - 1} \geq x_i$ 有
$f(i, j) = \min_{k \geq j}{f(i - 1, k)} + \mathrm{cost}(i, j)$ 。

不难归纳证明 $f(i, j)$
的形状是一个单谷的分段函数，斜率沿坐标从小到大依次递增。至于转移，
$\min, \max$ 相当于将一部分斜率抚平，而增加 $\mathrm{cost}(i, j)$
相当于增加分段函数，斜率均可以使用线段树维护，再维护一个起始点的 DP
值即可。

时间复杂度 $\mathcal{O}(m \log m)$ 。

I. String
---------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

根据初始位置模 $L$ 的值分组，枚举每段长为 $L$
的子串，计算出哈希值，并利用 map
找出上一段哈希值相同且在同一组的段在哪个位置，设为 $L$。

如果同组内连续 $M$ 个段的 $L$ 值的最大值小于这 $M$
段的第一段所在位置，那么这 $M$
段可以作为答案，实际上只需要只需要记录前缀 $L$ 的最大值即可。

J. Tri-war
----------

upsolved by chitanda

------------------------------------------------------------------------

chitanda's solution

对于一个询问，我们可以对每个点分开计算答案。

假设只有两个点 x 和 y，假如要求点 x 的答案，我们先把它与 y
的中间点求出来，中间点为 x 不能占领的点，然后可以算出 x
总计不能占领多少点。

再假设只有两个点 x 和 z，进行上述步骤。而对于有三个点 x、y、z，x
不能占领的两个点集要么是包含关系要么是不相交关系，包含关系当且仅当其中一个中间点在
x 和另一个中间点的路径上，这个直接根据两点间距离就能判断。

Replay and Summary
==================

Replay
------

首先 H 看 A，发现是签到题，速敲之。远程的 L
同样发现了这点，刚开始敲的时候 H 已经敲完了...

然后 H 看 J，发现并不难，但是很麻烦，遂弃。

期间 L 读了 B 给 H 转述了题意。

H 再看 C，发现水题，速敲之，因为数组开小 wa
了三发（以为是精度问题），之后又由于开太大 MLE，改成滚动数组之后才过。

远程的 L 读完 C 又发现 H 已经过了，于是开始读 D...

此时已石乐志的 H 看到 I 过的比较多，于是看
I，觉得水题，敲完发现没过样例，定睛一看原来看错题了，重新理了一下思路之后改了改代码，然后
1Y 了。（L 注：此时开场 1h 然而浪哥已经手撕 3 题真是太强了...）

H 再看
G，发现就是二维线段树裸题，一边敲一边回想二维线段树怎么写，几年没写过的
H 花了 45min 才写完。

期间 L 相继读完了 D，E，F，G 并转述 H。L 觉得应该（高精度贪心）莽一发
B，用 python 应该挺好写，然后去写 D。结果发现评测没 python...

L 告知了 H 这个尴尬的情况，H 觉得 L
的暴力高精搞法不靠谱，遂自己卷起袖子上，迅速写了个瞎搞做法后 wa 了，和 L
交流才发现原来还有个条件。

L 换上写 D，期间 H 想了想感觉 B 题再加几句就行，等 L 觉得 D
好像有点问题时（此时的 L 认识到自己想错了...）换上去改了改把 B 过了。

然后 H 想莽一发 F，写完之后 wa，发现还有个条件没看到，改了改 TLE
了，又石乐志改了改交继续 TLE。

期间 L 觉得 D 没啥问题了，于是换上写 D。H 开始思考人生，发现 F
题可以优化复杂度，推了蛮久式子之后把 L 踢下来改 F，改了一会之后过了。

L 继续写 D，马上就写完了，交上去之后 PE，发现是没输出回车，然后就过了。

最后的 25min 垃圾时间 L 变身 H 的小迷弟，听 H
转述自己题的做法，并大呼小叫表示赞叹。

braveTester
-----------

本场贡献 1 题，老浪哥手撕 6 题，彻底沦为老浪哥腿部挂件...

整场各种脑残...比如 F 没一眼瞪出来，D
最开始想错了等等...没睡好觉发挥有够烂...完全不能评价本场的表现....

chitanda
--------

由于是远程所以没怎么和老子渊交流，基本自己一有点想法就自顾自上去莽，导致看错题
wa 了几次，还浪费了很多机时（I、B、F
题），并且仍然有图快而不注意各种细节的情况，在没有 AC
的时候容易焦躁，石乐志地狂交。

J
题从一开始就总是在心里暗示自己很麻烦而不愿意去碰，实际上最后还有时间去写。
