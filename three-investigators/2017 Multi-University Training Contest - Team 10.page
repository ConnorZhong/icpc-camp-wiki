Contest Info
============

date: 2017.08.24 12:00-17:00

[practice link](http://acm.hdu.edu.cn/contests/contest_show.php?cid=767)

Solutions
=========

A. Admiral
----------

upsolved by chitanda

------------------------------------------------------------------------

chitanda's solution

由于步数不超过 20，所以可以双向广搜。

B. Array Challenge
------------------

solved by skywalkert, upsolved by none

------------------------------------------------------------------------

skywalkert's solution

注意到 $x^3 - 4 x^2 - 17 x + 12 = (x + 3) (x^2 - 7 x + 4)$，则有
$h_n + 3 h_{n - 1} = 7 (h_{n - 1} + 3 h_{n - 2}) - 4 (h_{n - 2} + 3 h_{n - 3}) - 16$。

为了化成齐次线性递推，令 $g_n = h_n + 3 h_{n - 1} - 8$，那么有
$g_1 = 1, g_2 = 7, g_n = 7 g_{n - 1} - 4 g_{n - 2}$，以及
$a_n = 3 g_{n + 1} g_n + 6 h_{n + 1} - 30 h_n - 9 h_{n - 1} + 4^n$。

其实可以得到
$\displaystyle g_n = \frac{1}{\sqrt{33}}\left(\left(\frac{7 + \sqrt{33}}{2}\right)^n - \left(\frac{7 - \sqrt{33}}{2}\right)^n\right) \approx \frac{1}{\sqrt{33}}\left(\frac{7 + \sqrt{33}}{2}\right)^n$，大致估计一下可知
$\sqrt{a_n} \sim \sqrt{3 g_{n + 1} g_n}$，余项在 $n$
充分大时可以忽略不计。

而
$\displaystyle \sqrt{3 g_{n + 1} g_n} \sim \frac{11 + \sqrt{33}}{22} \left(\frac{7 + \sqrt{33}}{2}\right)^n$，转化为计算
$\displaystyle \frac{11 + \sqrt{33}}{22} \left(\frac{7 + \sqrt{33}}{2}\right)^n + \frac{11 - \sqrt{33}}{22} \left(\frac{7 - \sqrt{33}}{2}\right)^n$
即可用整数矩阵乘法，再进行小范围调整即可。

算出来发现居然不用调整，那这题岂不是简单找规律？

C. Boring Game
--------------

upsolved by chitanda

------------------------------------------------------------------------

chitanda's solution

这个博弈模型即 Rugs 博弈，为两个 Ruler 博弈的组合，Ruler 博弈的 SG
函数为 $sg(n)=\text{lowbit}(n)$ ，那么根据 tartan 定理，Rugs 的 SG
函数为 $sg(i,j)=\text{lowbit}(i)\bigotimes \text{lowbit}(j)$ 。

考虑如何计算一个矩形（设左上角为 $(x_1,y_1)$ ，右下角为 $(x_2,y_2)$）的
SG 和，根据 nim
乘和加的分配律，即：$(a\bigoplus b)\bigotimes c=(a\bigotimes c)\bigoplus (b\bigotimes c)$
，我们只需要知道 $[x_1,x_2]$ 和 $[y_1,y_2]$ 两个区间分别的
$\text{lowbit}$ 异或和，然后做一次 nim 积即可。

那么对于原问题的 $m$
个矩形，我们需要做一个类似矩形面积并的事，用扫描线加线段树解决即可。

需要注意两个地方，一是 nim
积的结果会超过有符号整型的范围，需要用无符号整型或者长整型，二是 nim
积的求解，当次数足够多的时候，每次复杂度达到 $O(\log^2 V)$ ，其中 $V$
是坐标范围，这样显然过于缓慢，所以我们需要做一些预处理，将数分块。（朝鲜人的预处理和计算过于高端，看不懂）

D. Brother and Sister
---------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

由于每个人恰好有一条指出去的指向关系，指向关系形成一棵内向树结构（环套树）。

分别考虑每个人被询问的概率，只需要考虑在她之前被询问的人的情况，设询问她之前的上一次随机选人之前的某一事件概率为
$P$，选人之前已经询问了 $k$ 个人，她在内向树上有 $m$
个前继节点，则在这一事件的前提下她被询问的概率为
$P \frac{m}{n - k}$，但是如果她不被询问，则也存在相应的在询问 $0$
号女生之前的某一事件概率为 $P$ 且询问了 $k$ 个人，在这一事件的前提下 $0$
号女生被询问的概率为
$P \frac{1}{n - k}$。这两类事件的最终结果都必然是询问 $0$
号女生，那么在一定会询问 $0$ 号女生的前提下，每个人被询问的概率即为
$\frac{m}{m + 1}$。

所求的期望时间相当于每个人被询问的概率之和，为此只需找到图中所有的环，去除环后计算每棵有向树上的前继数量，再对环中的信息进行更新即可算出每个节点的前继节点个数，时间复杂度
$\mathcal{O}(n)$。

E. Cube Summation
-----------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

由于该题不卡 $\mathcal{O}(n \sqrt{n})$
算法，因此间接枚举出划分方案中的每个数字是可行的，从而计算数量的立方和也是简单的。

由 ${x + 1 \choose i} = {x \choose i - 1} + {x \choose i},$
$x^3 = {x \choose 1} + 6 {x \choose 2} + 6 {x \choose 3}$
可知，维护划分方案中选出 $i$ 个数的方法之和是简单的。

考虑组成划分方案的数字，设定阈值 $T$，当数字不大于 $T$
时，利用完全背包的技巧（即生成函数）即可 $\mathcal{O}(n T)$
枚举所有的数字，否则数字大于 $T$，这样的数字最多出现 $\frac{n}{T}$
个，反而可以直接维护个数对应的方案数，也可以根据方案中是否含有最小可能的数字来
$\mathcal{O}\left(n \frac{n}{T}\right)$ 实现枚举。

在具体实现时，可以先进行后半部分的处理，再进行前半部分的处理，这样可以省去卷积合并的过程，取
$T = \mathcal{O}\left(\sqrt{n}\right)$ 即可得到上述做法的最优复杂度。

F. Function Counting
--------------------

upsovled by skywalkert

------------------------------------------------------------------------

skywalkert's solution

将映射 $f$ 视为 $x$ 向 $f(x)$ 连一条有向边，首先根据 $x$ 走 $k$ 步会到
$-x$ 可知 $f(0) = 0$。

此外，设 $x$ 走 $t$ 步会第一次到达 $-x$
$\left(t | k, \text{$\frac{k}{t}$ is odd}\right)$，则这 $t$
步走到的点对应的绝对值必然两两不同，且相邻两个绝对值之差不超过
$2$，接下来 $t$ 步走到的点也因而被确定。

考虑这些绝对值的取值对应的集合，对应的连边方案就有 $2^{t - [t \leq 2]}$
种，而这样的集合实际对应了一个环。

由于环上相邻两个点的绝对值不超过 $2$，则只有三种可能的环：

-   自环，即 $|f(x)| = |x|$，对应 $1$ 种连边方案
-   二元环，即 $|f(x)| = |x + i|, |f(x + i)| = |x|$ $(i = 1, 2)$，对应
    $2$ 种连边方案
-   $t$ $(t > 2)$ 元环，其中有两对相邻点的绝对值之差为 $1$，其他均为
    $2$，对应 $2^t$ 种连边方案

实际上除了二元环中 $i = 2$
的情况，其他情况的环都对应取值为一段连续区间的集合，而二元环中 $i = 2$
的情况都是成对出现的，每两个这样的二元环也可以组成取值为一段连续区间的集合，因此可以递推出长度为
$n$ 的序列能构出多少种连边方案（原来的映射）。

设定阈值 $T$，当 $k \leq T$ 时，利用矩阵乘法加速递推，时间复杂度
$\mathcal{O}\left(k^3 \log n\right)$，否则 $k > T$，直接进行序列
DP，时间复杂度
$\mathcal{O}(n \tau(k)) = \mathcal{O}\left(n \sqrt{k}\right)$。取
$T = \mathcal{O}\left((n k)^{\frac{2}{7}}\right)$ 即可做到较好复杂度。

事实上，当 $k \leq T$ 时，复杂度可以做到
$\mathcal{O}\left(k^2 \log n\right)$，此时取
$T = \mathcal{O}\left((n k)^{\frac{2}{5}}\right)$ 即可做到更好复杂度。

G. Jacana Number
----------------

upsolved by braveTester

------------------------------------------------------------------------

braveTester's solution

显然和对数有关，把特殊情况判完之后，只需判断 $2 \le n < m$ 且 $a > b$
的情况，故取 $\log_2$。

对 $J(n, k)$ 不断取对数，有以下等式： $$
\begin{align}
\log_2^0 J(n, k) &= J(n, k) + 0 + \Delta_0\\
\log_2^1 J(n, k) &= J(n, k - 1)\log_2 n + 0 + \Delta_1\\
\log_2^2 J(n, k) &= J(n, k - 2)\log_2 n + \log_2^2 n + \Delta_2\\
\log_2^3 J(n, k) &= J(n, k - 3)\log_2 n + \log_2^2 n + \Delta_3\\
\cdots &= \cdots + \cdots + \cdots\\
\log_2^k J(n, k) &= J(n, 0)\log_2 n + \log_2^2 n + \Delta_k\\
\log_2^{k + 1} J(n, k) &= 0 + \log_2^2 n + \Delta_{k + 1}。
\end{align}
$$ 其中 $\Delta_0 = \Delta_1 = \Delta_2 = 0$，对 $i \le 2$ 有
$\Delta_{i + 1} = \log_2\left(1 + \frac{\log_2^2 n + \Delta_{i}}{J(n, k - i) \log_2 n}\right)$。补充定义
$J(n, 0) = 1$。

下用归纳法证明，对任意 $i < k$，有 $0 \le \Delta_{i} < 0.3$。

其中 $0 \le \Delta_{i}$ 由初始条件和递推式易得，故下证不等式另一边。

易得当 $i = 0, 1, 2$ 时成立。当 $i \le j$ 时，如果 $\Delta_{i} < 0.3$
成立，则 $$
\begin{align}
\Delta_{j + 1} &= \log_2\left(1 + \frac{\log_2^2 n + \Delta_{j}}{J(n, k - j) \log_2 n}\right)\\
&= \frac{1}{\ln 2}\times \left(\frac{\log_2^2 n + \Delta_{j}}{J(n, k - j) \log_2 n} - \frac{\theta^2}{2}\right)\\
&< \frac{\log_2^2 n + 0.3}{n \log_2 n \ln 2}。
\end{align}
$$ 打表可得，当 $2 \le n < 7$ 时均有最后估值小于 $0.3$，而当 $n \ge 7$
时，$\frac{\log_2^2 n + 0.3}{n \log_2 n \ln 2} < \frac{1.3}{n \ln 2} \le \frac{1.3}{7 \ln 2} = 0.2679 < 0.3$，故有
$\Delta_{j + 1} < 0.3$ 成立。

又由于即使 $\log_2^2 3$ 都有 $0.6644$，因此该估计十分良好。

注意 $\Delta_{k + 1}$ 由于 $J(n, 0) = 1$，因此界是 $1$。

由上述引理有如下做法：

1.  从 $\log_2^{k + 1} J(n, a)$ 开始，不断计算 $\log_2^{i} J(n, a)$ 直到
    $\log_2^{b} J(n, a)$，期间估计值如果大于 $1$，则有
    $J(n, a) > J(m, b)$；
2.  从 $\log_2^b J(n, a)$ 和 $\log_2^b J(m, b)$ 开始，不断计算
    $\log_2^{i} J(n, a)$ 和 $\log_2^{i} J(m, b)$ 直到 $J(n, a)$ 和
    $J(m, b)$，期间估计值之差如果大于 $0.3$，则可断定大的一方；
3.  直接比较 $J(n, a)$ 和 $J(m, b)$。

可以想见，由于是整数，若想很多次都符合估计值之差小于 $0.3$
是很难的。实际上，通过实验发现，该算法在数据范围内对所有数据是正确的，并且运算次数不超过
$5$ 次。

------------------------------------------------------------------------

braveTester's comment

研究了一下题解的做法，理论普适性好像比我这个强，但是可能不太好想啊？

我的做法如果估计 $\Delta$ 的时候考虑 $J(n, k - j)$ 的话精度应该更高。

~~（没准啥时候出个 `long long` 范围的题见下真章啊？）~~

验过了，没啥意思...

两份代码几乎原封不动就可以过...虽然我并没有看过题解的代码...但是思路几乎完全不用动...

H. Monkeys
----------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

做一遍树上匹配，那么对于任何一个非匹配点，都有至少一个匹配点与它直接相连，若猴子放完匹配的点还有剩，那么每剩一个，需要多一条边从一个非匹配点连向一个匹配点。

I. Rotating Line
----------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

旋转点更换后，在直线左侧的点数 +1 -1
相当于不变，因此对于所有可能的方向，只能找到一条这样的直线，也只能找到一个这样的旋转点，不妨按照极角序枚举所有可能的方向。

枚举方向后，旋转点一定是将所有点以该方向为 $y$
轴正方向进行排序后的某个点，且在不同方向上的排名相同，因此只需要在扫描过程中维护这样的有序表即可。

这样的方向总共有 $\mathcal{O}(n^2)$
种，在移动方向时只会出现一些点对的相对排名发生交换，这样的交换次数在只转一圈的情况下也是
$\mathcal{O}(n^2)$ 的。

比较尴尬的是这个题目有可能卡对方向的排序，但是坐标范围很小、数据组数不多，可以直接预处理出所有的方向再去转，在计算点对之间的向量时需要使用的
$\gcd$ 也可以预处理好。

J. Schedule
-----------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

由于每个任务必须在规定的时间区间做，因此贪心的选择机子得到的一定是最少的机器。

剩下就是确定最少的开机时间。设在为一个区间为 $[l, r]$ 的任务 $T$
选择机子的时候，有 $A$ 和 $B$ 两台空闲的机子，设 $A$
上次任务完成时间大于等于 $B$
的上次任务完成时间，没有任务则完成时间设为当前时刻。设二者在 $t \ge l$
的时间均有任务时的一个解为 $S$，只有一个有任务的一个解为 $S'$。

对于 $S$，由于 $A$ 和 $B$ 在 $t \ge l$
的时候有任务，那么由于二者现在都是空闲的，因此把二者在 $S$ 中 $t \ge l$
的安排互换是可行的，并且总开机时间一样。

对于 $S'$，如果 $B$ 在 $t \ge l$ 时有任务，那么将 $t \ge l$
的任务安排切下来粘到 $A$ 上，由于 $A$ 和 $B$
上次任务完成时间的假设，稍加画图可得，新解不会更差。

综上可得，$T$ 放在 $A$
上得到的解不会更差。容易将该讨论扩展到有多台候选机子的情况。

所以用个堆维护空闲机子中最晚结束的，再用个堆维护正在执行任务的机子中最早结束的，然后模拟即可。复杂度
$O(n \log n)$。

K. Two Paths
------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

跑
spfa，记录最短路和次短路，用一个点的最短路更新另一个点的次短路的时候，这个点不能是另一个点最短路的上一步点。

Replay and Summary
==================

Replay
------

`T` 日常迟到。

`T` 远程传达了 J, K 的题意，表示 K 可以用 dijkstra
直接维护最短路次短路， `H` 上去写了一发 TLE，改了下 WA，换成 spfa
就过了。

比赛开始后 50 分钟 `T` 终于出现， `L` 先贪了一发 J ，没过。

`T` 和 `H` 讨论了一下 H， `H` 发现就是个树上的匹配，写了一发
TLE，加了读入优化 WA。

`L` 想了一会后和 `T` 讨论，`L`
突然就证明了贪心是对的，上去改改过了，之后帮 `H` 查了下
H，发现有个符号打反了，改掉后 AC。

其间 `T` 在 E, D, B 上轮流思考无果，感觉人生没有希望。

`L` 和 `T` 讲了下 A，漏看个条件，大家都不会做，`L` 改去想 G，写了下
WA，之后由于有事离开了 1h，最终没能过这个题。

`H` 先去手算 B 无果，看 `T` 在搞 B 就去看其他题，发现 A
少看的那个条件然后赶紧写了个搜，但是 WA 了三发没有找到问题。

`T` 一会手算一会上机验证，终于在 299 分钟的时候解决了 B。

大家在欢声笑语中打出 GG。

braveTester
-----------

这场又犯了陷入一个题不可自拔的过程中...中途离场也是硬伤...

应该时刻提醒自己一个题自己努力想半个小时没有结果就应该审视一下场上情况调整下策略了...第二次犯同样的错误了...

chitanda
--------

从一开始就有点戾气过重，对于自己总是不能 AC 感到烦躁。

后来没有和队员多交流题目，明知自己数学不好还扑在 02
上，而且在发现是个线性递推后没有想到套杜教版，一个很重要的原因就是太不冷静。

很后面去做 01
的时候，没有仔细研究题意并查看样例就去写，直到最后才发现只有 0
能动，并在石乐志的情况下犯了一个明显的错误却怎么也没发现，导致 01
没能通过。

关键还是要**冷静**！

skywalkert
----------

~~带着宿醉感~~从床上爬起来先看了 08 10 11
和队友讲了下，还好没有因为读题拖慢前期。

点午餐的时候看了 07 06 05，看着 06 一脸无语，感觉 07 会卡精度，于是想
05，以为是个 NTT
题，很可惜，到了比赛结束前一个小时，我也只推出了似乎无法推广的一次方和，然而赛后经
claris
点醒我才想起一个简单无比的做法~~甚至我还曾经在某场省选中出过~~，实在是太菜了。

赛中看 01 02 04，其中 01 没有注意到只有一个格子可以动，导致很早就想到的
meet in the middle 也没有用到， 04
误入歧途截止目前总计看错题三次我菜没什么好说的， 02
一脸配方题可惜智商不够猜不中考点，最后看时间不多了硬着头皮推了出来，或许早些在
02 上费点功夫就不会带着整个队卡 02 了。

以后或许会经常遇到与这场难度相等的现场赛、训练赛，我需要和队友一起**冷静
仔细**读题，互相及时传达**简洁
完备**的题意，合理分配机时，不能像这场一样浪费资源，浪费生命。
