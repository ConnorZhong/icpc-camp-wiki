Contest Info
============

date: 2017.08.01 12:00-17:00

[practice link](http://acm.hdu.edu.cn/contests/contest_show.php?cid=761)

Solutions
=========

A. simple counting problem
--------------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

先加一个变量 $x_{m + 1} \geq 1$ 使得
$\sum_{i = 1}^{m}{(x_i + 1)} + x_{m + 1} = n$
。当变量取值范围没有上界时，方程的解数可以用挡板法直观求解。

考虑容斥，设违反 $x_i \leq b^i - c$ 条件的下标集合为 $S$ ，所求即
$\displaystyle\sum_{S}{(-1)^{|S|}{n + m - 1 - \sum_{i \in S}{(b^i - c + 1)} \choose m}}$
。

直接求比较慢，考虑到 $b^i$
比较分散，且组合数的底数比较小，尝试将组合数表示成关于
$(\sum_{i \in S}{b^i})^k$ 的线性组合，在检查
$\sum_{i \in S}{b^i} < n + |S| (c - 1)$ 时会相对简单一些。

预处理 $f(i, j, k)$ 表示在 $b^1, b^2, \cdots, b^i$ 中选 $j$ 个数字求 $k$
次方和的所有可能的结果之和，考虑 $f(i - 1)$ 到 $f(i)$ 的转移，枚举是否选
$b^i$ ，则根据二项式定理有
$f(i, j, k) = f(i - 1, j, k) + \sum_{t \leq k}{{k \choose t} f(i - 1, j - 1, t) (b^i)^{k - t}}$
，预处理的复杂度是 $\mathcal{O}(m^4)$ 。

接下来枚举 $|S|$ ，计算出 $n' = n + |S| (c - 1)$ 的 $b$ 进制表示，枚举
$\sum_{i \in S}{b^i}$ 在 $n'$ 的 $b$ 进制最高第几位开始小于 $n'$
，枚举这一位是 $0$ 或 $1$ ，更低的位置是可以任取的，再利用二项式定理将
$n'$ 更高的前缀信息与预处理信息合并即可计算贡献，时间复杂度也是
$\mathcal{O}(m^4)$ 。

仔细看了下确实是原题……
[梦中的题面](http://uoj.ac/contest/40/problem/312) 原题题解什么鬼……

B. Kanade's convolution
-----------------------

solved by skywalkert, upsolved by none

------------------------------------------------------------------------

skywalkert's solution

作为一名出过子集卷积的出题人，我意识到这个题很可能卡不掉
$\mathcal{O}(3^m)$ ，试了下真的就过去了哎……

令 $u = i \oplus j, v = i \mid j, w = i \wedge j$ ，显然有
$u \subseteq v$ 和 $u = v \oplus w$ ，后者也即 $u + v = w$ 。

相应地，不难看出一组 $(u, v)$ 对应 $2^{\text{bits}(u)}$ 组 $(i, j)$
，因为只有在 $u$ 的那些 $1$ 所在位上 $(i, j)$ 的取值是不确定的。

大概就有
$C[s] = \sum_{s \subseteq t}{2^{\text{bits}(t - s)} A[t - s] B[t]} = \sum_{s \cup t = \emptyset}{2^{\text{bits}(t)} A[t] B[s + t]}$
。

直接使用前半部分式子枚举子集进行计算可以做到 $\mathcal{O}(3^m)$
，或者定义
$\displaystyle F_q[n] = \left\{\begin{matrix}F[n] & \text{if }|n| = q \\ 0 & \text{otherwise} \end{matrix}\right.$
之后可以计算相应的高维前缀和 ${A'}_q, {B'}_q$ ，再计算
${C'}_k = \sum_{i + j = k}{{A'}_i \cdot {B'}_j}$ ，然后转化回 $C_k$
，所求即
$(\sum_{i = 0}^{2^m - 1}{C_{|i|}[i] \cdot 1526^i}) \bmod 998244353$
，复杂度 $\mathcal{O}(2^m m^2)$
，运算量和暴力枚举子集差不太多，标程再写慢点就……

直观来看，设 $D[s] = C[2^m - 1 - s], E[s] = B[2^m - 1 - s]$ ，则有
$D[s] = \sum_{t \subseteq s}{2^{\text{bits}(s - t)} A[s - t] E[t]}$
，这就是很标准的子集卷积式了。

C. Kanade's sum
---------------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

将原序列想象成一个链表，然后从小到大依次删除，由于是个排列，很好删。如此可以知道从大到小往序列里插入的时候的前驱和后继。

从大到小插入一个数 $i$ 后，序列中已有的数均严格比 $i$
大。根据链表可以方便得出数组 $l$ 和 $r$，其中 $l[i]$/$r[i]$ 表示 $i$
左边/右边第 $i$ 个数的下标，并设 $l[0] = r[0] = \text{pos}[i]$。

根据上述信息可以知道，左边有 $j \in \{0, \dots, k - 1\}$ 个数时 $i$
对答案的贡献为
$(l[j] - l[j + 1]) \times (r[k - j] - r[k - j - 1])$，直接累加最后乘 $i$
即可。

在开头和末尾分别补充 $0$ 和 $n + 1$ 可以简化运算。

复杂度 $O(nk)$。

D. Kanade's trio
----------------

solved by chitanda, upsolved by braveTester

------------------------------------------------------------------------

chitanda's solution

对所有数建立 01 的 trie 树，然后枚举 $j$，并在 trie 树上插入，发现当
$A[j]$ 的某一位为 $0$ 时，我们需要计算出所有同层的节点中，$0$
号儿子中下标小于 $j$ 的数的个数乘 $1$ 号儿子中下标大于 $j$
的数的个数，当这一位为 $1$ 时类似。

可以发现，每层这个值是可以维护的，当我们逆序枚举 $j$ 时，需要把它作为
$i$ 的对每层贡献减去，算完它作为 $j$ 时的答案后，再把它作为 $k$
时对每层的贡献加上。

E. RXD and dividing
-------------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

实际上，dfs 一遍，对于一条由父亲连向儿子的边，设儿子为 $v$，边权为
$w$，那么这条边对答案的贡献为 $\min(\text{size}[v],k)\times w$
，即子树中可以有 $\min(\text{size}[v],k)$ 个集中中的点。

F. RXD and functions
--------------------

solved by chintanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

实际上，我们只需要算出 $f(x-\sum a_i)$ 即可，令 $a=\sum a[i]$
，令答案的系数为 $c_i'$。 $$
c_i(x-a)^i=c_i\sum_{j=0}^{i}\binom{i}{j}(-a)^{j}x^{i-j}\\
k!c_{k}'=\sum_{j=0}^{n-k}(j+k)!c_{j+k}\times \frac{(-a)^{j}}{j!}
$$ 做一些转换，令 $k!c_{k}'=h_{n-k}$ ，$i!c_i=b_{n-i}$
，$\frac{(-a)^i}{i!}=d_i$ ，那么可以转换为： $$
h_i=\sum_{j=0}^{i}b_{i-j}\times d_j
$$ 用 NTT 算一下就行了。

G. RXD and logic gates
----------------------

solved by skywalkert, upsolved by braveTester

------------------------------------------------------------------------

braveTester's solution

首先注意到，$a \wedge b = 0 \oplus (a \wedge b)$，以及
$\neg a = 1 \oplus (a \wedge 1)$。

大体思想是对于一个 $m$ 位的数 $x$，我们可以通过一棵节点数为
$2^{m + 1} - 1$ 的 trie 构造出
$\text{indicate}[i] := [x == i]$，然后根据这些指示变量来确定输出。

具体分析如下。

首先构造一个常量 $1$，令为 $\text{ONE}$，给除了根节点之外的其余
$2^{m + 1} - 2$ 个节点各创建一个初始值为 $0$ 的变量，则
$x_{\alpha 0} = x_{\alpha 0} \oplus (x_{\alpha} \wedge \text{input}[\text{len}(\alpha)])$，$x_{\alpha 1} = x_{\alpha 1} \oplus (x_{\alpha} \wedge \neg\text{input}[\text{len}(\alpha)])$。其中
$x_{\alpha} := [\alpha \preceq_{\text{pref}} \text{input}]$。这样需要的操作数为
$2^{m + 1} - 2$，同时需要 $m$ 个变量和操作构造 $\neg\text{input}[i]$。

根据真值表，可以知道输出为 $0$ 和 $1$ 的值哪个更少，设 $\text{output}$
为这个值，并设该值的自变量取值集合为 $S$，则 $|S|$ 至多
$2^{m - 1}$。对这 $2^{m - 1}$ 个值新开 $2^{m - 1}$ 个变量记录相应的
$\neg\text{indicate}$，同时需要 $2^{m - 1}$ 个操作。之后用
$2^{m - 1} + 1$ 个变量和 $2^{m - 1}$ 次操作可以得到
$\text{res} := \bigwedge_{i \in S} \neg\text{indicate}[i]$。

最后通过
$\text{output} = \text{output} \oplus (\text{ONE} \wedge \text{res})$
这一个操作即可得出答案。

所以总的变量数至多为
$(1) + (2^{m + 1} - 2) + (m) + (2^{m - 1}) + (2^{m - 1} + 1) = 3\times 2^{m} + m$，操作数至多为
$(2^{m + 1} - 2) + (m) + (2^{m - 1}) + (2^{m - 1}) + 1 = 3\times 2^{m} + m - 1$，当
$m \le 8$ 时均小于 $800$。

复杂度 $O(2^m)$。

H. RXD and math
---------------

solved by skywalkert, upsolved by braveTester

------------------------------------------------------------------------

braveTester's solution

$$
\begin{align}
\sum_{i = 1}^{n^k} \mu^2(i) \times \left\lfloor \sqrt{\frac{n^k}{i}} \right\rfloor &= \sum_{i = 1}^{n^k} \mu^2(i) \times \sum_{j^2 \le \frac{n^k}{i}} 1\\
&= \sum_{i = 1}^{n^k} \sum_{ij^2 \le n^k} \mu^2(i)\\
&= \sum_{x = 1}^{n^k} \sum_{i = 1}^{n^k} \sum_{ij^2 = x} \mu^2(i)
\end{align}
$$

因为只有当 $i$ 为无平方因子数时，$\mu^2(i) = 1$，其它时候为
$0$，而一个数只可能写成一种
$\text{square free number} \times \text{square number}$ 的形式，所以

$$
\begin{align}
\sum_{x = 1}^{n^k} \sum_{i = 1}^{n^k} \sum_{ij^2 = x} \mu^2(i) &= \sum_{x = 1}^{n^k} 1\\
&= n^k
\end{align}
$$

最后只要用费马小定理快速幂求 $n^k \bmod 10^9 + 7$ 即可。

I. RXD and numbers
------------------

solved by skywalkert, upsolved by none

------------------------------------------------------------------------

skywalkert's solution

通过 BEST theorem
可知，如果将每条边视为不同，则有向图中本质不同的欧拉回路数量为
$ec(G) = t_w(G) \prod_{v \in V}{(\deg(v) - 1)!}$ ，其中 $t_w(G)$ 表示以
$w$ 为根的树形图个数， $w$ 可以任选。

通过 Matrix-Tree theorem 可知，有向图中以 $u$
为根的树形图个数等于该图对应的基尔霍夫矩阵对于 $u$
所在行列的余子式，其中基尔霍夫矩阵等于出度矩阵减去邻接矩阵。

对于本题，拥有相同出发点和目的地的边视为相同，要求以 $1$
开始的欧拉回路数量，则只需要对在原有的欧拉回路上选择一个 $1$
作为起点，并将相同的边去重即可，所求即
$\displaystyle\frac{\deg(1) ec(G)}{\prod_{u, v \in V}{e_{u, v}!}}$ 。

说了这么多，实际上也只需要预处理阶乘和逆元，每次检查下合法性，求个模意义下行列式即可。

J. RXD, tree and sequence
-------------------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

dp
很显然，然后想着这应该要猜一个决策单调，就能用二分栈优化转移了，重点是如何计算一段区间的点的
lca。

首先求两个点的 lca 可以利用 rmq 做到 $O(1)$
处理每个询问，但为了偷懒我直接 $O(\log n)$ 了。

然后对于询问区间的点的 lca，实际上也可以利用 rmq 合并两个长为 $2^k$
区间的 lca 来做到 $O(1)$，相当于双重 rmq。

K. RXD's date
-------------

solved by chitanda, upsolved by braveTester

------------------------------------------------------------------------

chitanda's solution

签到题

Replay and Summary
==================

Replay
------

一开始又是 H 孤独的看题，首先 H 打开
01，看到一堆奇怪的式子，果断关掉打开 11，发现是个水题，马上敲了。

然后 H 又随便看了下别的题，感觉 10 好像比较可做，这时候 L 过来了。

H 感觉 10 应该是决策单调，可以和上次 CF \#426 Div.1 B
一样做，就开始码码码了，期间 T 也终于过来了，并发现 08 是个逗你玩题。

H 飞速的写完后，没过样例，这时候 T 上来写 08，H 开始静态查错。

T 飞快地过了 08，换 H 调了会 10。期间 T 告诉了 L 03 的写法，等 H
调试完，让 L 开始写 03。

H 又静态查了会错后，憋了一两分钟把 L 踢下来改了改 10
代码，过了样例就交了，以不到一分钟的劣势错失一血。

L 继续写 03，然后 H 发现 05 也是个逗你玩题，和 T 讨论了一下把 L
踢下来过了。

L 接着写 03，期间 H 和 T 讨论了一下 06，发现就是个 FFT 水题。L 03 wa
了一发，然后换 T 搞 02。

期间 L 改了几个错，又 wa 了一发后过了。之后 H 和 L 开始讨论 04 和 09。T
搞了一会之后过了 02。

H 上去写 06，T 和 L 再讨论了一会 09。H 火速抄了个板之后就交了，结果
wa，改了改又 wa 了两发，心态开始爆炸，让 T 先写 09。

H 静态查错了一会后上来改了改 06 终于过了。不久之后 T 也过了 09，期间 L
大概会 07 了（后来发现自己并不会...）。

H 以为自己会 04 了，便上来写，L 和 T 讨论 07。T 一番妙语点醒了 L 于是 07
也会了。H 写完交了之后 wa，写了个对拍之后才发现自己想错了，便让 T 上来写
07。

T 和 L 开始和 07 的 RE 斗争，而 H 也由于心态爆炸一直没想对
04，两人轮流上来改代码。

T 和 L 使用了各种技巧，改了几处错误，还是
RE，最后发现输入格式读错了……最后十几分钟的时候 T 终于过了 07，而 H
也终于过了 04。

braveTester
-----------

失了智唯一过的 03 犯了若干傻逼错误 WA 了两发才过...04
没有完整确认完浪哥思想就放他去写我的锅...

看队友狂切题觉得自己好菜啊...

chitanda
--------

首先运气不错，前两天刚用决策单调做了 cf 一道题，因为很快过了
10，为整场的节奏打下来良好的基础。

06 没交过的时候心态就有点炸裂，04
没想明白想对就上去敲，发现错误之后整个人心态崩了，没法冷静下来仔细思考，并且在改代码的时候也不能冷静下来，写错了很多东西，导致自己在
04 上花费了一个半+小时。

skywalkert
----------

想题时间没安排好， 02 想了太长时间怎么做到 $\mathcal{O}(2^m m)$
，结果还顺便证明了一下这个式子和子集卷积等价……还好今天 rp
不错，失了智还能挽回过来，最后没时间想 01 ，和强队还是有很大的差距。

~~感觉要被炒了怎么办啊~~
