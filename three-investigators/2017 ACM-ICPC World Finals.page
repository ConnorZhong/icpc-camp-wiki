Contest Info
============

date: 2017.05.24 08:40-13:40 (UTC -6)

[problems](https://icpc.baylor.edu/download/worldfinals/problems/icpc2017.pdf)

[tutorial](https://icpc.baylor.edu/download/worldfinals/problems/icpc-solutions2017.pdf)

[data](https://icpc.baylor.edu/download/worldfinals/problems/icpc2017data.tar.bz2)

Solutions
=========

A. Airport Construction
-----------------------

upsolved by skywalkert, braveTester

------------------------------------------------------------------------

skywalkert's solution

利用调整法可以发现最优解必然经过多边形的两个点，枚举经过多边形两个点的直线，求直线与多边形的交，取出其中连续的段更新答案即可。

直线与多边形交：求出直线与多边形每条边的交点，有多个/无穷个交点取最靠近端点的两个，将端点按直线上的位置排序，依次考虑每两个不同的相邻点之间线段是否在多边形内。对于直线擦过多边形顶点的情况，根据所交两条边的剩下两个点是否在直线同侧进行判定。对于直线覆盖多边形边的情况，根据所覆盖边的相邻两个边的剩下两个点是否在直线同侧进行判定。

由于坐标范围较大，存在一些极端情况会产生较大乘法误差，需要考虑好近似阈值的设定。

------------------------------------------------------------------------

braveTester's solution

有一个结论是简单多边形内 $P$
内的最长直线段其上必有两个多边形的顶点。所以 $O(n^2)$
枚举在直线上的两个顶点，然后判断该条直线 $l$ 在多边形内部的最长段即可。

同 [2013 ACM-ICPC Asia Regional Nanjing Online, E.
Polygon](2013 ACM-ICPC Asia Regional Nanjing Online#e.-polygon)
类似，定义有效交点为经过该交点 $l$ 与 $P$ 的关系发生改变的点。显然严格在
$P$ 一条边 $e$ 内部的交点，如果不是无穷个，则必为有效交点。

如果与 $P$ 的一个顶点 $u$ 相邻的两条边严格在 $l$ 的不同侧，则 $u$
也为一个有效交点。麻烦的是如果其中一条边与 $l$
重合，稍微画画就可以知道，仅凭借两条边的局部信息无法判断 $u$
是不是有效交点，因为两种情况都可能出现。由于相邻边是不共线的，因此如果一条边
$e$ 与 $l$ 重合，那么其相邻的两条边 $e_\text{pre}$ 和 $e_\text{after}$
必然不和 $l$ 重合，因此可以判断 $e$ 两端点的小邻域内与 $P$
的关系相同还是不同。

将所有有效交点和疑似有效交点排序，得到点的序列 $S$。注意到，如果 $e$ 与
$l$ 重合，那么其两个端点都会作为疑似交点出现在 $S$
中，并且二者相邻，即疑似交点成对出现。设无穷远处 $l$ 不在 $P$ 内，按 $S$
处理点的时候会有以下情况出现：

1.  遇到一个有效交点，改变关系；
2.  遇到疑似有效交点对的第一个，不改变关系，但紧接着一段强制认为在 $P$
    内；
3.  遇到疑似有效交点对的第二个，根据 $e_\text{pre}$ 和 $e_\text{after}$
    的同 $l$ 的关系决定是否改变 $l$ 与 $P$ 的关系。

注意一下根据 $l$ 与 $P$ 的关系清空答案与累加强制算入 $P$
内长度的时机即可。

复杂度 $O(n^3\log n)$。

下证明简单多边形内的最长直线段中一定有一条其上包含了超过两个多边形的顶点。

随便选条在多边形内的线段
$l$，通过平移调整容易证明其上必定有一个顶点，设为
$P$，与其相交的边分别为 $e_1$ 和 $e_2$。

现假设 $l$ 上只有一个多边形的顶点 $P$。

将 $P$ 置于坐标系原点，并令 $e_1$ 平行于 $y$ 轴，设其方程为
$e_1: x = x_0 > 0$，不妨设 $e_2$ 的方程为 $e_2: y = mx + n$，其中
$m > 0$ 且 $n \ne 0$。

设 $l$ 方程为 $l: y = kx$，则 $l$ 与 $e_1$ 的交点横坐标为 $x_0$，与
$e_2$ 的交点横坐标为 $\frac{n}{k - m}$，所以线段长度为 $$
\text{len}(k) = \left(x_0 - \frac{n}{k - m}\right) \sqrt{1 + k^2}。
$$

对 $\text{len}$ 求导可得 $$
\begin{align}
\text{len}'(k) &= \frac{n}{(k - m)^2} \sqrt{1 + k^2} + \left(x_0 - \frac{n}{k - m}\right) \frac{k}{\sqrt{1 + k^2}}\\
&= \frac{1}{(k - m)^2 \sqrt{1 + k^2}} \left(n\left(1 + k^2\right) + x_0 k(k - m)^2 - nk(k - m)\right)\\
&= \frac{1}{(k - m)^2 \sqrt{1 + k^2}} \left(n(1 + mk) + x_0 k(k - m)^2\right)。
\end{align}
$$

当 $n > 0$ 时，有 $k < m$。因为 $n(1 + mk)$ 在 $\mathbb{R}$
上严格增，且过点 $(0, n)$，而 $x_0 k(k - m)^2$ 在 $(-\infty, 0]$
上严格增，在 $\mathbb{R}^+$ 上大于等于 $0$，所以 $\text{len}'(k)$ 在
$(-\infty, m)$ 上先负后正，$\text{len}(k)$
先减后增，在区间端点处取最大值。

当 $n < 0$ 时，有 $m < k$。因为 $n(1 + mk)$ 在 $\mathbb{R}$
上下凸，$x_0 k(k - m)^2$ 在 $(m, +\infty)$ 上下凸，所以
$n(1 + mk) + x_0 k(k - m)^2$ 在 $(m, +\infty)$ 上下凸。又因为
$n(1 + m^2) + 0 < 0$，所以 $n(1 + mk) + x_0 k(k - m)^2$，继而
$\text{len}'(k)$ 在 $(m, +\infty)$ 上先负后正，$\text{len}(k)$
先减后增，在区间端点处取最大值。

综上所述，当线段长取最大值时，必然在区间端点取到，也即在顶点处取到。所以简单多边形内的最长直线段中一定有一条其上包含了超过两个多边形的顶点。

B. Get a Clue!
--------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

若只考虑拿走的三张牌来自不同的集合，则可能的局面最多有
$6 \times 6 \times 9 = 324$ 种。

若只考虑除去 1 号玩家已知的五张牌外其他牌的分配，则剩下的局面最多有
${16 \choose 3, 5, 4, 4} = 50450400\ (\approx 5 \times 10^7)$ 种。

预处理已知的 $n$
轮信息，每条记录有三种信息，要么某个玩家没有某三张牌，要么某个玩家拥有某张牌，要么某个玩家有某三张牌中至少一张。

枚举拿走的三张牌，搜索 2, 3, 4 号玩家的牌集即可。

可以用位运算加速大部分过程。预处理信息也可以去重。

C. Mission Improbable
---------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

初始解对应三类限制，某个位置的方块数量是否可以为零，某一行的方块数量最大值，某一列的方块数量最大值。

考虑构造最小解过程，首先满足第一类限制，将所有位置的方块数量设置为最小值，其次尝试满足行列限制，注意到如果修改某个位置能够同时满足对应行列限制，可以减少花费，否则行与列分别产生花费。

因此根据可以取到最大值的格子，在行列之间连边，最大化匹配权和。注意到只有点权（最大值）相等的点才能连边，故使用最大匹配即可完成构造。

D. Money for Nothing
--------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

问题即给出两个点集 $A$ 与 $B$ ，分别从中各选取一个点 $(x_a, y_a),$
$(x_b, y_b)$ ，满足 $x_a \leq x_b$ ，最大化 $(x_b - x_a) (y_b - y_a)$
，答案与 $0$ 取最大值。

注意到 $A$ 中每个点在 $B$ 中对应的选择只会是坐标均不小于它的点，如果 $A$
中存在两个点 $P, Q$ 满足 $P$ 的坐标均不小于 $Q$ ，那么 $P$
不会对最大值产生贡献，可以移除，$B$ 同理。

剔除没有贡献的点后，两个点集中的点均可以排序成横坐标递增且纵坐标递减的点列，考虑
$A$ 中每个点在 $B$
中每个点的匹配并将其连边，通过交换论证可以发现，这些匹配边只会在端点处相交，也即决策单调（对于决策不存在的情况也适用）。于是随便分治一下就可以了。

E. Need for Speed
-----------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

耗时关于 $C$ 的函数单调递减，二分答案即可。

注意每段路程对答案的贡献最小可以是 $\frac{1}{10^3}$ ，因此 $C$
的最大值可以达到 $10^6 + 10^3$ 。

F. Posterize
------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

定义 $f(i, j)$ 表示目标序列前 $i$ 个值已选且 $v_i = j$ 时原序列中
$r_t \leq j$ 的部分贡献之和的最小值。

初始状态为 $f(1, j)$ ，每个状态的后继状态有 $\mathcal{O}(256)$
个，可以做到 $\mathcal{O}(1)$ 转移，根据 $f(k, j)$
可以更新答案，总时间复杂度 $\mathcal{O}(256^2 k)$。

很像 USACO JAN09 Baric 的简化版。

G. Replicate Replicate Rfplicbte
--------------------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

由于保证了终态在给定的区域中，且 bug
在状态更新后产生，可以发现每个前继状态必然会缩掉一圈外层格子。

假设最外圈格子无 bug
，则可以推出内圈格子的具体值，并且存在一些格子可以检验具体值的合法性。

尝试按行恢复前继状态具体值，恢复过程中可以检验用于恢复的当前状态某一行是否可能存在
bug ，在列上利用相同做法可以确定 bug 的具体位置。

如果去掉 bug 后可以产生前继状态，则继续，否则恢复误判 bug
格子的信息，结束缩格子的过程。

注意当整个区域只有一个活着的细胞时，这个细胞也不能视为 bug 。

skywalkert: 我好像只会手动模拟一下转移啊TAT

H. Scenery
----------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

这里给出一个暴力做法。

有一个不是很显然（或许很显然）的结论，只有在任意的时间区间中均可以决策包含在其中的任务区间，问题才有解。

考虑所有可能的时间区间内如何决策，不妨尽量往前放置，记录最晚的任务在何时决策（开始任务），拥有相同左端点的时间区间之间可以顺序
dp
转移（但不能贪心），看上去有些麻烦，麻烦在于有些位置不可放置决策点，导致决策点转移时可能需要移动超过
$t$ 的距离。

可以发现本质不同的时间区间只有 $\mathcal{O}(n^2)$
种，即某个任务区间的左端点与某个任务区间的右端点产生的时间区间。

考虑将每个任务区间在其右端点处进行决策，对于包含其的时间区间都需要尝试更新可行的决策位置，决策前需要找出在其右端点之前不可放置的位置，所以我们按照升序枚举右端点。

每当新产生一个任务区间需要决策时，我们根据上一个右端点的决策位置，再其后延
$t$
时刻的位置及之后找到最早的可以决策的位置，如果有解则将其作为最好的决策位置，而每当这些决策产生时，都可能产生一段位置不再能放置其他决策，具体来说，如果决策位置后延
$t$
时刻的位置已经超过了当前任务区间的右端点，则右端点之后到这个后延时刻之前的位置都是不能放置决策的。

每个任务区间都可能在 $\mathcal{O}(n)$
个时间区间里产生这样一段禁止决策的区间，但是这些禁位区间的左端点都是相等的，可以只保留最右的右端点，然后产生这个禁位区间，很显然，产生时还为进行与之相关的决策。

又有一个不是很显然（或许很显然）的结论，禁位区间要么互相包含，要么互相没有交集。

于是我们可以有序地存储这些禁位区间，又由于时间区间可以省去记录右端点，所以我们可以为每个左端点的决策维护一个关于禁位的指针，均摊
$\mathcal{O}(1)$ 进行决策转移。

这样就可以在常数很小的 $\mathcal{O}(n^2)$ 时间复杂度下解决此题了。

I. Secret Chamber at Mount Rushmore
-----------------------------------

solved by skywalkert, upsolved by none

------------------------------------------------------------------------

skywalkert's solution

记录题目所述的转换矩阵， floyd 后判定即可。

J. Son of Pipe Stream
---------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

该二维网络流的解在平面上是一个有界的区域，答案最大值对应的解一定是两维流量的最大流。

注意到 $v$
作为一个常数因子，对答案没有产生影响，通过求导可以知道两类流分别需要产生多少流量，并且这个流量可以表示成两种局面的线性组合，这两种局面均是以某一种流量先求出最大流，再以另一种流量补全流量得到的结果。

它们的线性组合中可能产生相消的流量，故直接将其结果组合有些麻烦，但可以只组合出局面的总流量，以总流量（有向）作为容量重新使两种流量流够所需的量值即可构造解。

浮点数网络流需要注意近似阈值、流量上限的设定。

K. Taot Sham Boast
------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

每个 pattern 出现的概率可以用 pattern
出现的位置进行子集容斥，但是本题只需要能比较 pattern
出现的概率，故可以消去一些重复的计算。

首先考虑出现 $k$ 个互不相交的 pattern 的情况，由于各 pattern
的长度相等，所以这样的概率在不同的 pattern
里会产生相同的贡献，这里不再考虑。

对于集合中部分 pattern 相交的情况，可以只考虑那些相交的 pattern
产生的贡献，因为不同连通块之间概率可以相乘。

考虑相交的 pattern ，如果有超过 $2$ 个 pattern
，也可以得出类似地部分概率相乘的结论，从而不用考虑在内。

考虑两个相交的 pattern ，不妨设一个 pattern 的长度是 $m$
，它们公共部分的长度为 $d$ ，则当 pattern 存在一个长度为 $d$ 的 border
且 $2 m - d \leq n$ 时，这样的情况可以产生
$-\frac{(n - (2 m - d) + 1)}{|\sum|^{2 m - d}}$ 的贡献，其中 $|\sum|$
是字符集大小，对于本题来说 $|\sum| = 3$ 。

大概可以发现，由于 $2 m - d \leq n$ ，显然 $d$
越大扣除的贡献越少，于是只需要求出每个 pattern 所有产生贡献的 $d$
降序排列，对该序列进行排序即可。

L. Visual Python++
------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

通过交换论证可以证明解的构造是唯一的，在一维满足偏序关系的情况下，寻找另一维最近的满足偏序关系的元素配对即可。

由于矩形可以退化成线段或点，判断矩形边界是否相交还是有点意思的。
