# Contest Info

date: 2017.08.15 12:00-17:00

[practice link](http://acm.hdu.edu.cn/contests/contest_show.php?cid=765)

# Solutions

## A. All Kill

upsolved by skywalkert

---

skywalkert's solution

利用原根转化成二维 FFT 计算 $f(x) = \sum_{i = 1}^{n}\sum_{j = 1}^{n}{[a_i a_j \bmod P = x]}$ 的数量，其中 $P = 32677 = 41 \times 797$。

令 $g(x) = \sum_{d | x}{f(d)}$， 所求即 $3 f(0) f^2(1) + \sum_{i, j, k \geq 1}{\mu(i) \mu(j) \mu(k) g(\text{lcm}(i, j)) g(\text{lcm}(i, k)) g(\text{lcm}(j, k))}$，只需要在 $\mu(i) \neq 0, \mu(j) \neq 0, \text{lcm}(i, j) < P$ 的点对 $(i, j)$ 之间连一条权值为 $g(\text{lcm}(i, j))$ 的边，枚举三元环计算答案即可，三元环枚举方法在本场 D 题的 Solution 中有讲解。

时间复杂度 $\mathcal{O}(P \log P + \text{3-cycles}(\text{Graph}_P))$，其中 $\text{3-cycles}(\text{Graph}_P) \leq 6946264$。

## B. Build a tree

solved by chitanda, upsolved by none

---

chitanda's solution

从 $n-1$ 向上不断找父亲，可以观察到对于当前点所在层，只会有三个不同的 size ，即编号小于当前点的，编号大于当前点的和当前点。

## C. Color the chessboard

upsolved by skywalkert, chitanda

---

skywalkert's solution

将红色视为 $1$，蓝色视为 $0$，将棋盘划分二分图划分成 $X$ 集和 $Y$ 集，将 $Y$ 集中非白色的点反色，则原限制的任意 $2 \times 2$ 网格内颜色之和为 $2$ 转化为对角线之和相等，进而转化成取出任意子矩形的四个顶点组成的 $2 \times 2$ 网格的对角线之和相等。

不难发现，如果某一行或某一列存在两个值相等，则那两个值所在的列或行上对应位置的值都会相等，故最终局面只能为所有行相同或所有列相同，统计对应行列的信息枚举是行相同还是列相同还是行列都相同即可。

---

chitanda's solution

可以发现，必定满足每一行都为 01 交替，或者每一列都为 01 交替，枚举两种情况，计算答案，再减去两种情况都满足的方案即可。

## D. Destroy the cube

upsolved by skywalkert

---

skywalkert's solution

考虑容斥，计算被至少 $k$ 次破坏的位置产生的贡献，至少被破坏一次的位置数等于 $(a, b, \ast)$ 的数量乘以 $3$，至少被破坏两次的位置数等于 $(a, b, \ast)$ 与 $(a, \ast, c)$ 的交集数量乘以 $3$，至少被破坏三次的位置数等于 $(a, b, \ast),$ $(a, \ast, c),$ $(\ast, b, c)$ 的交集数量。

由于整个表面是上下左右斜对称的，可以考虑将黑点 $(x, y)$ 视为两种坐标 $x$ 和 $y$ 之间的**无向边**，令 $c_x = 2 - [x = \frac{n + 1}{2}]$，则所求为 $n^3 - 3 n \sum_{u}{c_u \sum_{u \to v}{c_v}} + 3 \sum_{u}{c_u \left(\sum_{u \to v}{c_v}\right)^2} - \sum_{u}{c_u \sum_{u \to v}{c_v \sum_{u \to w, v \to w}{c_w}}}$，前三部分很好计算，第三部分可以通过枚举无向图的三元环得到。

枚举三元环时，不妨将 $u, v, w$ 按照 $(\deg(x), x)$ 降序排序，先枚举 $u \to w$，将可行的 $w$ 进行标记，再枚举 $u \to v \to w$ 进行统计，复杂度为 $\mathcal{O}\left(\sum_{u}{\sum_{u \to v}{\deg(v)}}\right) = \mathcal{O}\left(\sum_{v}{\deg(v) \sum_{\deg(u) \geq \deg(v)}{1}}\right) = \mathcal{O}\left(\left(\sum_{v}{\deg(v)}\right)^{1.5}\right) = \mathcal{O}\left(t \sqrt{t}\right)$。

## E. Euler theorem

solved by chitanda, upsolved by none

---

chitanda's solution

打表可以发现答案是 $\frac{a+1}{2}+1$ 。

事实上，对于任意小于 $\frac{a}{2}$ 的数，都是可以取到的，$a$ 本身也可以取到。其他的数必然取不到。

## F. Free from square

solved by skywalkert, upsolved by none

---

skywalkert's solution

首先干掉有平方因子的数，接着对于存在超过 $\sqrt{n}$ 的质因子的数字按照这个唯一的大质因子分组，否则一个数字分一个组，每组显然只能选至多一个数字。

对于不超过 $\sqrt{n}$ 的质因子（至多 $8$ 个），考虑选择的质因子集合进行 DP，令 $f(i, j, S)$ 表示前 $i$ 组里选 $j$ 个数且小于 $\sqrt{n}$ 的质因子被选的集合为 $S$ 有多少种方案，直接转移即可，时间复杂度 $\mathcal{O}(n^2 2^8)$。

## G. Give out candies

solved by chitanda, upsolved by none

---

先不考虑 $k$ 个关系。

每个 child 建 $m+1$ 个点，设第 $i$ 个 child 的第 $j$ 个点为 $p[i][j]$ ，那么从 $p[i][j]$ 向 $p[i][j+1]$ 连容量为 $1000-w[i][j]$ 的边。

同时源点 $S$ 向 $p[i][1]$ ，$p[i][m+1]$ 向汇点 $T$ 连容量无穷的边，那么 $1000\times n$ 减去最小割就是答案。

对于 $k$ 个关系，从所有 $p[x][i]$ 向 $p[y][i-z]$ 连容量无穷的边，这样就能保证 $x$ 的割边和 $y$ 的割边的编号之差不超过 $z$ ，否则必须要割容量无穷的边。

当最小割即最大流为无穷时，输出 -1，否则输出答案。

## H. Hard challenge

solved by skywalkert, upsolved by none

---

skywalkert's solution

将点极角排序，拿一个极角向量去扫在它左侧不超过 180 度的区域里的点，维护一下乘积更新答案即可。

## I. Inverse of sum

solved by skywalkert, upsolved by none

---

当 $p = 2$ 时方程无解。

方程有解时满足 $a_i \neq 0,$ $a_j \neq 0,$ $a_i + a_j \not \equiv 0 \pmod p$ 且 $a_i^2 + a_i a_j + a_j^2 \equiv 0 \pmod 0$，不难解出 $\frac{a_j}{a_i} = \frac{-1 \pm \sqrt{-3}}{2}$，且 $1 + \frac{-1 \pm \sqrt{-3}}{2}$ 在 $p \geq 3$ 时不为 $0$。

计算 $\sqrt{-3}$ 可以随机，随机一个 $w$ 使得 $w^2 + 3$ 在模 $p$ 是非平方剩余，则有 $\sqrt{-3} = (w + \sqrt{w^2 + 3})^{\frac{p + 1}{2}} \bmod p$，计算时需要使用扩域。

时间复杂度 $\mathcal{O}(n + \log p)$。

## J. Just do it

solved by chitanda, upsolved by none

---

chitanda's solution

打表可以发现，每 $2$ 的幂次次操作，会有一个很好的规律，因此根据二进制位做 $O(\log m)$ 次操作即可。

## K. Kolakoski

solved by chitanda, upsolved by none

---

自生成数列，模拟即可。

## L. Loop nest

upsolved by skywalkert

---

skywalkert's solution

本质上是给出了 $m$ 个变量之间的偏序关系，结合状压 DP 进行小于号和等于号的枚举即可得到所有本质不同的状态。令 $f(i, S)$ 表示处理变量集合 $S$ 恰好使用了 $i$ 个小于号的方案数，则所求为 $\sum_{i}{{n \choose i} f(i, \text{all})}$，组合数可以消因子计算，时间复杂度 $\mathcal{O}(n 3^n)$。

## M. Mystery

upsolved by skywalkert

---

skywalkert's solution

注意到 $2 \sum_{i \in T, i\text{ is a leaf}}{B_i} - \sum_{i \in T}{B_i} = \sum_{i \in T}{B_i - B_{\text{father}_i}}$，令 $C_i = \sum_{j \in T_i}{A_j},$ $D_i = B_i - B_{\text{father}_i}$，问题转化为在满足 $\sum_{i \in T}{C_i} \leq Y$ 的条件下计算有多少种方案使得 $\sum_{i \in T}{C_i \cdot D_i} \equiv 0 \pmod P$，其中 $C_i = \sum_{k = 1}^{h_i}{2^{h_i - k} X^k}$。

如果能够计算出 $F_x = \sum_{i \in T}{[C_i = x]}$，则问题转化为从 $P$ 个集合里分别选出一些可重子集满足等式，可以 $\mathcal{O}(Y^2 P^2)$ 背包 DP 计算。

实际上当 $X = 2, P > 2$ 时， $C_i = 2^{h_i} h_i$ 在模 $P$ 意义下关于 $h_i$ 有长度为 $P (P - 1)$ 的循环节，而对于 $h_i = y$，可以找出 $2^{H - y}$ 个这样的 $C_i$，按循环节划分进行统计（等比数列求和）即可。顺带一提，对于其他情况 $C_i$ 在模 $P$ 意义下关于 $h_i$ 有长度为 $(P - 1)$ 的循环节。

# Replay and Summary

## Replay

今天 L 去参加微软比赛了，因此只有两个人。

T 日常迟到，H 对自己孤身一人感到烦躁，读了几个题都没什么想法。然后 H 打电话给 T，此时的 T 正在洗漱，并没有接到电话。

H 成功被 E 的标题所欺骗，研究了很久之后写了个暴力，才发现真正的规律，过了这题。

然后 H 搜了下 K 题的序列，发现是个自生成序列，紧接着过了这题。

H 再次拨通 T 的电话，T 终于接通，H 和 T 讲述了下 J 的题意后，T 告诉 H 尝试一下 2 的幂次，于是 H 很快发现规律并通过了这题。

过了差不多一小时，T 终于过来了。

H 和 T 讨论了一下 B，H 感觉可以数位 DP 做，没太想明白就上去写了，写写调调弄了很久也没搞对。期间 T 读了别的题，发现 F、H 和 I 都能做。

H 一直没搞对 B，于是让 T 先上来写 I，T 很快过了 I。

H 上来继续怼 B，终于过样例之后发现随便搞组别的数据就不对，遂陷入沉思。

T 于是先写写 F。H 终于发现自己蠢了，完全不用这么复杂，于是上来迅速写完了，TLE 了两发之后才发现对于一种情况要特判，改了一下终于过了。

T 继续写 F，H 开始思考 C，想了很久没想出来，于是看了下 G，发现是个很 old 的最小割。

T 的 F 一直没过样例，H 趁此机会把 G 敲完了，交了之后 TLE，真让人摸不着头脑。

T 发现自己 F 题搞错了，改了改之后终于过了，H 也发现 G 题只是数组开小了，改了之后也马上过了。

T 开始上全场题 H，H 继续奋战 C。T 很快就过了 H，而 H 死活想不出 C。

T 看了下别的没过的题，发现 A 只是两个 old 题强行合并，于是准备上去强怼，但此时时间已不多，最终没能怼出来。

## chitanda

初期一个人的时候没有能够平静下来，直到半小时过去才过题。

B 又是没有想明白就去敲，白白浪费很多时间。

C 没有注意到更多的性质，一直在错误的方向上思考。

## skywalkert

本场比较尴尬的是写 F 的过程，思考错了方向，以后需要冷静。

思考题目的速度和写题的速度急需加强，太容易被踩了。