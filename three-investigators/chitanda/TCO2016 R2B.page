## TCO2016 Round2B Easy

> 给定$A,B,C$,问有多少个三元组$(a,b,c)$,满足$1\le a\le A,1\le b\le B,1\le c\le C$,且$a,b,c$能够构成三角形的三条边

考虑用所有三元组的个数减去不能构成三角形的三元组的个数,即$A\cdot B\cdot C-f(a,b,c)-f(a,c,b)-f(b,c,a)$,其中$f(a,b,c)$表示$a+b\le c$的三元组的个数.
$f(a,b,c)$可以通过容斥计算,先不考虑$a,b$的上界,数量有$calc(C)$个,减去$a$超过上界的数量即$calc(C-A)$和$b$超过上界的数量即$calc(C-B)$然后加上$a,b$都超过上界的数量即$calc(C-A-B)$.
$calc(C)$即$\sum_{c=1}^{C} \sum_{i=1}^{c-1} c-i=\frac{C^3-C}{6}$.

## TCO2016 Round2B Medium

> 最多$50$个背包,包含总共最多$16$种宝石,宝石重量各不相同,判断对于$16!$种重量大小排列,是否都存在唯一的最重的背包.

首先,对于相同的背包要去重.
枚举每一个背包,以它为最重的背包计算答案$res_i$,如果$\sum_i res_i=16!$,那么可能,否则不可能.
考虑如果背包$a$比背包$b$重,那么对于每个重量$j$,$a$中重量大于$j$的宝石数量大于等于$b$中重量大于$j$的宝石数量.
用状压DP来计算这个答案,$dp_i[S]$表示对于宝石集合$S$有多少种排列使得条件成立,转移时,枚举重量最小的宝石.
即当背包$i$中对于集合$S$中的宝石的数量为最大时:
$$
dp_i[S]=\sum_{k\in S}dp_i[S\setminus \{k\}]
$$
然后判断是否有$\sum_i dp_i[U]=2^{|U|}$即可.