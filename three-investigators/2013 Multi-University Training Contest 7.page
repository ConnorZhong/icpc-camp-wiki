# Contest Info

date: 2017.07.29 12:00-17:00

[practice link](https://vjudge.net/contest/174547#overview)

# Solutions

## A. Hyperspace

solved by skywalkert, upsolved by none

---

skywalkert's solution

枚举每个绝对值的正负号可以发现所有情况的求出的值都不会大于最大距离，且存在一个值是最大距离。

multiset 维护每种情况的取值，答案必然是某种情况的最大值减最小值。

## B. Building Fence

solved by chitanda, upsolved by none

---

braveTester's solution

可以发现，最终构成凸包的点一定是圆与圆的公切线的切点，以及圆与三角形顶点的切线的切点，以及三角形的顶点。因此只需要把所有这些点暴力的求出来然后跑个凸包即可。

至于最后计算凸包周长如何取圆的优弧和劣弧，画一画发现，如果圆心在凸包内，那么取劣弧，否则取优弧。

复杂度 $O(n(n + m)\log(n(n + m)))$。

这题由于精度要求比较低，因此也可以在每个圆上暴力等分取几千个点然后正常计算凸包及其周长即可。

## C. Finding string

solved by skywalkert, upsolved by none

---

braveTester's solution

设文本串为 $\text{text}$，模板串为 $\text{str}$，对于每个循环节，设其长度为 $p$，依据 $\text{text}$ 之前的前缀在 $\text{str}$ 的 KMP 跑到的节点，暴力的跑几个循环节，直到发现在第 $i$ 个循环节的末尾，有 $|\text{str}| \le i \times p$，就再跑一个循环节，记录下在这个循环节里的答案，之后的循环节直接乘上即可。

原理就是因为根据 KMP 的流程，一个字符串在某个位置的匹配至多需要往前该字符串长度的信息，而由于循环，一旦满足上面的条件，在下个循环节末尾对匹配有用的信息和在这个循环节末尾的是一样的，示意图如下：

~~~
[........][........][........][........]
    ++++++++++++++++++++++++++
              ++++++++++++++++++++++++++
~~~

其中 `+++` 表示模板串，`[...]` 表示一个循环节。

时间复杂度 $O(|\text{text}|\times |\text{str}|)$。

## D. Mutiples on a circle

solved by skywalkert, upsolved by none

---

chitanda's solution

令 $sl[i]$ 表示前 $i$ 个数拼起来的长度，$s[i]$ 表示前 $i$ 个数拼起来的数在模 $k$ 意义下的值，$s[i]=s[i-1]\times 10^{|a_i|}+a[i]$ 。假如我们枚举 $l,r$，那么从将第 $l$ 个数到第 $r$ 个数拼接起来的数在模 $k$ 意义下的值即 $s[r]-s[l - 1]\times 10^{sl[r]-sl[l - 1]}$ ，用 $cnt[r][i]$ 表示 $s[l]\times 10^{sl[r]-sl[l - 1]}=i$ 的 $l$ 的个数，那么 $cnt[r+1][i\times 10^{sl[r+1]-sl[r]}]=cnt[r][i]$，同时将 $cnt[s[r]]$ 加 1，并将 $cnt[s[r-n]]$ 减 1，于是可以直接 $O(nk)$ 做。

## E. Cube number on a tree

solved by chitanda, upsolved by none

---

chitanda's solution

点分治，只需要存下当前点到根的路径上的所有点的乘积分解成各个质数的幂在模 3 意义下的值，用 map 维护并计算答案。

## F. Backup Plan

solved by braveTester, upsolved by none

---

braveTester's solution

显然每个数据库不是选第一个就是选第二个，后面的优先级无所谓。

先给每个数据库按照 $1, 2,\dots, n, 1, 2,\dots, n, \dots$ 分配第一优先服务器，然后假设一个服务器 $i$ 坏了，把第一选择是 $i$ 的数据库按照 $n, n - 1, \dots, i + 1, i - 1, \dots, 1, n, n - 1\dots, i + 1, i - 1, \dots, 1, \dots$ 的顺序分配第二优先服务器。

之后只要保证每个数据库剩下的优先级与已经填的构成一个排列即可，复杂度 $O(nm)$。

## G. Present Day, Present Time

upsolved by skywalkert

---

skywalkert's solution

第二种情况可以在一开始就判断掉，因为 $\{B_i\}$ 的线性组合可以表示充分大的任意 $\gcd_{i = 1}^{m}(B_i)$ 的倍数，不能被表示的公约数的倍数一定不超过 $(\max(B_i) - 1)^2$ ，这一点可以在模 $\max(B_i)$ 剩余系下看出来，不妨设最小的下界是 $\mathrm{bound}$ ，即不小于 $\mathrm{bound}$ 的数里是公约数倍数的数字都能被其线性组合表示，这里 $\mathrm{bound}$ 是公约数的某个倍数。

剩下的第一种情况便是正常的 NIM 游戏了，计算出每堆石子的 SG 值之后可以得到整个游戏的 SG 值。

直接枚举后继算 SG 值有些暴力，但是不难注意到该游戏的一个特性，每个局面不存在后继局面的 SG 值比它的 SG 值大，这个可以使用归纳法证明。

利用上面的性质可以直接 $\mathcal{O}(m)$ 递推出一个局面的 SG 值，当石子个数不小于 $\mathrm{bound} + \min(B_i)$ 时，其后继状态已经涵括了不小于 $\mathrm{bound}$ 的信息，可以发现和归纳证明，对其最有影响的后继状态一定不小于 $\mathrm{bound}$ ，从而得出最有影响的后继状态恰好是移除 $\min(B_i)$ 个石子的状态，也因此可以发现 SG 值从 $\mathrm{bound}$ 开始每 $\min(B_i)$ 个为一组，后一组的最有影响状态一定来自前一组，也即后一组的 SG 值恰好比前一组的 SG 值多 1 。

时间复杂度 $\mathcal{O}(m \max(B_i)^2 + n)$ 。

## H. Pirate's Chest

upsolved by skywalkert

---

skywalkert's solution

很明显的网络流模型，只是需要用斯坦纳树进行预处理，二分答案建图。

注意到每种钥匙/撬棍可以无限次使用，与之相关的代价应该定义在其上，而对于宝箱来说，剩下只有当钥匙和撬棍都没有的代价，实际上可以看作钥匙与撬棍之间的代价。

根据上面的分析大致可以得出“源 -> 钥匙 -> 撬棍 -> 汇”类型的图，其中暴力拆解宝箱的代价变成了边权。

注意到每种钥匙/撬棍在塔中只会出现至多一次，同一层至多出现两个道具且同一层的道具是同一类型的，则每种道具或者说每种道具的组合对应的代价直接相关于它出现的塔层。

这里存在道具的组合，但由于组合的道具类型相同，故可以加点表示组合道具与单个道具之间的选择。

为了计算组合道具的代价，每一层塔需要用斯坦纳树计算包含特定点集的最小生成树代价，注意这里只有点权没有边权。斯坦纳树可以用状压 DP + dijkstra 实现。

考虑利用最小割来构造一组解。对于可组合的道具，新增一个中转点，源/汇与其连权值为组合代价的边，单个道具与其连权值为单个代价的边；对于不可组合的道具，源/汇与其连权值为对应代价的边，存在代价为正无穷的情况。对于每个宝箱，在对应钥匙与撬棍之间连权值为暴力拆解代价的边。可行解要求每条中间边不能同时与 S 和 T 弱连通，也就对应了一个割。

根据题目要求二分一下塔的层数，求解最小割对应的最大流即可。

## I. Trip Advisor

upsolved by skywalkert

---

skywalkert's solution

问题和边双连通分量有关，但是在与桥相连的点处有些限制，例如存在一些情况是连续经过两个桥，但是两个桥中间的点所在边双连通分量只有这一个点可以被访问。

不妨定义当路径上经过同一个边双连通分量里至少两个点时才认为这个边双连通分量被经过，则可以比较好的解决上面的特例。

具体来说，我们需要构建一个新图来辅助上面的定义，并且它是一棵树。

在新图中保留原有的所有点以及所有桥，移除所有边双连通分量里的边，对于每个边双连通分量，新增加一个点与该边双连通分量中的点连边。

一个点在原图上可以被经过，等价于这个点在新树上一定被经过或者这个点对应边双连通分量的点一定被经过。前者对应特例的情况，后者对应环上构造路径的情况。

这个题可以改成仙人掌图上的问题，仙人掌图满足图中每条边在至多一个简单环中，只需要使用点双连通分量替换边双连通分量即可。

似乎可以发现，判断一个题要用边双还是点双的方法做，不是看这个图满足什么性质，而是限制在边上还是点上。

## J. GCD of Sequence

solved by chitanda, upsolved by none

---

chitanda's solution

令 $cal[i]$ 为 $\{a_j\}$ 中是 $i$ 的倍数的个数，令 $f[i]$ 为 gcd 是 $i$ 的倍数的 $b$ 的个数，那么 $f[i]$ 计算如下：$n-cal[i]$ 个 $\{a_j\}$ 中不为 $i$ 的倍数的数必须改变，$cal[i]$ 个 $\{a_j\}$ 中是 $i$ 的倍数的数必须选 $k-(n-cal[i])$ 个变成另一个 $i$ 的倍数，那么 $$f[i]=\left(\frac{m}{i}\right)^{n-cal[i]}\times \binom{cal[i]}{k-(n-cal[i])}\times\left(\frac{m}{i}-1\right)^{k-(n-cal[i])}。$$

# Replay and Summary

## Replay

一开始只有 H 一个人，看了下 BCJ，感觉都不太会。

然后 L 来了，和 H 讨论了下计算几何的 B，觉得没啥问题，然后 H 开始写 B。

期间 L 看了下 F，觉得是个水题，于是换下 H 开始写。

之后 T 也来了，开始看 A，发现是个水题。期间 H 和 T 讨论了 J，准备交给 T 写。

L 交了一发 F，发现 wa 了，T 开始写 A，随便就过了。中间 H 帮 L 看了下 F，改了个 sb 错误过了。之后 H 决定还是自己写 J，然后让 T 想 D。

L 和 T 讨论了 D 的做法，觉得很对，此时 H 交了 J，wa 了，T 开始码 D。

期间 H 改了个 sb 错误过了 J，然后和 L 讨论了下 I 感觉会做，继而讨论了下 E 发现不太会。L 发现 C 是个水题。此时手上握了 4 个题。

T 交了发 D，然后 T 了，此时 H 继续写 B。之后 L 跟 T 交流了下 C，继而讨论了下 E，发现是个水的点分治。L 嘱咐 T 先写 C 之后就离开去开组会去了...

之后 H 发现 B 没过样例开始静态查错，然后换 T 上去写 C， T 很快写完 C 1A 了。

H 继续改 B ，一发 wa ，发现边界有个小问题，改了下 ac 了，感谢昂神的板子。

此时 T 开始写 E，H 看了下 D 的代码发现 T 和 L 的做法太智障了，有个简单的方法，于是打断了 T 刚刚发动的施法，T 开始写 D。期间 H 读了下 G，没读懂。

T 写完了 D 交了 ac 了，H 开始码 E。T 写下了 H 的题意，继续读了 G 和 I，可 G 还是没读懂。

H 写完 E 交了两发 wa 了，换 T 上去写 I。期间 L 开完组会回来了。

H 和 L 一起读 E 的代码发现没什么错，H 觉得可能昂神题意给错了，于是答案不乘 2，交了 ac 了，~~差点被昂神坑了~~。

之后 T 一直在写 I，L 向 H 交流了下自己没看没做的题，之后二人变身吃瓜选手仰望 T。

T 最后 30s 交了一发，然而 RE 了，好菜啊...（L 注：此处应 T 的要求需要表现一下选手的自嘲。）

## chitanda

这场总体节奏还行，但自己写代码还是总犯小错误，比如忘记取模、写错变量等等。

与队友之间的交流还不够，tls 在写 I 的时候没有将一些坑点告诉他（以为老子渊和 tls 交流过），导致浪费了不少时间，~~虽然实际上没啥影响~~。

## braveTester

又是只写了个最水的 F，还没 1A，真是太菜了...只能帮队友助攻...本场助攻还可以。

## skywalkert

还在犯智障错误（把问题想复杂 & 把问题想简单， ???）。

图论知识有些匮乏。这场学到了一些新的技巧，包括博弈论的题目，加深了我对模意义下最短路的理解。