Contest Info
============

date: 2017.04.07 18:45-23:45

[practice link](http://codeforces.com/gym/101201) (Div. 1)

[problems](http://acmicpc-pacnw.org/ProblemSet/2016/div1.pdf)

[standard solutions and
data](http://acmicpc-pacnw.org/ProblemSet/2016/solutions_io_writeup.zip)

Solutions
=========

A. Alphabet
-----------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

$O(n^2)$ 求一个最长严格递增子序列长度 $l$，然后总长减 $l$ 即为答案。

B. Buggy Robot
--------------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

令 $f[i][j][k]$ 表示决策完命令序列前 $k$ 个到达点 $(i, j)$
时所需要的最小额外命令数。

考虑 $f[i][j][k]$ 的答案所对应的决策序列。决策序列指由
$\{\text{use $n$-th command}, \text{abandon $n$-th command}, \text{add a new command}\}$
组成，且对于每个原有 command
决策仅出现一次，并且出现位置依次递增的序列。

该序列如果最后一项是对于 $k$-th command 的决策，则从 $f[i'][j'][k - 1]$
转移，如果是添加新命令，则从 $f[i'][j'][k]$
转移。假设已经计算好了某一层的 $f$，先对 $k$-th command
进行决策，然后跑一个 Dijkstra 即可。

复杂度 $O(nm \times |\text{command}| \times \log (nm))$。

C. Cameras
----------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

对于 $[1, r]$ 内的房子，如果已有足够数目的相机，则原问题等价于 $[2, n]$
的答案，即第一个房子相当于没有。如果需要放至少一个相机，将这些相机从 $r$
开始向左放，显然对于该区间内放置相同数目相机的所有方案，这么做的代价不会变得更差。如果放置的相机使得该区间内的相机大于等于
$3$，则只留下最低需要的相机，剩下的扔到区间右边，答案显然不会变得更差。

综上，只要从左向右贪心即可，复杂度 $O(n)$。

D. Contest Strategy
-------------------

upsolved by braveTester, skywalkert

------------------------------------------------------------------------

skywalkert's solution

每个题目产生的贡献系数与被解决的位置有关，考虑 DP
计算所有可能的贡献之和。

注意到被解决的位置之和某个题目的排名有关，难度相同的题目可以按照编号排序。

令 $f(i, j, k, l)$ 表示与所求题目排名相同的题目还有 $i$
个未读，排名小于的还有 $j$ 个未读，排名大于的还有 $k$
个未读，排名小于的还有 $l$ 个已读还没做的情况下后续终结状态的贡献之和。

根据题目流程倒序考虑转移：

如果没有题可读，那么直接得出对答案的贡献。

否则有题可以读，但是如果当前已经读了 $K$
个题目，则需要解决最简单的题目，这里如果解决的是所求题目，则可以停止转移，而是计算出有多少种终态乘以每种状态产生的贡献。

不然可以读一道题，这道题的排名可以是小于、等于或大于所求题目的。

状态数 $\mathcal{O}(n^3)$，转移是常数复杂度，故时间复杂度
$\mathcal{O}(n^3)$。

E. Enclosure
------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

这 $n$ 个点的凸包一定包含前 $k$ 个点的凸包，在大凸包上 two pointer
维护能看到小凸包的视野即可。

F. Illumination
---------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

2-SAT。每个灯只有横着或竖着放两种情况，根据每一行、每一列上相邻的两个灯能否同时取到某种状态得到逻辑关系，之后就是强连通缩点判定
2-SAT 的事了。

G. Maximum Islands
------------------

solved by skywalkert, upsolved by none

------------------------------------------------------------------------

skywalkert's solution

贪心。先把陆地 (L) 附近的云 (C) 变成水
(W)，剩下的云被水包围，意味着它们变成陆地只受附近云的影响。每个云连通块二分染色后选择点数较多的那边染成陆地即可。

H. Paint
--------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

先离散化，按右端点排序后 DP。

I. Postman
----------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

如果在一趟中既向右跑又向左跑，则可以变成跑两趟，且答案不变，因此只用考虑在邮局右边的房子。

因为最右总是要跑的，因此先带最多的信往最右跑。在最后一趟时，还可以送一些信给其它的房子，那么假设没有带信给次远的房子，而是给了更近的房子，则把这两封信的寄送顺序调换，答案不会变得更差。综上，每次送信就是选最远的
$k$ 个送。用优先队列分左右维护即可，时间复杂度
$O\left(k\sum_{i \le n} m_i\right)$。

J. Shopping
-----------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

每次通过线段树找到第一个费用大于等于当前钱数的商品，最多找 $O(\log)$
次。

K. Tournament Wins
------------------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

总共 $k$ 轮比赛，令随机变量 $X_i$ 表示排名为 $r$ 的人赢了第 $i$
场比赛。易得若要赢第 $i$ 场比赛，则在参与该场比赛的 $2^i$
个候选人当中，排名为 $r$ 的人必须是排名最高的。

设样本空间为 $S$，考虑其大小为 $2^k !$ 的情况。则 $$
\Pr[X_i = 1] = \frac{2^{k - i} \binom{n - r}{2^i - 1} \times 2^i ! \times (2^k - 2^i) !}{2^k !}。
$$

最终答案为
$\sum_{i = 1}^{k} \Pr[X_i = 1]$。由于不取模，直接算会爆精度，因此可以先取
$\ln$，然后算完概率在用 $\exp$ 搞成原来的数加起来即可。

由于要预处理阶乘取 $\ln$ 后的值，因此复杂度 $O(2^k)$。

L. Windy Path
-------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

构造。每次用第 $i$ 段与第 $i + 1$
段的夹角来决策它们的交点选在哪，例如需要偏左则尽量选偏右的点。具体来说，首先在凸包上找一个点，之后每次都是在凸包上找一个最不会使解变差的点，依次构造。

Replay and Summary
==================

none is available
