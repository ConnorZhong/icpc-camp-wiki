# Contest Info

date: 2017.08.19 12:00-17:00

[practice link](http://acm.hdu.edu.cn/contests/contest_show.php?cid=779)

# Solutions

## A. Vertex Cover

sovled by braveTester, upsolved by none

---

braveTester's solution

设有 $\text{base}$ 个点，标号 $1$ 到 $\text{base}$。每个点各自连另外一个点，现在总共 $2\text{base}$ 个点。

然后对于 $\text{level} = 2,\dots,\text{base}$，新建若干点，每个点连 $\{1,\dots,\text{level}\}, \{\text{level} + 1, \dots, 2\text{level}\}, \dots$。

粗略拿 `Python` 计算了一下，$\text{base} = 50$ 就有 $4$ 倍，轻松通过。

## B. Party

upsolved by skywalkert

---

skywalkert's solution

所求即统计在每个询问给定的点集中，有多少个非空点集可以表示成至少一个边匹配对应点集的子集。

分别考虑所求点集在两边的点集 $X$ 与 $Y$，根据 Hall 定理，$X$ 集一定在原图中存在完美匹配， $Y$ 集同理。

组合起来考虑，如果 $X$ 和 $Y$ 在原图中对应的匹配点集互不相交，则合并起来就是一组解，否则交集对应的点一定都属于 $X + Y$，实际上形成许多条增广路径，选其中一半的匹配即可构造出一组解。

因此所求可以转化为求两边分别能被匹配的点集数量，根据 Hall 定理， $X$ 集存在完美匹配当且仅当它的任意大小为 $k$ 的子集连接至少 $k$ 个点，对于每个集合检查该性质并利用高维前缀和计算子集信息即可，时间复杂度 $\mathcal{O}(q n 2^n)$。

## C. Friend-Graph

sovled by braveTester, upsolved by none

---

braveTester's solution

根据 Ramsey 定理，$K_6 \rightarrow K_{3, 3}$，因此只要点数大于等于 $6$，一定会是 `Bad Team!`。点数小于 $6$ 的时候 $O(n^3)$ 枚举即可。

总体复杂度近似认为常数？（最花时间的应该是读入）

## D. A Secret

solved by chitanda, upsolved by none

---

chitanda's solution

将两个串翻转，即查询一个串的所有前缀在另一个串中出现次数乘前缀长度的和，KMP 即可。

## E. CaoHaha's staff

solved by chitanda, upsolved by none

---

chitanda' solution

显然画斜边优势更大，并且尽量画成斜着的正方形面积更大。

那么考虑二分出一个 $t$，使得 $2t^2\lt n$，且 $2(t+1)^2\ge n$，边长为 $\sqrt{2}t$ 的正方形和 $\sqrt{2}(t+1)$ 的正方形相差了四条单位边。

再考虑边长为 $\sqrt{2}t$ 和 $\sqrt{2}(t+1)$ 的矩形，相比正方形多画了两条边。那么如果正方形或者这个矩形再多画一条边，面积最大增加多少呢？在矩形较长的一边拆一下，设边长为 $\sqrt{2}k$ ，能多画出的面积为 $k-\frac{1}{2}$ 。

## F. Subsequence Count

solved by chitanda, upsolved by none

---

chitanda's solution

先考虑一个 01 序列 $a$ 如何寻找不同的子序列个数。

考虑 $f[i]$ 为以序列第 $i$ 个数作为结尾能增加的不同子序列个数，找到它前面最近的 $j$ 满足 $a[i]=a[j]$ ，然后 $f[i]=\sum_{k=j}^{i-1}f[k]$ ，如果找不到这样的 $j$ ，那么 $f[i]=1+\sum_{k=1}^{i-1}f[k]$ 。

由于题目涉及区间操作，我们应该弄明白如何合并两个区间，快速计算出新的答案。考虑前一个区间要给后一个区间第一个 $0$ 累加的 DP 值为 $X$ ，给第一个 $1$ 累加的 DP 值为 $Y$ 。而我们之前在 DP 后面那个区间的时候，不直接计算出 DP 值，而是将 DP 值以 $(x,y)$ 的形式表示，即真正的 DP 值为 $x\times X+y\times Y$ 。而实际上这样做之后，前一个区间的 $X$ 和 $Y$ 也是以 $(x,y)$ 的形式表示的，那么我们需要这么两个东西：$\text{last}[i][j](0\le i\le1,0\le j\le1 )$ 表示当前这个区间对接在这个区间后面的区间的第一个 $i$ 的贡献，为 $\text{last}[i][0]\times X +\text{last}[i][1]\times Y$ ，$X$ 为当前这个区间的前面那个区间给当前区间第一个 $0$ 的贡献，$Y$ 则为给第一个 $1$ 的贡献；$\text{cnt}[i](0\le i\le1)$ 则表示当前区间的不同子序列个数为 $\text{cnt}[0]\times X+\text{cnt}[1]\times Y$ 。

考虑用线段树维护即可，设当前点为 $t$ ，左儿子为 $ls$ ，右儿子为 $rs$ ，那么有：$\text{last}_t=\text{last}_{rs}\times \text{last}_{ls}$ ，$\text{cnt}_t=\text{cnt}_{ls}+\text{cnt}_{rs}\times \text{last}_{ls}$，这里的加法和乘法都为矩阵操作。而翻转一个区间，则只需交换这个区间的 $\text{last}[0][0]$ 和 $\text{last}[1][1]$ ，$\text{last}[0][1]$ 和 $\text{last}[1][0]$ 以及 $\text{cnt}[0]$ 和 $\text{cnt}[1]$ 即可。

## G. Palindrome Function

solved by chitanda, upsolved by none

---

chitanda's solution

枚举进制，类似数位 DP 一样计算即可。

## H. The Karting

sovled by braveTester, upsolved by none

---

braveTester's solution

一个环路可以按照转弯的地方切成若干条直线段。容易发现，在一个转弯的检查点，一定连接了两条直线段，故有如下 DP。

令 $f[i][j][k]$ 表示考虑完前 $i - 1$ 个点，有 $2j$ 条直线段到达 $i$，还要选 $k$ 个点时的最大难度和。对于 $i$，有以下选择：

1. 不成为检查点。
2. 成为检查点，但不是转弯点。限制条件为 $j > 0$。
3. 成为检查点，且从左往右看，开了两条新的直线段。
4. 成为检查点，且从左往右看，合并了两条直线段。

根据上述决策可以直接写出转移方程。状态数为 $O(n^3)$，转移 $O(1)$，故总复杂度 $O(n^3)$。

## I. The Designer

upsolved by skywalkert

---

skywalkert's solution

场上代码除 $0$ 了，尴尬。

设 $R_1 \geq R_2$，第 $i$ 个小圆半径为 $r_i$，反演半径为 $r$。

将大圆关于他们的交点反演成两条直线，小圆则反演成与这两条直线相切的圆，且第 $i$ $(i > 1)$ 个小圆和第 $\max\{i - 2, 1\}$ 个小圆相外切。

对于第 $i$ 个反演后的小圆，设其半径为 $r'_i$，若其圆心到原点的距离为 $d$，则有 $r_i = r^2 {r'}_i / \left(d^2 - {r'}_i^2\right)$，根据反演后小圆的圆心坐标可得
$$
r_i = \frac{R_1 R_2 (R_1 - R_2)}{R_1 R_2 + {\left \lfloor \frac{i}{2} \right \rfloor}^2 (R_1 - R_2)^2}。
$$

所求即
$$
\sum_{i = 1}^{n}{\pi r_i^2} = \pi \sum_{i = 1}^{t}{\frac{R_1 R_2 (R_1 - R_2)}{R_1 R_2 + {\left \lfloor \frac{i}{2} \right \rfloor}^2 (R_1 - R_2)^2}} + O\left(\frac{8 \pi R_1^2 R_2^2}{3 (R_1 - R_2)^2 t^3}\right)，
$$
考虑到系数和精度的问题可以取 $t = \min\{n, 10^5\}$ 来近似。

## J. Graph Of Zhuper

solved by skywalkert, upsolved by none

---

skywalkert's solution

设 $f_d(n)$ 表示带标号 $n$ 点简单无向图且每个连通块大小是 $d$ 倍数的方案数， $g_d(n)$ 表示带标号 $n$ 点简单连通无向图且连通块大小是 $d$ 倍数的方案数。

所求可以表示为
$$
\begin{align}
\sum_{d \geq 1}{d \sum_{k}{\mu(k) f_{k d}(n)}} &= \sum_{d | n}{f_d(n) \sum_{k | d}{\frac{\mu(k) d}{k}}}\\
&= \sum_{d | n}{\varphi(d) f_d(n)}。
\end{align}
$$

注意到枚举 $1$ 号点所在连通块大小可知 $f_d(n) = \sum_{i = 1}^{n}{{n - 1 \choose i - 1} g_d(i) f_d(n - i)}$，从而可以从 $g_d$ 得出 $f_d$，也可以从 $f_d$ 得到 $g_d$，都可以利用分治 $\mathcal{O}(n \log^2 n)$ 解决偏序关系上的计算，或是使用多项式幂级数做到 $\mathcal{O}(n \log n)$，但对于 $n < 2^{18}$ 的实数 FFT 来说二者效率持平。

显然有 $f_1(n) = 2^{\frac{n (n - 1)}{2}}$ 和 $g_d(n) = [d | n] g_1(n)$，因此可以求出 $g_1(n)$ 后依次求出 $f_d(n)$，时间复杂度 $\mathcal{O}(\sum_{d | n}{d \log d})$，在 $n \leq 30000$ 时运算量和 $n \log n$ 差不多。

## K. Convolution Layer

upsolved by skywalkert

---

skywalkert's solution

注意到负负得正等同于异或运算，关于长度为 $64$ 中间层进行压位即可，时间复杂度 $\mathcal{O}(n m h_{out} w_{out} h_w w_w)$。

~~这复杂度怎么能过嘛~~

# Replay and Summary

## Replay

难得没人迟到，值得表扬。

首先 L 从头开始看题，T 从尾开始看题，H 从中间开始看题。

L 读了 A 发现极其有诱惑力，但是想起自己读题的职责，于是继续读。之后发现 C 比较水，于是上去写，一发 MLE ，改了改就过了。H 推了推 E，上去飞速抢了个一血。

然后 L 觉得 D 就是个后缀自动机，但是自己多年未写，技艺生疏，让 H 写了。H 飞快写完交上去之后 MLE 了，又改了改算了算空间，但交上去还是 MLE 了。

于是 T 上来搞 I 。H 通过他队提交记录的内存断定应该是 KMP，于是 L 想了想告诉 H D 题 KMP 的做法。

T 的 I 题 TLE 了，于是 H 上来把 D 切了。

期间 L 读到 H 为止开始想 A。

T 继续搞了搞 I，交了两发 wa ，于是 H 上来先敲 G，交了一发 wa，改了改过了。

然后 T 又交了一发 wa。

L 终于把 A 的构造搞出来了，上去切了。

然后 T 又交了两发 wa。

H 也终于想出 F 了，上去写了挺久一发过了。

L 发现 H 其实是水题，马上上去切了。

T 又交了一发 wa 后，终于决定先搞 J。T 抄了三个题的板子后一发过了 J，强无敌。

然后 T 继续搞 I。

H 中间想了想 K ，觉得暴力搞就行，但不太敢上，然后想了想 B，觉得应该是水题，不过也没时间写了。

最后 L 和 T 一直在搞 I，最后也没有搞出来...赛后发现近似的时候除了 $0$，然后没近似也可以过...一口老血...

## braveTester

出了构造和 H（虽然是个水），还是蛮开心的。

我的队友都好棒啊！好棒啊！好棒啊！

最后的 10min 应该老老实实去读下题，然后读读 tls 的代码的...不应该花时间推和 tls 一样的公式...

## skywalkert

倒着读每开一个题就发现一个丧病题……首先读 K 想了个 K 的压位，感觉复杂度并不能过，想从输出入手化简复杂度结果并无卵用，然后读 J 想清楚了大概要哪些生成函数，接着读 I 发现是个老题准备直接搞，结果搞了一整场……L 传达了下 A 和 C 的题意，卡 I 中不太能思考。中途等结果时读 F 感觉是个线段树，和 H 讨论了下就归 H 思考了，不久后 L 和我讨论了下 H，感觉很水然后就归 L 思考了。卡到最后一个半小时感觉不妙，于是先去写了 J 的 FFT，写的过程中在卷积长度上纠结了一会，最后感觉没有时间写 K 只好搞搞 I 的精度，没想到死在浮点数除零了……身败名裂。

## chitanda

总体还好，在 tls 卡题的时候能够稳住节奏稳定贡献，小不足就是写题还略慢以及调试花了较长时间，以及最后没有一起帮助 tls 查错。