# Contest Info

date: 2017.08.07 - 2017.08.29

[practice link](https://vjudge.net/contest/176816)

# Solutions

## A. Bipartite Graph

solved by chitanda

---

chitanda's solution

一开始想的是奇环上的点肯定得删一个，那么所有奇环的交就是答案，后来发现没法找到所有奇环。

考虑分治，对一个分治区间，若要分治到左半区间，则将所有右边区间的点的与左半区间无关的边做并查集合并，若合法，递归到左半区间，处理完左半区间后，需要还原并查集再处理右半区间。

使用按秩合并的可持久化并查集即可，不做路径压缩。

## B. Yu-Gi-Oh!

solved by braveTester

---

braveTester's solution

KM 板子题。

---

braveTester's comment

这题数据太水导致 $O\left(n^4\right)$ 的板子也可以过...

参考~~（基本照抄）~~了新月的 $O\left(n^3\right)$ [板子](https://wiki.icpc-camp.org/new-meta/KM.html)。

## C. Flight

solved by chitanda

---

chitanda's solution

很容易可以发现，答案只会在 $[-1,3]$ ，那么我们需要判断答案到底是哪个。

找出整个树的直径，设为 $U$ 到 $V$ ，并标记从 $U$ 到 $V$ 的所有点，设 $f(u)$ 为距离点 $u$ 最近的被标记的点。从各个被标记的点出发，不经过其他被标记的点做 DFS。

那么对于一个询问：

* 如果 $u=v$ ，那么答案必然是 $0$

* 如果 $f(u)=f(v)$ ，那么找出 $u$ 和 $v$ 在以 $f(u)$ 为根的树中的 $\text{lca}$ ，根据 $\text{lca}$ 算出两点之间的距离，设为 $\text{dis}$

	* 如果 $\text{dis}\ge d$ 则答案为 $1$

	* 否则判断两点到 $U$ 和 $V$ 的距离，如果两个点到 $U$ 的距离都不小于 $d$ 或者到 $V$ 的距离都不小于 $d$ ，那么答案为 $2$ ，否则只能为 $-1$。

* 如果 $f(u) \neq f(v)$，

	* 如果两点间距离不小于 $d$ ，答案为 $1$

	* 如果点 $u$ 到 $U$ 的距离和到 $V$ 的距离都小于 $d$ ，或者 $v$ 到直径两端点的距离都小于 $d$ ，那么答案为 $-1$

	* 如果两个点到 $U$ 的距离都不小于 $d$ 或者到 $V$ 的距离都不小于 $d$ ，那么答案为 $2$

	* 否则，我们需要判断能否找到一个 $w$ ，满足 $f(w)$ 在 $f(u)$ 到 $f(v)$ 的路径上（不包括端点），且 $\min\{\text{dis}(u,w),\text{dis}(v,w)\}\ge d$。那么我们需要枚举 $\text{dis}(u,w)$ 和 $\text{dis}(v,w)$ 的大小关系，即找到 $u$ 和 $v$ 的中点 $c$ ，然后分两段在被标记的路径上分别做 RMQ（如果 $c$ 不在 $f(w)$ 所应满足的区间内，则只需做一次），判断是否存在 $w$ 。如果存在，答案为 $2$ ，否则为 $3$ 。

总复杂度 $O(n\log n+Q)$

实际上，由于数据过水，不判断点 $w$ 的存在也可以通过，此时可以省去很多处理，只需要能算出 $u,v,U,V$ 两两之间的距离即可。

## D. Asa's Chess Problem

upsolved by skywalkert

---

skywalkert's solution

~~一开始想任意两个格子交换，然后发现不会做……~~

容量带上下界的最小费用可行流。

计算初始状态时的行和、列和，每次交换只会更改某两行和或者某两列和，并且变化是 1，从大的那边往小的那边连一条容量为 1、费用为 1 的边即可。

源往每个点的限制是流量恰好为初始状态的数值，每个点往汇的限制是给定的区间。

增加新源汇对下界进行流量平衡，增加汇到源的容量无穷、费用为 0 的边将问题转化为最小费用最大流，无负权可以直接 dijkstra 跑 prim-dual 算法，完全满流时有解。

## E. CRB and Graph

solved by braveTester

---

braveTester's solution

用 tarjan 找桥，然后分别计算断掉桥之后两个连通块所包含的点最大标号，较小者为 $u$，然后去另一个联通块里找大于 $u$ 的最小的 $v$。

由于保证图连通，因此后面部分得到极大简化。以 $n$ 号点为根找桥，则对于每个桥，只需要计算远离 $n$ 的连通块中点最大标号 $x$，最终答案为 $(x, x + 1)$。

复杂度 $O(n)$。

---

braveTester's comment

这题如果原图不连通，则可以把每个连通块抓出来，按照点标号大小关系重标号一下再做，最后还原即可。由于有了排序复杂度会变成 $O(n \log n)$。

## F. King's Pilots

upsolved by skywalkert

---

skywalkert's solution

依次增加限制进行建图。

- 第一天之前有 $k$ 个飞行员，第 $i$ 天要有 $p_i$ 个飞行员参加表演，参加完表演的飞行员不能继续参加表演，未参加表演的飞行员可以参加之后的表演：建立源点 $S$、汇点 $T$ 和 $n$ 天的节点，$S$ 向第 $1$ 天的点连容量为 $k$、费用为 $0$ 的边，第 $i$ 天的点向第 $i + 1$ 天的点连容量无限、费用为 $0$ 的边，第 $i$ 天的点向 $T$ 连容量为 $p_i$、费用为 $0$ 的边。
- 可以花费 $P$ 天和 $Q$ 的费用训练出一个新的飞行员：如果需要这样的飞行员，必然是在一开始就训练，故 $S$ 向第 $P$ 天的点连容量无限、费用为 $Q$ 的边。
- 可以花费 $T_j$ 让一个参加完表演的飞行员在 $S_j$ 天后继续参加表演：由于第 $i$ 天恰好有 $p_i$ 个飞行员变成无法选择的状态，他们与可以选择的飞行员不同，故可以建立 $n$ 天的新节点，表示每一天新多出来的无法选择的飞行员，并且 $S$ 向第 $i$ 天的新点连容量为 $p_i$、费用为 $0$ 的边，第 $i$ 天的新点向第 $i + S_j$ 天的旧点连容量无限、费用为 $T_j$ 的边。

目标是求解该图的最小费用最大流，当该图的最大流量为 $\sum_{i = 1}^{n}{p_i}$ 时有解。初始图中无负权，直接使用 dijkstra 跑 prim-dual 算法即可。

## G. Red-black Cobweb

solved by chitanda

---

chitanda's solution

树分治，考虑总的减去非法的。

非法的情况有：红边数量大于黑边的两倍和黑边的数量大于红边的两倍，考虑前一种。

设两个点 $x$ 和 $y$ 到到当前根的路径的红边数分别为 $r_x$ 和 $r_y$ ，黑边数分别为 $b_x$ 和 $b_y$ ，那么有：$r_x+r_y>2b_x+2b_y$ ，即 $-(2b_y-r_y)>2b_x-r_x$ ，利用树状数组查询修改即可。

## H. Tree

upsolved by skywalkert

---

skywalkert's solution

随便找一个点 $u$，使得去掉 $u$ 之后任意一个连通块的大小不超过 $\frac{n}{2}$，那么总可以构造出排列 $p$ 使得 $i$ 到 $p_i$ 的距离最大化，记这样的点 $u$ 为 $rt$。

$i$ 与 $p_i$ 分别形成二分图的两边点集，$p_i = j$ 是可行的当且仅当 $i$ 到 $j$ 的路径必经 $rt$。

二分图 Hall 定理指出：对于二分图一边的点集中的任意 $k$ 个点，只有当它们至少与另一边点集的至少 $k$ 个点相邻，整个图才存在完美匹配。

考虑左边点集最坏情况（左边点数尽量大且与右边点集相邻点数最少），必然是选择去掉 $rt$ 后某个连通块里的所有点，这样的点数要小于等于不在该连通块里的点数。

在从左到右依次构造字典序最小解时，需要在左右点集不断删去匹配点对的同时依然满足上面的性质。

如果存在某个这样的连通块使得其中在左部的点数等于右部未匹配的点数减去该连通块在右部的点数，则该连通块中至少要选择一个点。任意时刻至多会有两个这样的连通块，并且当前左部尝试的匹配点至多会不在一个这样的连通块中，如果存在这样的连通块，那么右部必须从这个连通块里选择，否则对于左部点不是 $rt$ 的情况，右部会有一个连通块不能选择。

用线段树维护 dfs 序区间内还未选择的右部最小标号点即可。

## I. Transmigration tree

solved by chitanda

---

chitanda's solution

对于一个询问，只有两种可能，要么是 $u$ 直接到 $v$ ，要么是 $u$ 先到根再到 $v$ ，前者用 \text{lca} 解决，后者则可以预处理出每个点到根的最短距离。

每个点到根的最短距离有三种可能，一种是直接向上到根，一种是往下走到叶子再到根，还有一种是先向上走若干步，再向下走到叶子再到根。

## J. Garden

solved by chitanda

---

chitanda's solution

共 $n\times m\times 2^k$ 个状态 $(i,j,S)$ ，表示当前在点 $(i,j)$ ，已经连通的重要点的集合为 $S$ ，那么转移为：
$$
\text{dp}[i'][j'][S']=\text{dp}[i][j][S] + \text{cost}[i'][j']\\
\text{dp}[i][j][S|S']=\text{dp}[i][j][S]+\text{dp}[i][j][S']-\text{cost}[i][j]\ \ \ (S\cap S'=\varnothing)
$$
显然转移有环，因此用 spfa 跑最短路即可。

## K. Birthday

solved by chitanda

---

chitanda's solution

建立 AC 自动机，每个节点需要存它不断走 fail 遇到的第一个输入的完整串，这样就能用 $O(|S|)$ 空间和 $O(|S|+n^3)$ 时间处理出所有的子串关系（具有传递性）。

然后就是要求最长反链，最长反链 = 最小路径覆盖，而最小路径覆盖 = 点数 - 二分图匹配数，难点在于求出方案。

根据 [post](https://post.icpc-camp.org/d/225-codeforces-round-327-e-birthday) 上叉姐的说法，我们可以用二分图的最小点覆盖（用最少的点覆盖所有边）来解决，如果点 $u$ 在二分图左右两部分都不属于覆盖集，那么 $u$ 属于最大反链。

接下来问题转化为求二分图最小点覆盖集，根据 [matrix67 的博客](http://www.matrix67.com/blog/archives/116) 上的说法，在做完最大匹配后，从左边每个没被匹配的点出发，按匈牙利的做法走完所有可能的交错路径，并标记所有走过的点，最终左边没被标记的点和右边被标记了点就是最小点覆盖集。

## L. The King’s Problem

solved by chitanda

---

chitanda's solution

缩点之后，最小路径覆盖即答案（用匈牙利算法）。
