Contest Info
============

date: 2017.08.08 12:00-17:00

[practice link](http://acm.hdu.edu.cn/contests/contest_show.php?cid=763)

Solutions
=========

A. Rikka with Candies
---------------------

solved by skywalkert, upsolved by none

------------------------------------------------------------------------

skywalkert's solution

注意到答案是在模 $2$ 意义下的，可以使用 bitset
记录答案，并且可以剔除出现偶数次的元素，所以剩下的数字互不相同。

设评测机的位长为 $w$，对于 $b_i \geq w$ 的情况，可以根据
$k b_i \leq a_j < (k + 1) b_i$
分段将贡献产生，由于每次涉及至少一块的信息，故这部分的复杂度为
$\mathcal{O}\left(\frac{\max(a_i) m}{w}\right)$。

对于 $b_i < w$ 的情况，直接做 $(w - 1)$ 次模拟即可，这部分的复杂度为
$\mathcal{O}(w n)$，但是由于所有的 $b_i$
互不相同，所以这一块直接使用上面的方法做也是同样的复杂度。

B. Rikka with String
--------------------

solved by braveTester, upsolved by none

------------------------------------------------------------------------

braveTester's solution

将所有串建立 AC 自动机设为 $A$，反转之后建立 AC 自动机设为 $A'$。令
$f[i][\text{mask}][\text{state}][\text{state}']$ 表示构造了前 $i$
个字符，从头走走到 $A$ 的 $\text{state}$ 节点，从尾走走到 $A'$ 的
$\text{state}'$ 节点，$\text{mask}$ 所表示的字符串已经出现在构造的长为
$2i$
的串中的方案数。用队列维护有用状态，并用滚动数组转移即可，该部分复杂度
$O\left(2^n L \left(\sum_i |s_i|\right)^2\right)$。

对于已经构造完 $2L$ 个字符的状态
$f[L][\text{mask}][\text{state}][\text{state}']$，还要确定该状态是否合法。对每个串
DP 出在 $A$/$A'$
中每个节点对应的前缀/后缀集合，然后枚举状态检查一下即可。该部分预处理复杂度
$O(\sum_i |s_i|)$，检查复杂度
$O\left(n 2^n \left(\sum_i |s_i|\right)^2\right)$。

实际状态并没有那么多，只有
$O\left(2^n L \max_i\{|s_i|\} \sum_i |s_i|\right)$，可以轻松通过数据。

下面对不考虑 $\text{mask}$ 和 $i$ 的可能状态进行一些分析。设
$\text{dep}(\cdot)$ 为一个状态的深度，对于合法的状态集 $S$，其大小为 $$
|S| = \sum_{\text{dep}(\text{state}) < \text{dep}(\text{state}')} 1 + \sum_{\text{dep}(\text{state}) > \text{dep}(\text{state}')} 1 + \sum_{\text{dep}(\text{state}) = \text{dep}(\text{state}')} 1。
$$

由于当 $\text{dep}(\text{state}) < \text{dep}(\text{state}')$
时，$\text{state}$ 所代表的前缀按位取反再反转之后，必定是
$\text{state}'$ 代表的后缀，因此 $\text{state}$ 至多有 $\max_i\{|s_i|\}$
个，故等号右边第一项至多为
$\max_i\{|s_i|\} \sum_i |s_i|$，同理第二项至多为
$\max_i\{|s_i|\} \sum_i |s_i|$，第三项至多为 $\sum_i |s_i|$。因此
$|S| = O(\max_i\{|s_i|\} \sum_i |s_i|)$。

C. Rikka with Sequence
----------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

可持久化 Treap 的基本应用，由于时刻有用的空间是 $\mathcal{O}(n)$
的，许多无用空间可以在内存池将满时清理，在内存支持的情况下保证清理次数尽量少即可莽过去。

D. Rikka with Rock-paper-scissors
---------------------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

注意到本质不同的局面共有 $3^n$ 种，故 $s \cdot 3^{2 n}$
等价于所有局面的得分乘以 $3^n$ ，所求即
$3^n \sum_{a + b \geq 1} {{n \choose a + b} {a + b \choose a} \gcd(a, b)}$，其中
$\gcd(a, b) = \gcd(a + b, a)$。

注意到 $\varphi \ast I = Id$，即 $\sum_{d | n}{\varphi(d)} = n$，所以有
$\sum_{d | i, d | j}{\varphi(d)} = \gcd(i, j)$ ，所求即
$3^n \sum_{i = 1}^{n}{{n \choose i} \sum_{j = 0}^{i}{{i \choose j} \sum_{d | i, d | j}{\varphi(d)}}}$，其中
$i = a + b, j = a$ 。

化简可知所求为
$3^n n! \sum_{d = 1}^{n}{\varphi(d) \sum_{0 < i d \leq n}{\frac{1}{(n - i d)!} \sum_{0 \leq j \leq i}{\frac{1}{(j d)! ((i - j) d)!}}}}$，因此只需枚举
$d$，找出 $d$ 的倍数 $j d$ 将相应的 $\frac{1}{(j d)!}$ 进行卷积，再作为
$d$ 的倍数 $i d$ 产生贡献，时间复杂度
$\mathcal{O}(\sum_{d = 1}^{n}{\frac{n}{d} \log \frac{n}{d}}) = \mathcal{O}(n \log^2 n)$。

Tips: 请队友不要再找什么超好的 FFT 板子了，该 wiki 上的板子已经很好了。

------------------------------------------------------------------------

braveTester's comment

推导一下题目要用的式子： $$
\begin{align}
3^n \sum_{i, j} \binom{n}{i} \binom{n - i}{j} (i, j) &= 3^n \sum_{i, j, d} \binom{n}{i} \binom{n - i}{j} d [(i, j) = d]\\
&= 3^n \sum_{i, j, d} \binom{n}{i} \binom{n - i}{j} d \sum_{x} \mu(d, x)\zeta(x, (i, j))\\
&= 3^n \sum_{i, j, d, x} \binom{n}{i} \binom{n - i}{j} d \mu(d, x)\zeta(x, (i, j))\\
&= 3^n \sum_{x} \sum_{d \mid x} d \mu(1, \frac{x}{d}) \sum_{i, j} \binom{n}{i} \binom{n - i}{j} \zeta(x, (i, j))\\
&= 3^n \sum_{x} \varphi(x) \sum_{i \le s} \binom{n}{s} \binom{s}{i} \zeta(x, (i, s))\\
&= 3^n \sum_{x} \varphi(x) \sum_{i \le s} \binom{n}{s} \binom{s}{i} [(x \mid i) \wedge (x \mid s) \wedge (s > 0)]\\
&= 3^n \sum_{x} \varphi(x) \sum_{s = 1}^{\lfloor n / x \rfloor} \sum_{i = 0}^{s} \binom{n}{sx} \binom{sx}{ix}\\
&= 3^n \sum_{x} \varphi(x) \sum_{s = 1}^{\lfloor n / x \rfloor} \frac{n!}{(n - sx)!} \sum_{i = 0}^{x} \frac{1}{(ix)!} \times \frac{1}{((s - i)x)!}。
\end{align}
$$ 需要注意一点是，推导的时候认为偏序关系是建立在
$\{1, 2, 3, \dots, n\}$ 上的。容易验证第一步等号式子意义不变，因为在这里
$(0, 0) := 0$。之后的推导只需要保证 $d$，$x$ 和 $(i, j)$
在这个集合当中即可，所以在将 $\zeta$ 化成逻辑表达式时需要额外加上
$s > 0$ 的条件。

E. Rikka with Terrorist
-----------------------

upsolved by skywalkert

------------------------------------------------------------------------

skywalkert's solution

不妨先分别考虑四个方向的情况，这里主要考虑询问点 $(x, y)$
作为右上角的情况（其他方向类似），此时在其左下方的障碍点（含左方与下方）会对其产生影响。

具体来说，不妨令 $x'_{i}$ 表示纵坐标为 $i$
且在询问点左下方的障碍中横坐标的最大值，则询问点作为右上角的贡献为
$\sum_{i \leq y}{y - \max_{i \leq j \leq y}{x'_j}}$ 。

使用一条沿 x 轴递增的扫描线离线进行贡献的计算，尝试利用线段树维护 $x'$
的区间询问值，具体来说 $[L, R]$ 维护 $\max_{i = L}^{R}{x'_i}$ 和
$\sum_{i = L}^{R}{\max_{i \leq j \leq R}{x'_j}}$
，直接维护看上去是单次修改 $\mathcal{O}(n)$
的，事实上对于每次修改，产生影响的区间只有 $\mathcal{O}(\log n)$
段，每次需要重算的信息主要是修改了右子树导致的，这时候可以利用分类讨论在
$\mathcal{O}(\log n)$ 的时间内完成一个区间信息的更新。

具体来说，当右子树有了新的最小值 $v$
时，左子树内部信息不会发生变化，但左子树对该树的贡献会发生变化，需要重新计算。如果左子树的最小值不小于
$v$ ，则可以直接得出它的贡献；否则，如果左子树的右子树最小值小于 $v$
，则左子树的左子树产生的贡献就是其对左子树产生的贡献，左子树的右子树产生的贡献可以继续递归计算；否则，左子树的右子树最小值不小于
$v$
，则左子树的右子树可以直接计算出贡献，左子树的左子树可以继续递归计算。显然这样只会涉及到
$\mathcal{O}(\log n)$ 个节点的信息。

处理询问时也是将询问区间划分成线段树上的区间，类似上述更新某个节点信息的做法从右到左依次处理每个区间的信息。总时间复杂度
$\mathcal{O}(n \log^2 n)$ 。

具体实现时可以只考虑一到两个方向，然后将整个坐标系翻转再做一遍即可。

F. Rikka with Graph
-------------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

当 $m\le n-1$
时，显然最好的连法是连成一个菊花图，然后考虑每多一条边，可以使一对点的距离从
$2$ 变成 $1$。

G. Rikka with Match
-------------------

upsolved by chitanda, skywalkert

------------------------------------------------------------------------

chitanda's solution

$f[i][j][0/1]$ 表示 $i$ 的子树，在模 $m$ 下有 $j$ 个配对，且 $i$
这个点是否已经配对的方案数，看上去总复杂度是 $O(nm^2)$ 的，实际上是
$O(nm)$ 的。

------------------------------------------------------------------------

braveTester's comment

下给出暴力转移的代价是 $O(nm)$ 的证明。

给出 $n$ 堆石子，每堆石子初始为
$1$，每个石子有一个唯一的整数编号。每次只能合并两堆石子，堆 $i$ 和堆 $j$
的合并代价为
$\min\{\text{size}(i), m\} \times \min\{\text{size}(j), m\}$，新堆的编号为
$\text{size}$ 较大者的编号。

设大小大于 $m$ 的堆的集合为 $A$，剩下的集合为
$B$。每次合并完后，如果可能的话，需要调整 $A$ 和 $B$。

令序列 $X := \{x_k\}$ 为 $A$ 的添加序列。易得 $A$ 集合间元素合并次数 $t$
不超过 $|X|$，每次代价为 $m^2$，因此 $A$ 集合间元素合并总代价有 $$
\begin{align}
\sum_{k = 1}^t m^2 &< \sum_{k = 1}^t \text{size}_{B \rightarrow A}(x_k) \times m\\
&\le \sum_{k = 1}^{|X|} \text{size}_{B \rightarrow A}(x_k) \times m\\
&\le nm。
\end{align}
$$ 其中 $\text{size}_{B \rightarrow A}(x_k)$ 表示 $x_k$ 从 $B$ 转入 $A$
时的大小。由于 $A$ 集合的性质，对任意 $k$，必有
$\text{size}_{B \rightarrow A}(x_k) > m$，所以有第一个小于号。

对于 $i \in A$ 和 $j \in B$ 间的合并，易得，每次合并完成后，新堆编号为
$i$。因此 $A$ 和 $B$ 集合元素合并总代价有 $$
\begin{align}
\sum_{\text{$j$ is merged into $i$}} m \times \text{size}_{\text{merged}}(j) &\le m\sum_{j} \text{size}_{\text{merged}}(j)\\
&\le nm。
\end{align}
$$ 其中 $\text{size}_{\text{merged}}(j)$ 表示将 $j$ 合并进对应的 $i$
时的大小。因为每次相当于从 $B$ 中拿点到 $A$ 中，因此其总和不超过 $n$。

对于 $B$ 集合间元素 $i$ 和 $j$ 的合并，合并代价可以写为 $$
\begin{align}
\text{size}(i) \times \text{size}(j) &= \sum_{u \in i} \sum_{v \in j} 1\\
&= \sum_{u \in i} \sum_{v \in j} [u < v] + \sum_{u \in j} \sum_{v \in i} [u < v]。
\end{align}
$$
上式的意义为对于一个石子，只计算另一个合并集合中比该石子编号大的贡献。因为
$i$ 和 $j$ 都在 $B$ 中，因此一个石子产生的贡献不超过 $2m$。由于至多有
$n$ 个石子，因此这部分的总贡献至多为 $2nm$。

综上，暴力合并的代价为 $O(nm)$。

------------------------------------------------------------------------

braveTester's comment 2

吉老师的分析第二部分和我的第三部分类似，第一部分则是把我的第一、二部分合起来考虑了。沿用上面的记号，如果
$i$ 和 $j$ 其中一个属于
$A$，那么认为另一个集合（如果都在，随便选一个）中的点在合并之后被删除了，因为在之后的合并中可认为不产生贡献。合并的时候，每个被删除的点至多贡献
$m$，而每个点至多被删除一次，因此第一二部分合起来贡献为 $nm$。

不得不说吉老师还是高啊...我的证明如果区分 $B \rightarrow A$
的石子堆和合并至 $A$ 的石子堆，两个界加起来总共也是 $nm$。

附上[链接](http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=626)。因为
BestCoder
的题解好像没有直接链接的功能，所以就提供比赛链接好了...对应的题目为 D.
Rikka with Game。

H. Rikka with Subset
--------------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

先把 $0$ 的个数算出来，即 $\log_2{b[0]}$，将 $b$ 数组所有数除
$b[0]$。可以知道当前 $b$
中最小的数即剩下的数的最小值，找出这个数，并且从 $b$
中删去已知数的集合的包含它的所有子集，重复这个过程。

I. Rikka with Number
--------------------

upsolved by chitanda

------------------------------------------------------------------------

chitanda's solution

显然一个数最多在一个进制下是好的，那么可以枚举 $d$ 进制，算出 $d$
进制下多少 $d$ 排列表示的数在区间 $[1,n]$ 内。

每个进制的好数在一个区间内，如果 $n$
大于等于这个区间右端点，那么所有这个进制下的好数都是可行的，如果小于左端点，那么可以
`break` 了。

当 $n$ 在这个区间内时，需要将 $n$ 分解成 $d$ 进制数，然后进行数位 dp
算出答案。

可以二分出需要进行数位 DP 的这个 $d$
进制，二分的时候，可以大致估计当前进制下好数的区间左端点和右端点在十进制下的长度，以便快速判断。

J. Rikka with K-Match
---------------------

upsolved by chitanda

------------------------------------------------------------------------

chitanda's solution

非常的黑科技...

随着 $K$ 的增加，最小带权匹配的权值和肯定也是递增的，并且 $K$ 每增加
$1$，权值和所增加的值也是递增的。若将 $(K, \text{sum of weight})$
看成坐标上的点，那么整个图像的斜率是大于等于 $0$ 且递增的，即是下凸的。

那么我们可以二分一个斜率，找到和这个斜率所代表的直线与图像相切的点，直到这个点的横坐标为
$K$。找这个点的方法为：将所有边权减去斜率，然后做一遍最小权匹配，最小权匹配中的边数即横坐标，最小权匹配
+ 边数 \* 斜率即纵坐标。

最小权匹配可以用轮廓线 DP 来解决，$f[i][j][\text{mask}]$ 表示做到
$(i,j)$ ，$\text{mask}$ 为此时轮廓线上 $m$
个点是否已匹配的最小权值和，在 DP 过程中记录一下边数即可。

K. Rikka with Competition
-------------------------

solved by chitanda, upsolved by none

------------------------------------------------------------------------

chitanda's solution

签到题

Replay and Summary
==================

Replay
------

刚开始只有 H 和 L，此时的 T 正在睡觉。

H 从后往前读，L 从前往后读。H 发现 K 是个签到，写了之后 A 了。然后 H
看了看 F 没什么思路，之后发现过的人比较多，于是看了看也会做了，很快写了
A 了。

L 看了看 ABCD，发现 B 是个水，但是不太想写，开始推 D。

此时 H 读完 H，看人过的比较多，想了很久之后终于会做了，开始敲
H。交了一发之后 WA 了，此时 L 也没推出 D，于是开始上手写 B。

L 没写一会儿，H 改了个小错，然后 A 了 H。

L 写着写着 B 突然发现复杂度有些不太对，于是顿了一会儿，和 H
讨论了下，发现自己并没有想错，然后继续码码码。期间 L 打电话叫醒了
T，一会儿后 T 赶了过来。

T 和 H 讨论了下 I，发现是个数位 DP，然后又讨论了下
A，推了会儿也会了。此时 L 刚编译好，但没过样例，自觉机时占用太多，于是换
T 写 A。L 冷静了下读了下代码，发现了几处小错，等 T
停下来之后改了改交了，MLE。

然后换 T 继续写 A。没一会儿 T 又卡了，于是 L 改成滚动数组，变成了 WA。T
继续写 A。

期间 L 改了个小错 A 了 A。

T 写完交了一发 WA，改了改后 A 了。期间 H 看出了 G 的做法，和写完了的 T
讨论了一会儿之后，T 和 H 一起开始写 G。

T 了三发之后，决定换 H 写 I，一直到比赛结束。最后没能通过。

期间 L 和 T 开始看其它的题，但是都不太会做。T 在最后 10min 时推出了 D
的做法，但是已经没有时间写了。

braveTester
-----------

会的 B 写了好久，还 WA
了两发，为本次罚时爆炸奠定了基础...这场没啥说的，不会的东西很多...也算长见识了...

chitanda
--------

坑 tls 去写 07 的 $O(nm\log m)$ 的 NTT
做法，导致中后期完全崩了，之后自己写 09
，由于自己高精度板子效率十分低下，改压位改了很久也没改对（还是代码能力太差），最终没能通过。对复杂度的估计还有很大的欠缺。

skywalkert
----------

珍爱生命远离修仙
