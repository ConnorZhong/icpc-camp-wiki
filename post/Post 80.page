# 2015 上海赛区网络赛 B Antonidas

窝来分享两个做法！

1. （正常向）树分治，对于每个分治中心 $r$，计算 $r$ 到 $v$ 的路径是否是前缀 / 后缀，如果长度 $l$ 和 $m - l$ 的前 / 后缀都存在，那么就找到了。这里当然可以 hash，但是也可以对着原串和原串的逆建后缀自动机，直接在后缀自动机上走~~ 也可以 kmp~~。复杂度是 $O(n \log n)$ 。

2. （猎奇向）计算 $s(v, x)$ 表示 $v$ 向下是否能从 $x$ 开始的后缀，类似地 $p(v, x)$ 表示是否能匹配到 $x$ 的前缀。这里可以用一个 std::bitset 来存储 $s(v, *)$。如果 $p(v) \cap s(v)$ 非零，那么就找到解了。具体转移的时候，要先预处理 $pos(c)$ 表示字母 $c$  所在的位置，转移就是 $s(v) = \left( \bigcup_{u} s(u) \mathrm{\ shl\ } 1\right)  \cap pos(c[v])$。

[ftiasch wrote on 2015-09-26T12:54:18]

---

好评！

[Nero wrote on 2015-09-26T13:06:33]

---

这个猎奇向的做法真的能过吗……写了一下超时了哎……

[y761823 wrote on 2015-09-26T15:29:11]

---

@y761823#705 不确定。据说我校有人用 std::bitset 过了，但是具体怎么 std::bitset 是我脑补的 = =

[ftiasch wrote on 2015-09-26T15:31:26]

---

@ftiasch#706 Σ( ° △ °|||)︴

[y761823 wrote on 2015-09-26T15:33:47]

---

@y761823#707 稍等一下，待我询问一番。

[ftiasch wrote on 2015-09-26T15:35:48]

---

@y761823#707 姿势就是这样的，但是差个优化。
因为数据不都是极限数据，要开100,1000,10000的bitset各一个，针对不同的范围分别使用。

[AngryBacon wrote on 2015-09-26T15:39:22]

---

@AngryBacon#710 具体来说……这代码要怎么写呢？

[ftiasch wrote on 2015-09-26T15:40:58]

---

@AngryBacon#710 哎，你怎么知道不都是极限数据的……

[y761823 wrote on 2015-09-26T15:42:31]

---

好吧，开100,1000,10000的bitset各一个确实能过……1466MS……_(:з」∠)_

[y761823 wrote on 2015-09-26T15:48:36]

---

我是每个点开两个set,一个维护以该点为结尾的前缀,一个维护以该点为开始的后缀,然后直接水的,1794ms, 5008k.

[luoxinchen wrote on 2015-09-26T16:03:03]

---

@y761823#712 我校的小朋友就加了这个优化过掉了，我也表示震惊。 

[AngryBacon wrote on 2015-09-26T16:23:28]

---

@ftiasch#711 我没看他们代码……感觉这意义不大

[AngryBacon wrote on 2015-09-26T16:24:35]

---

@AngryBacon#717 我觉得可能是因为为了提高有解的可能性随机数据的时候把$|S|$弄得比较小？_(:з」∠)_，感觉这像是水过去的……

[y761823 wrote on 2015-09-26T16:31:21]

---

> @y761823#719 觉得可能是因为为了提高有解的可能性随机数据的时候把|S|弄得比较小？_(:з」∠)_，感觉这像是水过去的……

相信我，随机数据全是 NO = =

[ftiasch wrote on 2015-09-26T16:46:36]

---

@y761823#719 相信我，随机数据全是 NO。

[ftiasch wrote on 2015-09-26T16:46:53]

---

反向爆搜。。。水过。

[error408 wrote on 2015-09-27T02:14:08]

---

计算每个点到分治中心的路径能否匹配某一前缀/后缀那里用一个KMP就行了。。

[splinter wrote on 2015-09-27T02:21:33]

---

@splinter#728 啊啊啊……蠢了 = =

[ftiasch wrote on 2015-09-27T02:23:30]

---

@ftiasch#721 那倒不会。我把n弄成1W，把$|S|$弄成randint(1, 1000)，字符集只要'a'、'b'，随机200组还是有7个Find嗒Σ( ° △ °|||)︴

[y761823 wrote on 2015-09-27T02:25:32]

---

@y761823#730 确实差不多啊，你随机树的话，期望深度是 $O(\log n)$ 级别的。你这个数据也差不多说明了这个界嘛。

[ftiasch wrote on 2015-09-27T02:31:12]

---

写点分hash看着一大堆乱搞算法不说话。

[fancycoder wrote on 2015-09-27T03:08:14]

---

@splinter#728 请问用KMP怎么做啊= =？

[y761823 wrote on 2015-09-29T10:47:31]

---

@y761823#969 窝感觉窝在瞎 bb，窝也不知道怎么做 

[ftiasch wrote on 2015-09-29T11:40:37]

---

@ftiasch#970 想不明白，感觉窝的智商不要窝了T_T

[y761823 wrote on 2015-09-29T11:32:33]

---

@ftiasch#977 所以中间的楼是人工炸掉了吗Σ( ° △ °|||)︴

[y761823 wrote on 2015-09-29T11:42:52]

---

@ftiasch#975 窝猜是2？用hash窝还是会做的……

[y761823 wrote on 2015-09-29T11:37:03]

---

@y761823#978 系统出问题了（喂

[ftiasch wrote on 2015-09-29T11:56:26]

---

@y761823#969 @ftiasch#977 按照深度从浅到深计算。。在计算节点x向上匹配最长多长的前缀时我们已经知道了x的父亲y向上最长匹配L的长度。考虑S串在kmp算法中的next数组，假设x向上最长匹配k的长度，那么必然有：next[k+1]==k，且S[1]==C[x]
后一个条件是可以直接搞的，前一个相当于一个静态前缀最大值的查询，随便搞搞就好。。

[splinter wrote on 2015-09-29T14:00:59]

---

@splinter#1004 不是很明白/(ㄒoㄒ)/~~，所以L有什么用，为啥必然有next[k+1]=k啊>_<

[y761823 wrote on 2015-09-29T14:41:17]

---

@y761823#1005 把节点x到根的路径拎出来，记为A串。。那么由x的父亲y能匹配L的长度：A[2..L+1]==S[1..L]，由x能匹配k的长度：A[1..k]==S[1..k]。假设k<L，我们有：A[1..k]=S[1..k]，同时有A[1..k]==A[1]+A[2..k]=A[1]+S[1..k-1]，也即S[2..k]==S[1..k-1]，所以next[k]==k-1（喔不好意思之前手滑写错了）。k>=L的情况感觉上差不多。。。

[splinter wrote on 2015-09-29T15:00:35]

---

@y761823#1005 喔凸然发现k>L+1的情况，跑完这个之后还要继续暴力向上延长。。。如果树长成这样：a-b-a-b-...，S串也长成这样：a-b-a-b-a-b-..复杂度就爆了。。。无视我说的话吧 @叉姐求系统出错QAQ

[splinter wrote on 2015-09-29T15:12:00]

---

@splinter#1010 我想象中……你这个问题是没办法 KMP 的。

你的问题相当于，现在有一个 $S$，还有一个动态的 $P$，你往 $P$ 的尾部添删字符，每次需要判断 $P$ 是否是 $S$ 的一个后缀。
所以我比赛的时候抄了一个后缀自动机是正常的。 KMP 似乎有点难处理吧。

[ftiasch wrote on 2015-09-29T15:14:05]

---

@ftiasch#1011 所以叉姐您不打算把1L的KMP[S]黑历史[/S]删掉吗_(:з」∠)_

[y761823 wrote on 2015-09-30T03:28:52]

---

@y761823#1021 那删删删。

[ftiasch wrote on 2015-09-30T03:30:48]

---

@ftiasch#1011 以$P$来建KMP呢，dfs的时候一边算根到当前路径的$next[]$，一边跟$S$做匹配。（怎么感觉跟AC自动机差不多了……

[wodesuck wrote on 2015-09-30T04:01:00]

---

@wodesuck#1024 虽然你讲得好像有些道理，但是复杂度好像不对呢？

[ftiasch wrote on 2015-09-30T04:48:07]

---

