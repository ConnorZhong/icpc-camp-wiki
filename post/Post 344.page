# DLX处理重复覆盖的A*函数的机制是怎么运作？

```
int p()
	{
		int res=0;
		for(int c=R[0];c!=0;c=R[c])v[c]=false;
		for(int c=R[0];c!=0;c=R[c])
			if(!v[c])
			{
				++res;
				v[c]=true;
				for(int i=D[c];i!=c;i=D[i])
					for(int j=R[i];j!=i;j=R[j])
						v[Col[j]]=true;
			}
		return res;
	}
```
我感觉就是随便贪了一组答案，会不会把比较优的分支剪掉，导致不能出最小值？

[xwind wrote on 2016-01-12T06:13:59]

---

这是个对当前状态的估价，如果保证了p(x)不大于实际的步数，就是说即使走p(x)步都更新不了答案，那么肯定实际上也更新不了答案，所以不可能把比较优的分支剪掉。

[sd_invol wrote on 2016-01-12T06:18:57]

---

@Sd_Invol#3093 确实是这样，这个p(x)算出来的答案能够保证大于实际步数，我愚蠢了

[xwind wrote on 2016-01-12T06:26:52]

---

