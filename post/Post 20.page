# Codeforces Round #319 E Painting Edges

RT

[ftiasch wrote on 2015-09-10T18:45:33]

---

这题怎么做啊……

[ftiasch wrote on 2015-09-11T02:25:57]

---

两个做法：

1.  LCT暴力搞，对每种颜色维护连通性。把每条边的边权看成下次被query到的时间，LCT维护最大生成树及每个店的深度奇偶性。代码量应该不小。

2. 官方解法，用线段树解决分治问题。官方题解说的很清楚了，需要实现可以一步一步rollback的DSU。
优美好写！http://codeforces.com/contest/576/submission/12970640

[AngryBacon wrote on 2015-09-12T09:41:22]

---

> @AngryBacon#131 官方解法，用线段树解决分治问题。官方题解说的很清楚了，需要实现可以一步一步rollback的DSU。

但是我有一个问题，随便 rollback 的话，复杂度其实不能保证吧？（我说其实，其实，其实（~~变小~~）……

[ftiasch wrote on 2015-09-12T09:55:25]

---

@ftiasch#134 什么叫随便rollback？用$\log n$的DSU复杂度是对的啊

[AngryBacon wrote on 2015-09-12T10:48:21]

---

@AngryBacon#142 然而你写的并不是嘛……

[ftiasch wrote on 2015-09-12T13:54:54]

---

@ftiasch#145 我写的是啊，仔细看……

[AngryBacon wrote on 2015-09-12T15:33:27]

---

@ftiasch#145 都怪你给我改了这头像，说什么都像嘲讽

[AngryBacon wrote on 2015-09-12T15:34:20]

---

> @AngryBacon#147 ftiasch 我写的是啊，仔细看……
> 
> 喜欢

有趣吧！

[ftiasch wrote on 2015-09-13T07:04:42]

---

@AngryBacon#131 嘤嘤樱，链接发错了...这是D吧

[Nero wrote on 2015-09-13T07:32:39]

---

@Nero#162 您说的特别对！更正：http://codeforces.com/contest/576/submission/12969850

[AngryBacon wrote on 2015-09-13T08:36:41]

---

关于第一种做法，我想问一下LCT维护最大生成树的时候需要维护一条链上最小的边权，可是一个点有时候有多条边，这时候该怎么维护呀？现在的做法是每个节点在pushup的时候二分查找他和他前驱之间的边的编号，但这样每个节点就要维护前驱和后继，而且复杂度还多了一个log.....维护最大生成森林的正确姿势应该是怎样的呢？感觉这是一个常用的算法

[_ilovelife wrote on 2015-09-17T08:41:25]

---

@_ilovelife#298 对于需要改变树的根，并且权记在树边上的LCT问题。一般的做法是对于每条边(u,v)新建一个节点e，然后u-e-v，边权记在点e上，这样需要2n个节点。（也有不新建节点的方法，但年代久远我真的记不清了）

对于这道题，首先他的颜色数只有50，所以可以对每个颜色分别维护连通性。至于前驱后继的问题，对于对于当前时刻t的一条树边e的权值应该为 $\min_{i>t,query_i=e} i$，和具体的每个query的结果没有任何关系，所以可以离线处理出来。

[AngryBacon wrote on 2015-09-17T12:47:00]

---

真是一道有趣的题目

\蓝猫/

[sd_invol wrote on 2015-09-17T15:09:49]

---

