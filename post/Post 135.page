# POI XXI Stage III Tourism

取一棵dfs树，那么所有的边只能是祖先与儿子的关系，可以用状压DP解决，但是状压DP的转移好像不是很容易就能写出的，求教。

[Claris wrote on 2015-10-03T04:42:06]

---

$f(v, mask)$ 表示考虑到点 $v$，$mask$ 表示祖先的状态，有 $3$ 种状态：

1. 占着
2. 没被占，而且没有满足
3. 没被占，但是已经满足

然后就按照 dfs 序一个一个点考虑就行了。这跟通常树形 dp 的顺序不太一样。

然后 $10$ 层还是太多了，我们把它变成 $5$ 层吧。我们先造一颗 dfs 树，发现它有 $10$ 层。那么我们找到那条 长度是 10 的路径，从中点开始 dfs。那么其实就会得到一颗原来的树的一颗 5 层的子树，剩下那里 dfs 也就不会超过 5 层了。



[ftiasch wrote on 2015-10-03T04:46:07]

---

@ftiasch 似乎正确的标题应该是POI XXI Stage III Tourism

[zimpha wrote on 2015-10-03T06:03:06]

---

@zimpha#1345 手抖多按了一个 = =

[ftiasch wrote on 2015-10-03T06:03:34]

---

@ftiasch#1341 对于一个点x，它连出去的边如果在它的子树里，且不是它的儿子，那么这个时候应该怎样处理？

[Claris wrote on 2015-10-03T16:24:47]

---

@Claris#1381 先不要管它，过会孙子们会更新它的。

[ftiasch wrote on 2015-10-03T16:26:44]

---

@ftiasch#1383 如果在子孙里选了一个点，这个点往上与一个很高的祖先有边，那么这个祖先的状态就变成了满足，这个如何在DFS序里做到更新？

[Claris wrote on 2015-10-03T16:28:51]

---

我这么说你可能更容易理解一点……

$f(v, mask)$ 表示现在考虑到第 $v$ 个点，$\mathrm{mask}$ 表示 **世界上所有点** 的状态。然后你就一个一个地考虑 $v$，然后更新 $\mathrm{mask}$ 。这样总是没有问题的吧？

然后我们注意到，某个点 $u$，在考虑 $u$ 之前，肯定是没有被满足的（忽略被父亲艹到这件事）。在遍历完 $u$ 的子树之后，肯定是满足了的。所以任何时候有用的 $\mathrm{mask}$ 实际上只有祖先的那一段。

[ftiasch wrote on 2015-10-03T16:32:29]

---

@ftiasch#1385 懂了，这样是$O(n3^{10})$的。关于那个压成5，我还是不明白，我取了那个中点，但是得到的树的深度却仍然有10。

[Claris wrote on 2015-10-03T16:45:12]

---

@Claris#1386 不太可能啊，能给个反例吗 = =

[ftiasch wrote on 2015-10-03T16:47:43]

---

@ftiasch#1387 10个点的完全图

[Claris wrote on 2015-10-03T16:55:32]

---

@Claris#1388 那是我想错了。

[ftiasch wrote on 2015-10-03T16:57:31]

---

@Varona#1390 谢谢叉姐，过掉了，这题还卡内存卡常数。

[Claris wrote on 2015-10-04T18:44:46]

---

膜了一发标程，大概是这样做的。

对每个连通块单独做，求出从某个点出发的DFS生成树，则非树边只有竖边。然后考虑最暴力的DP，设f[x][i][j]为以x为根的子树已经全部被支配且从x往上那d个点(d是x节点的深度)是否被选的mask是i，是否被支配的mask是j的最小代价。那么转移是显然的，这样看起来是$O(n 4^{10})$的，实际上只有 (i|i<<1|i>>1) 是 j 的子集的状态是有用的，这样的状态数量只有$(1+\sqrt{2})^d$，所以可以通过，时间复杂度为$O(n (1 + \sqrt{2})^{10})$。


[sd_invol wrote on 2016-04-22T15:36:50]

---

= = 其实是一回事……只不过std这样就证明了这样做那个参数会卡到$1+\sqrt{2}$而不是$3$……

[sd_invol wrote on 2016-04-22T17:07:01]

---

