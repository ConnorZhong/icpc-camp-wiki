# 给定正整数序列，求Ai，Aj使得Ai or Aj最大

@ftiasch#4349 那这题要具体怎么做了，没想出。。

[zslzx wrote on 2016-09-20T08:27:02]

---

给定正整数序列 $a_1, a_2, \ldots, a_n$，求 $a_i, a_j$ 使得 $a_i\ \mathrm{or}\ a_j$ 最大。

$n \leq 10^5, a_i \leq 10^6$.

[clatisus wrote on 2016-09-03T05:36:18]

---

跑一个 or 卷积就好啦……

[ftiasch wrote on 2016-09-03T11:37:18]

---

@ftiasch#4165 叉老师。。or卷积具体是个什么东西啊

[zslzx wrote on 2016-09-19T14:43:46]

---

@zslzx#4348 

就是给出 $A[0..2^n), B[0..2^n)$，求
```
for i in 0..2^n:
  for j in 0..2^n:
    c[i or j] += a[i] * b[j]
```

[ftiasch wrote on 2016-09-19T14:47:46]

---

@zslzx#4352 可参考[炫酷反演魔术](http://vfleaking.blog.uoj.ac/blog/87)。

[sd_invol wrote on 2016-09-20T11:35:04]

---

我记得可以这样做。枚举一个数，贪心的从高位开始添加 1，比如 1011011，先试试 x1xxxxx 有没有，如果有就试 x1xx1xx，没有就试 xxxx1xx。

上述过程需要查询某些位固定是 1 的数是否存在。可以自底向上的分治预处理。例用 f[0100100] 表示 x1xx1xx 有没有。现在假设已经处理好了最高位是 0 的 f 和最高位是 1 的 f，即 f[0s] 表在高位是 0 的数中固定 s 的 1 位的数是否有，f[1s] 表高位是 1 的数中上述是否有；扩展到最高位 f[1s] 不变，f[0s] 或上 f[1s]。最底层用 f[s] 表示 s 是否有即可。

[gu_castle wrote on 2016-09-21T09:07:03]

---

@zslzx#4352 
数组$a[0..n)$可以变成$A[0..2^j)$,
其中, $j$为满足$2^j > max(a[i])$的最小整数, 这题大概是20.
并且对于$0 \le i \lt n$, $A[a[i]] = 1$, 其它数是0
那么如果对$A[0..2^j)$自己进行or卷积, 原数组两两or出来的答案存在的话, 卷积对应的结果会大于0.
然后自己or自己的要$-1$(看情况吧)
然后剩下的只要找到卷积的结果不为零的位置中下标最大的, 就可以得到答案了...
然后算卷积是有一个$O( j*2^j )$的算法, 对于这题大概就是2e7...
然后我也不知道是不是这样

[headspin wrote on 2016-09-21T14:28:26]

---

@headspin#4371 找了一下，or卷积貌似是用快速沃尔什变换来搞，复杂度nlogn

[fhy_tan wrote on 2016-09-23T08:39:39]

---

[安利](http://picks.logdown.com/posts/179290-fast-walsh-hadamard-transform)

[totoro wrote on 2016-09-23T10:29:34]

---

