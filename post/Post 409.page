# Codeforces Round #349 题解

# Reberland Linguistics

子串 $s[i, i + l)$ ($i > 5, 2 \leq l \leq 3$) 是答案，等价于 $s[i, i +l)$ 可以是**第一段**。

DP。设 $f(i, l)$ 表示组成后缀 $s[i..]$，**第一段**是 $s[i, i +l)$ 是否可行。转移时枚举 $2 \leq l' \leq 3$，要求 $s[i, i + l) \neq s[i + l, i + l + l')$ 同时 $f(i + l, l')$.

# World Tour

先计算 $\delta(u, v)$ 表示 $u$ 到 $v$ 的最短路。

假设答案是 $a \to b \to c \to d$，枚举 $b, c$ 。之后是找 $\delta(a, b)$ 的最大值，要求 $a \notin \{b, c, d\}$. 
因为 $a$ 只有 $3$ 个不合法取值，所以 $a$ 可能的取值只有 $\delta(x, b)$ 最大的 $4$ 个 $x$。

# Codeword

对于长度为 $l$ 的子序列，$n$ 的答案是
$$f_l(n) = \sum_{i = l}^n \binom{i - 1}{l - 1} 25^{i - l} 26^{n - i} = \frac{26^n}{25^l} \sum_{i = l}^n \binom{i - 1}{l - 1} \left(\frac{25}{26}\right)^i.$$
因为 $l$ 的总和不超过 $10^5$，所以 $l$ 不同的取值只有最多 $2 \sqrt{10^5}$ 种。对于每个 $l$，前缀和预处理所有 $n$ 的答案。

# Chain Reaction

先二分，再 $4^4$ 枚举点的运动方向，$4!$ 枚举点成为正方形的顶点编号。
假设正方形的横、竖坐标分别是 $x_1 < x_2, y_1 < y_2$.
那么根据上面的枚举，每个变量 $t$ 有一个上界 $\mathrm{high}(t)$ 和下界 $\mathrm{low}(t)$。
例如，点 $(x, y - \Delta)$ 成为了 $(x_2, y_1)$ 这个顶点，我们就知道 $x_2 = x, y - \Delta \leq y_1 \leq y$.

假设正方形的边长是 $l \geq 1$，那么就是要问有没有一对 $x_2 = x_1 + l, y_2 = y_1 + l$ 满足上面得到的上界、下界条件。
对于 $x$ 和 $y$ 分别考虑，使得区间 $[\mathrm{low}(x_1), \mathrm{high}(x_1)]$ 和区间 $[\mathrm{low}(x_2) - l, \mathrm{high}(x_2) - l]$ 有交的 $l$ 也是一个区间。
对于 $x$ 和 $y$ 分别求出可行的 $l$ 区间，在交集里面随便取一个，就是可行的 $l$，也能得到一组可行的矩形坐标。


[ftiasch wrote on 2016-04-30T03:08:11]

---

补一个E的题解

# Forensic Examination

## 方法一

对大串和所有小串建SAM，对于一个询问$l,r,sl,sr$，可以在parent tree上倍增locate到$sl,sr$所在的状态。
然后对于每个小串的前缀，把它对应的状态上标记一下它的出现次数加一。
对于parent tree的每个节点，维护它的子树内每个小串的出现次数，自底向上的合并线段树即可，然后每个query区间询问最大值即可。

总串长$N$，小串总串长$M$，询问个数$Q$，时间复杂度 $O(N\log N+Q(\log M+\log N))$，空间$O(N\log N+Q)$

## 方法二

把大串和所有小串接起来做SA，对每个询问$l,r,sl,sr$，可以很方便的在SA上locate出来一个区间。
然后对这些区间做莫队，用一颗线段树维护当前区间内每个小串的后缀出现次数，区间询问最大值即可。

总串长$N$，小串总串长$M$，询问个数$Q$，时间复杂度 $O(N\sqrt{N}\log M+Q\log M))$，空间$O(N+Q)$。

看上去复杂度爆炸，实际上方法二的常数很小，大概是数据也不强，实际速度完爆方法一，心塞。

[AngryBacon wrote on 2016-04-30T03:32:13]

---

写成std::set<int>s; 
会比 using namespace std;set<int>s; 有好处？

[gyf wrote on 2016-04-30T11:28:06]

---

@gyf#3519 一定程度上能够减慢你的编码速度，掩饰自己的真实水平。

（基本上就是个人习惯啦。比如说做大一点的 C++ 工程的话，不 using namespace std 肯定是一个好习惯。

[ftiasch wrote on 2016-04-30T12:22:26]

---

C题式子是怎么弄出来的...

[totoro wrote on 2016-04-30T14:18:16]

---

@Totoro#3521 啊突然想明白了....

[totoro wrote on 2016-04-30T14:42:33]

---

@Totoro#3521 考虑相邻两个字符$s_i$和$s_{i+1}$之间有$x$个新加的字符，那么只要这$x$个字符和$s_{i+1}$都不一样就好了，贡献就是$25^x$。然后只有$s_l$后面新加的贡献是$26^x$。你枚举$i$表示到$s_l$为止有$i$个字符，把$i-l$个新加字符分配到$l$个空隙中的方案数是$\binom{i-1}{l-1}$，于是一个$i$个贡献就是$\binom{i-1}{l-1}25^{i-l}26^{n-i}$。

[zimpha wrote on 2016-04-30T14:42:55]

---

@AngryBacon#3518 解法一挺快的啊，我的写法是686ms

[NanoApe wrote on 2016-05-24T04:26:05]

---

