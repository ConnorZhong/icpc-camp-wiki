# Info

Date: 2017.10.01 12:00-17:00

[Link](http://www.bnuoj.com/v3/contest_show.php?cid=9247)

# Solutions

## A Abbreviation

solved by sk, upsolved by sk

---

sk's solution

字符串模拟。

或者用正则表达式$\backslash b([A-Z][a-z]+ )+([A-Z][a-z]+)\backslash b$。

## B Binary Code

upsolved by quailty

---

quailty's solution

由于只有一个问号，每个串只有两种状态，记第$i$个字符串问号处填$j$得到的字符串为$s_{i,j}$，这显然是个$2-SAT$模型，但是需要优化边数。

考虑把所有字符串插入$Trie$中，根据$Trie$可以先建出两棵树，一棵树的边是向上的，记为$T_{up}$，另一棵树的边是向下的，记为$T_{dw}$，并且从两棵树上代表$s_{i,j}$字符串的点向$(i,j \oplus 1)$连一条有向边。

对于$s_{i,j}$，如果没有其他字符串和它相同，那么可以直接从$(i,j)$分别向两棵树上代表$s_{i,j}$的点连一条有向边，否则可能会导致$(i,j)$间接连向$(i,j \oplus 1)$，但实际上不存在矛盾。

一个解决方案是，对其中一棵树比如$T_{dw}$，如果某个点对应多个字符串$s_{i,j}$，那么新建两组点，前一组是每个点向前一个点连边，后一组是每个点向后一个点连边，然后每个点再连向对应的$(i,j \oplus 1)$，相当于前后缀和优化。现在只要从$(i,j)$向$T_{up}$上代表$s_{i,j}$的点的父亲连一条有向边，从$(i,j)$向$T_{dw}$上代表$s_{i,j}$的点的两个儿子分别连一条有向边，再从$(i,j)$向$T_{dw}$上代表$s_{i,j}$的点中选出对应的前缀和后缀分别连一条有向边。

这样优化后边数是$O(n+\sum len)$级别的，$SCC$缩点判断是否合法，然后在缩点后得到的$DAG$上拓扑排序构造一组解即可。

## C Cactus Construction

upsolved by quailty

---

quailty's solution

对于树的情况，可以发现只需要三种颜色，对整棵树$DFS$一遍，已经处理完的子树内部点标为$1$，根标为$2$，正在处理的点标为$3$，那么只需要把当前点和子树$join$起来之后$connect\ 2\ 3$即可把当前点和每个子树的根连起来，然后再通过$recolor\ 2\ 1$和$recolor\ 3\ 2$来修改以当前点为根的子树的处理状态。

对于仙人掌的情况，称一个环上最早访问的点是环顶部，最晚访问的点是环底部，考虑递归处理完以环底部为根的子仙人掌之后将环底部标为$4$，并保持该状态直到开始处理环顶部，此时通过$connect\ 3\ 2$和$connect\ 3\ 4$就可以把包含环顶部的所有环闭合，同时把环顶部和它的每个子仙人掌的根连起来。需要注意访问的顺序，比如优先遍历环子节点，将环闭合后再考虑访问其他非环子节点。

## D Delight for a Cat

upsolved by quailty

---

quailty's solution

~~这TM不就是校赛题……~~

设$x_i=0,1$表示第$i$天是吃还是睡，那么对于$j=1,2,\dots,n-k+1$都有$m_s \leq \sum_{i=j}^{j+k-1}x_i \leq k-m_e$，现在要最大化$\sum_{i=1}^{n}(s_ix_i+e_i(1-x_i))=\sum_{i=1}^{n}(s_i-e_i)x_i+\sum_{i=1}^{n}e_i$。

添加辅助变量$0 \leq y_j \leq k-m_e-m_s(j=1,2,\dots,n-k+1)$使得$y_j+\sum_{i=j}^{j+k-1}x_i=k-m_e$，差分后可得第$0$条式子$y_1+\sum_{i=1}^{k}x_i=k-m_e$，第$j$条式子$y_{j+1}-y_j+x_{j+k}-x_j=0(j=1,2,3,\dots,n-k)$，第$n-k+1$条式子$-y_{n-k+1}-\sum_{i=n-k+1}^{n}x_i=-(k-m_e)$。

观察到所有变量$x_i$和$y_j$均恰好出现两次，且系数分别为$+1$和$-1$，那么这个线性规划可以费用流模型解决，每条式子相当于流量平衡条件，根据条件建图即可，构造方案只需要考察每个$x_i$对应的边的流量。

## E Expect to Wait

solved by sk, upsolved by none

---

sk's solution

把询问从小到大排序，假设当前初始车辆数为$0$，等待时间总和为每个时间段等待人数乘上这个时间段的长度之和，因为每个时间段等待人数相当一个前缀和，考虑初始车辆数增加$x$，那么等待人数小于等于$x$的时间段就要从之前的答案里减去。这个过程可以用一个堆来维护。

## F Foreign Postcards

solved by quailty, upsolved by none

---

quailty's solution

$dp[i]$表示从剩下最后$i$张牌这个局面开始的期望值，那么$dp[i]=\frac{\sum_{j=1}^{i}(cost[j][i]+dp[j-1])}{i}$，其中$cost[j][i]$表示倒数第$j$到$i$张牌中$W$或者$C$的个数，具体是哪一种取决于倒数第$i$张牌是什么，注意到$cost[j][i]$可以拆成两个前缀和之差，再维护$dp$的前缀和即可$O(n)$。

## G Game on Graph

unsolved

## H Hard Refactoring

solved by Jove, upsolved by none

---

Jove's solution

模拟+离散化扫描线区间合并（数据范围只有16bit整数，用数组for也可以），模拟题应该写的更优美简洁方便debug。

## I Indiana Jones and the Uniform Cave

unsolved

## J Jenga Boom

solved by quailty, upsolved by none

---

quailty's solution

维护每一层的凸包和质心，每一次操作后从上往下逐层判断即可，一个trick是如果中间某层抽空了那么一定会倒，但如果是最上面一层抽空那么不会倒，并且层数减少一。

## K Kids Designing Kids

upsolved by quailty

---

quailty's solution

原问题相当于选取合适的平移方式使得三张图叠加起来之后是空，考察三张图的最左上点，可以发现平移后至少有两个点重合，否则总有一个点消不掉，于是枚举三种平移方式暴力判断即可。

## L List of Primes

upsolved by Jove

---

Jove's solution

考虑到涉及的集合的$sum$不会太大，先筛出一些素数，然后写一个dp。$num[i][j]$表示只使用了第$i$个及以后的质数，集合的和恰好为$j$的集合总个数，$len[i][j]$表示这样的集合总长度，对于$num[i][j]$的计算其实是一个简单的01背包，$len[i][j]$也可利用$num[i][j]$得到转移。

打出结果发现，字符串长度在$10^{18}$中涉及的集合的$sum$只有$2100$左右，但是一种$sum$的集合长度还是很大的，所以不能单纯的根据$sum$进行暴力搜索。

观察发现，我们利用求得的$num$和$len$可以得到，对于一种$sum$的集合，前面几个元素已经确定的情况下的个数及长度。如第一个元素为第$pid$个质数，集合的和为$sum$的集合个数为$num[pid][sum]-num[pid+1][sum]$，长度也可以相应求出。这样我们可以得到最接近左边界的那个集合，然后往后搜索后面的集合，直到右边界即可。

## M Mole Tunnels

upsolved by quailty

---

quailty's solution

考虑费用流，因为新加入一个$mole$不会使答案变小，那么费用流增广过程中不会出现负环，由于和源汇相连的边费用均为$0$，这表现为不存在若干条路径之并的权值和为负，这表明任意一条增广路都是非负的，沿着源汇绕圈相当于找多条增广路并起来，并不会比一条简单路更优，也就是只需要每次从$p$出发找到最近的还有食物的点即可。

考虑$dp[i]$表示从$i$出发走到子树内的食物的最短距离以及食物所在位置，每条边如果有从下往上的路径，那么从上往下走的距离是$-1$，反方向同理，现在要从$p$出发找到最近的食物，只需枚举$p$及其祖先作为路径的转折点，找到目标点$q$之后更新每条边的经过情况以及$q$处的食物数量，再自底向上来修改受影响的$dp$值。

由于是完全二叉树，树高只有$O(\log{n})$，也就是单次增广的代价是$O(\log{n})$，总的复杂度是$O(n+m\log{n})$。

# Replay

`Q` 日常迟到。开场 `J` 正着读，`K` 倒着读，`Q` 挑短的读。

很快 A 题和 F 题有人过，`Q` 就接过去 F 题开始搞，经过一番甩锅决定让 `K` 来写 A 题，

之后 H 题也有人过，`J` 读完表示还是躲不掉写模拟，

`Q` 沉迷写 F 题无法自拔，在发现自己读错两次题之后终于过了，就开始看 E 题，

不久之后 A 题也过了，`J` 开始上机写 H 题，

`Q` 认为 E 题交给 `K` 比较合适，就交流了一下思路，自己去想 J 题，发现直接模拟就行了，

`J` 和 `K` 开始轮转上机，不久之后 H 题 WA 了，E 题 AC 了，

`Q` 让 `K` 帮 `J` 看看 H 题，自己在写 J 题，推了一阵子也过了，H 题不知道怎么改了改也过了，

之后 `Q` 在看 B 题，认为是个需要优化建图的 2-SAT，虽然挺麻烦但是也能做，然后发现 L 题只要推清楚贡献也可以做，就交给 `J` 和 `K` 来看，

但是 `K` 表示这类题肯定不会做（？？？），就去看 K 题，但是也没有太好的思路，

最后 `J` 和 `K` 开始写 L 题，`Q` 放弃了 B 题也过来帮忙搞 L 题，但还是 GG 了。

## quailty

今天躺得有点厉害，把锅甩出去之后好像就无所事事了。读题也要更耐心一点，不能轻易放过细节。

## sk

要勇敢接锅，没想清楚的先和队友讨论清楚再写。可能上来接到A题有点懵，不过还是要自信。其次读题能力有些差，好几个题都是读一半没读懂就鸽了。

## Jove

考虑模拟养成计划？模拟题更要先准备清楚具体细节怎么写，上来就写会导致整个结构很混乱，适合分散在零碎机时完成。