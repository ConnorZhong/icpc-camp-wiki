A. git \[ruclion\]
------------------

树形dp的简单题，需要先像子母树一样的把树建出来,之后dp状态定$dp[i][0]$和$dp[i][1]$分别代表没有添加到应该有、全都有删除到应该有的代价。

B. Circles and Squares \[skyxuan\]
----------------------------------

计算每个与给出的圆有交集的方格对答案的贡献

C. Jump on Buildings \[skyxuan\]
--------------------------------

反着做就是区间dp，维护两个最大值可以做到$O(1)$的转移

D. Magical Matrix
-----------------

E. Cat and Mouse \[skyxuan\]
----------------------------

二分答案后就是求一个图的最大团，也就是求补图的最大独立集。由于其补图是二分图，可以直接跑匈牙利

F. Similar Strings \[ruclion\]
------------------------------

简单题。枚举最终的压缩串的样子，然后用隔板法计算原串长度为n的方案数，之后求前缀和预处理。

G. Chota Mouse and his Birthday Cake \[skyxuan\]
------------------------------------------------

按题意模拟

H. Longest Palindrome \[rikoizz\]
---------------------------------

签到题

I. Coins \[skyxuan\]
--------------------

整体二分。把插入操作按照权值二分，先做左边的，对于一个询问，如果左边区间的插入操作大于等于$k$个则在左区间中递归查询，否则在右区间中递归查询。那么问题就变成了

有$n$个链上的插入操作，询问操作$i$到操作$j$之间涉及到某点的插入操作的数量。注意到这个数量是可减的，对于一个询问可以拆成两个单独的询问来做，这样问题就变为了

有$n$个链上的插入操作，询问在前$i$次操作中涉及到某点的插入操作的数量。把询问和插入都按id排序，就是一个简单的$two-point$的做法了。我们要维护的是在链上加$1$和询问某点的值这两个操作，如果使用树链剖分的话需要两个$\log$，复杂度有点爆炸，由于插入操作是加法，我们可以采用在$x$和$y$都加一，在$LCA(x,y)$和$father_{LCA(x,y)}$减一，询问的时候查询以当前点为根的子树和就可以解决了。

这样总的复杂度是$O(n \log^2 n)$

J. Coprimes \[ruclion\]
-----------------------

目前没过，时间复杂度超了。思路是每次查询用莫比乌斯做，$num[i] = j$代表i的倍数的个数为j，用$sum[j] = \sum\mu_i$来反着存便于计算，并且我们拉链只扫那些不为0的j，这样的复杂度为$\sqrt{m}$级别的，sum的维护用莫队。分析的复杂度爆炸为莫队的时候，\$64n\sqrt{n}\$64大约是每个数有效约束的个数。

Sum Up
------

-   skyxuan:赛场上过了7题，剩下的是真不会了……前期切题有点慢，C题居然必须要输出行末空格，真的奇怪……E题刚开始数组开小RE一发。过了E才刚两个小时，我们已经6题了，最后一个算概率的坑了三个小时TAT……刚开始一直wa，后来换我重写了一发，4:57过的。赛后发现是之前的一版一个地方没用long
    long。

