1001.ATM Mechine\[rikoizz\]
---------------------------

由题意可知最坏情况下的尝试次数不会多于LOG(n)于是暴力dp即可

1002.Cycle\[rikoizz\]
---------------------

用后缀数组处理出第一个串和第二个串的关系.维护b\[i\]表示第一个串\[1..i\]与第二个串\[k..k
+ i - 1\]匹配的所有的k(bitset)

1003.Divide the Sequence \[ruclion\]
------------------------------------

倒着做，贪心，每次能分成新的一段就分。

1004.How Many Triangles \[ruclion\]
-----------------------------------

枚举一个点，极角排序出其他的点，遍历极角，用twopointers的方法快速找到90,180的关键点，注意共线的处理。

1005.Interestingp\[rikoizz\]
----------------------------

manacher算法+离线等差数列区间统计.（比赛的时候少减了1没有调试出来,代码能力欠佳）

1006.Interval
-------------

1007.K-wolf Number \[ruclion\]
------------------------------

数位dp，记录前4个位置是什么即可，自己编号状态。

1008.Level Up\[rikoizz\]
------------------------

很有趣的一个题,考虑中位数的只可能变成原本序号大一的数字,于是维护每个子树的这两个数字.在维护的时候用到了线段树的合并,空间复杂度nlogn,其实和可持久化的思路差不多.接下来算答案的时候，维护当前结点为根的子树在哪些子孙值的变化为100000时,中位数会变化,于是考虑贡献即可。

1009.Permutation
----------------

1010.Prefix\[rikoizz\]
----------------------

主席树+Trie,依次维护每个串此时所控制的不同的前缀数量.

1011.Two \[ruclion\]
--------------------

f\[i\]\[j\]代表a到i，b到j能匹配的个数，f\[i\]\[j\] = （f\[i\]\[j - 1\] -
f\[i - 1\]\[j - 1\]） +　(f\[i - 1\]\[j\] - f\[i - 1\]\[j - 1\]) + f\[i
- 1\]\[j - 1\] + (a\[i\] == a\[j\] ? f\[i - 1\]\[j - 1\] + 1 : 0)

1012.World is Exploding \[skyxuan\]
-----------------------------------

分别统计每个数前面比他大、前面比他小、后面比他大、后面比他小的个数，根据这些可以算出答案。

Summary:
--------

-   rikoizz: 最近的比赛我写题的数目下降了很多,自己的代码能力有一些的下降,我们队时不时卡题过不去可能也和战术有关系.调整心态,多补题,下次开始多写一点.

-   ruclion:递归程序全局变量回溯或者和递归层参数有关，不然不要用。数位dp省掉limit和first。学习了极角新的排序方法，和遍历一圈的的方法。http://paste.ubuntu.com/22002561/

-   skyxuan：


