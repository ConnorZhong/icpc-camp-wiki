1001. Acperience \[ruclion\]
----------------------------

根据$w_i$的值的正负可直接判断出$b_i$的取值，之后发现是一个关于$\alpha$的二次函数，求对称轴即可。

1002. Born Slippy \[skyxuan\]
-----------------------------

考虑$dp[i]=max(dp[j]+w_i opt w_j)$，其中$j$为$i$的祖先，那么设$w_i$前半部分为$x_i$，后半部分为$y_i$，$f[sta1][sta2]$表示当$x_j=sta1$，$y_i=sta2$时，$dp[j]+sta2 opt y_j$的最大值。
询问的时候，枚举sta1，更新的时候，枚举sta2

1003. Call It What You Want
---------------------------

n个点，n+4条边，找最长路的那道题。现在还不会。

1004. Differencia\[rikoizz\]
----------------------------

线段树。维护当前结点b数组每一项在左儿子节点或者右儿子节点的位置。之后的操作和普通线段树一样，

1005. Eureka \[skyxuan\]
------------------------

枚举一个点pi，考虑以pi为一个端点的所有直线的情况，以pi为坐标原点，把其他点按极角排序，只考虑极角在0pi范围内的点，枚举直线的另一个端点，可以方便的统计出这两个点之间的点的个数。注意考虑重点的情况。

1006. Fantasia \[skyxuan\]
--------------------------

如果给出的图是一棵树就是非常简单的树dp了。我们求出图中的所有点双，建一个新图，对每个点双$S_i$，新建节点$u_i$，向所有$v \in S_i$连边。这样最后会形成一个森林，且新图中删掉任意点的连通性和原图中的连通性相同。这样就是一个树上的问题了。

1007. Glorious Brilliance \[ruclion\]
-------------------------------------

先跑出所有点的最短路，则指定黑白交换一定是花费最短路的代价。然后是个二分图，左边的黑点和右边的白点匹配，或者左边的白点和右边的黑点匹配，两者选KM花费匹配较小的。关键是输出方案，用bfs找到一条链，注意边输出的时候点的颜色也在边修改。

1008. Helter Skelter \[skyxuan\]
--------------------------------

一种做法是转化为类似矩形面积并的做法。

1009. It's All In The Mind\[skyxuan\]
-------------------------------------

水题，直接取极值即可。

1010. Join The Future \[ruclion\]
---------------------------------

首先利用后缀和来使用给的限制。用带权并查集维护出哪些位置是相互确定的。二进制枚举那些个数大于等于2的并查集的奇偶情况，然后dp。f\[i\]\[\[0/1\]代表从后往前放到了第i位，并且放完i位之后，i位的后缀和是0/1（偶奇），根据外面二进制枚举的情况，有些f\[i\]\[0/1\]显然是不合法的直接是0。考虑转移，看第i位填奇数或者偶数，然后用f\[i
+
1\]\[0/1\]转移过来。记忆化搜索，这样在放第i位的时候可以搞出字典序最小的，就是第i位放所有能够从i+1位转移过来的最小的值。注意值的存在，方案数%M，以及最小字典序选的数用三个数组来记录

1011. Keep On Movin\[skyxuan\]
------------------------------

水题

1012. La Vie en rose \[skyxuan\]
--------------------------------

dp，f\[i\]\[j\]表示a串的\[i-j+1..i\]和b串\[1..j\]是否能够匹配，可用bitset优化。

1013. Memento Mori \[skyxuan\]
------------------------------

暴力枚举上下界，维护有序表
